1
0:0:0,0 --> 0:5:55,86
[MUSIC PLAYING]


2
0:5:55,86 --> 0:5:56,31
TONY VOELLM: Hello.


3
0:5:56,31 --> 0:5:56,88
Good morning.


4
0:5:56,88 --> 0:6:0,6
Good morning.


5
0:6:0,6 --> 0:6:4,39
Welcome to GTAC 2013.


6
0:6:4,39 --> 0:6:6,34
Focus on mobile and media.


7
0:6:6,34 --> 0:6:7,59
Welcome.


8
0:6:7,59 --> 0:6:9,3



9
0:6:9,3 --> 0:6:10,21
I'm Tony Voellm.


10
0:6:10,21 --> 0:6:13,83
I'll be your host the next
two days up here.


11
0:6:13,83 --> 0:6:16,92
So feel free-- you can check me
out anywhere as I'm walking


12
0:6:16,92 --> 0:6:19,2
around-- and ask questions.


13
0:6:19,2 --> 0:6:22,1
I'll be taking you through some
of the fit and finish


14
0:6:22,1 --> 0:6:23,84
here in the beginning about what
we need to do, and how


15
0:6:23,84 --> 0:6:26,9
we're all going to
participate.


16
0:6:26,9 --> 0:6:30,32
So with that, I would like to
start out with a thank you to


17
0:6:30,32 --> 0:6:31,84
our sponsor.


18
0:6:31,84 --> 0:6:34,1
Some of the unsung heroes are
often the people that actually


19
0:6:34,1 --> 0:6:34,68
write the checks.


20
0:6:34,68 --> 0:6:38,3
So here, if you see Asim hanging
around, he's pretty


21
0:6:38,3 --> 0:6:40,92
awesome because he actually
has helped us fund this.


22
0:6:40,92 --> 0:6:42,17
So thank you, Asim.


23
0:6:42,17 --> 0:6:49,66



24
0:6:49,66 --> 0:6:52,75
This conference is being
streamed live.


25
0:6:52,75 --> 0:6:54,62
So welcome to all
the participants


26
0:6:54,62 --> 0:6:56,54
all around the world.


27
0:6:56,54 --> 0:6:59,95
We hope you're enjoying your
coffee shops, couches, beds.


28
0:6:59,95 --> 0:7:2,25
For everybody here,
just a reminder.


29
0:7:2,25 --> 0:7:4,1
This is being recorded.


30
0:7:4,1 --> 0:7:6,96
Your pictures may show up
anywhere at any time.


31
0:7:6,96 --> 0:7:9,1
I believe everybody here signed
a form on your way in.


32
0:7:9,1 --> 0:7:13,31
If you did not, please
do that.


33
0:7:13,31 --> 0:7:15,9
We would love to be able to
use pictures from here, so


34
0:7:15,9 --> 0:7:18,51
just a reminder.


35
0:7:18,51 --> 0:7:19,53
OK, agenda.


36
0:7:19,53 --> 0:7:21,92
I'm going to go through the
agenda pretty fast so we can


37
0:7:21,92 --> 0:7:23,38
get into our talks.


38
0:7:23,38 --> 0:7:27,33
If you like to tweet or g+
about your experience


39
0:7:27,33 --> 0:7:29,27
here, please do.


40
0:7:29,27 --> 0:7:31,33
One note is, this area,
I think, it's


41
0:7:31,33 --> 0:7:33,14
fine to take pictures.


42
0:7:33,14 --> 0:7:36,36
The doors out the side, please
do not go out of those.


43
0:7:36,36 --> 0:7:38,5
Please do not take pictures
through the portal.


44
0:7:38,5 --> 0:7:40,79
And if you see anything that
you're not supposed to see,


45
0:7:40,79 --> 0:7:42,77
please instantly forget it,
and don't take a picture.


46
0:7:42,77 --> 0:7:44,2
Everything else is fair game.


47
0:7:44,2 --> 0:7:47,82



48
0:7:47,82 --> 0:7:50,12
You have to wear your
badges at all times.


49
0:7:50,12 --> 0:7:51,15
You should have two badges.


50
0:7:51,15 --> 0:7:53,27
One is your visitor
badge here.


51
0:7:53,27 --> 0:7:56,24
And then you have an official
building badge.


52
0:7:56,24 --> 0:7:58,23
Tomorrow, to speed things
up, please keep


53
0:7:58,23 --> 0:7:59,21
your Day One badge.


54
0:7:59,21 --> 0:8:1,21
That way we don't have to
recheck your ID and everything


55
0:8:1,21 --> 0:8:2,64
on the way in.


56
0:8:2,64 --> 0:8:4,61
So you'll have to grab a
second day badge here.


57
0:8:4,61 --> 0:8:7,45



58
0:8:7,45 --> 0:8:9,8
We are hosting tours.


59
0:8:9,8 --> 0:8:10,35
At this point, probably
all the tickets


60
0:8:10,35 --> 0:8:11,87
are gone for today.


61
0:8:11,87 --> 0:8:14,1
I'm not sure about tomorrow, but
you can certainly check in


62
0:8:14,1 --> 0:8:16,15
the lobby during the break times
to get a tour of the


63
0:8:16,15 --> 0:8:17,28
office here.


64
0:8:17,28 --> 0:8:18,83
It is a super cool office.


65
0:8:18,83 --> 0:8:20,87
And I'll tell you some details
about it in a minute.


66
0:8:20,87 --> 0:8:24,8



67
0:8:24,8 --> 0:8:27,99
Each talk, we will be doing
a set of questions.


68
0:8:27,99 --> 0:8:29,62
So we have a Dory set up.


69
0:8:29,62 --> 0:8:31,24
Here is the link to
jump on the Dory.


70
0:8:31,24 --> 0:8:34,11
You can vote up or vote
down questions.


71
0:8:34,11 --> 0:8:35,549
Feel free to add
new questions.


72
0:8:35,549 --> 0:8:39,89
We'll also try to take some live
questions as time allows.


73
0:8:39,89 --> 0:8:40,88
Here's the link here.


74
0:8:40,88 --> 0:8:43,77
So go ahead, and you can grab
this, and sort of jump in, and


75
0:8:43,77 --> 0:8:45,2
take a look at the Moderator.


76
0:8:45,2 --> 0:8:47,65



77
0:8:47,65 --> 0:8:53,25
Attendees, at lunch time,
we are going to do some


78
0:8:53,25 --> 0:8:54,49
roundtable discussions.


79
0:8:54,49 --> 0:8:56,1
These are all of you.


80
0:8:56,1 --> 0:9:0,35
Many of you have asked to host
a topic, or a topic table, or


81
0:9:0,35 --> 0:9:1,49
have discussion.


82
0:9:1,49 --> 0:9:5,17
We have very intentionally
offered to bring in all the


83
0:9:5,17 --> 0:9:6,43
smartest people we know.


84
0:9:6,43 --> 0:9:8,18
That would be all of you.


85
0:9:8,18 --> 0:9:12,37
So please join in to
the topic tables.


86
0:9:12,37 --> 0:9:13,58
These are sort of
participatory.


87
0:9:13,58 --> 0:9:16,73
If you jump in a table, it's not
interesting to you, it's


88
0:9:16,73 --> 0:9:18,62
certainly fine to get up and
go to another table.


89
0:9:18,62 --> 0:9:19,65
Nobody will be upset.


90
0:9:19,65 --> 0:9:22,23
It's just everybody is trying
optimize for things that


91
0:9:22,23 --> 0:9:23,48
they're interested in.


92
0:9:23,48 --> 0:9:26,59



93
0:9:26,59 --> 0:9:27,16
Lunch.


94
0:9:27,16 --> 0:9:30,8
I guess dinner is going to be
on the fifth floor today,


95
0:9:30,8 --> 0:9:32,91
which is up in the
Water Tower Cafe.


96
0:9:32,91 --> 0:9:34,42
It's a very cool cafe.


97
0:9:34,42 --> 0:9:35,96
It actually has a water
tower that came from


98
0:9:35,96 --> 0:9:36,71
New York City here.


99
0:9:36,71 --> 0:9:37,955
You can actually sit in
a Water Tower, if


100
0:9:37,955 --> 0:9:39,205
you've never done that.


101
0:9:39,205 --> 0:9:41,38



102
0:9:41,38 --> 0:9:44,38
Any time you are anywhere in
the building, even going up


103
0:9:44,38 --> 0:9:46,91
and down the elevators, please
make sure you have a


104
0:9:46,91 --> 0:9:47,61
Googler with you.


105
0:9:47,61 --> 0:9:49,81
Somebody in one of these
brightly colored shirts, or


106
0:9:49,81 --> 0:9:53,47
maybe you'll see like a
Google badge on them.


107
0:9:53,47 --> 0:9:57,45
This is a workspace for Google,
and so we just need to


108
0:9:57,45 --> 0:10:0,5
make sure that everybody has
a host at all times.


109
0:10:0,5 --> 0:10:2,67



110
0:10:2,67 --> 0:10:5,87
A little bit about the New
York City office here.


111
0:10:5,87 --> 0:10:7,76
This office started in 2000.


112
0:10:7,76 --> 0:10:10,63
It actually started in a coffee
shop, much like many of


113
0:10:10,63 --> 0:10:12,96
the offices for Google.


114
0:10:12,96 --> 0:10:15,47
So thanks to Starbucks for, I
guess, having all these great


115
0:10:15,47 --> 0:10:17,28
places that we can
all go work.


116
0:10:17,28 --> 0:10:20,51
This is the second largest
office internationally.


117
0:10:20,51 --> 0:10:21,97
And a shout out to
my own office,


118
0:10:21,97 --> 0:10:23,35
which is Seattle Kirkland.


119
0:10:23,35 --> 0:10:26,32
I believe we are either the
third or the fourth.


120
0:10:26,32 --> 0:10:27,81
This is a fantastic office.


121
0:10:27,81 --> 0:10:30,81
It encompasses the whole Port
Authority building here.


122
0:10:30,81 --> 0:10:33,74
One thing I wanted to mention
to all of you.


123
0:10:33,74 --> 0:10:37,31
If you hear a giant bang
sometime today--


124
0:10:37,31 --> 0:10:39,7
I highlighted this
on the slide--


125
0:10:39,7 --> 0:10:42,86
there is a elevator that can fit
an 18-wheeler, literally,


126
0:10:42,86 --> 0:10:43,59
in this building.


127
0:10:43,59 --> 0:10:47,66
This building was designed to
drive trucks around it.


128
0:10:47,66 --> 0:10:49,86
Now we just run scooters all
around this building, but


129
0:10:49,86 --> 0:10:51,63
there are trucks right
behind me.


130
0:10:51,63 --> 0:10:53,79
It's actually the elevator
for the 18-wheeler.


131
0:10:53,79 --> 0:10:55,23
Every now and then, you'll
hear the bang.


132
0:10:55,23 --> 0:10:57,56
I just didn't want you to be
surprised if you hear this.


133
0:10:57,56 --> 0:10:59,68
And sometimes, it can even
vibrate the floor.


134
0:10:59,68 --> 0:11:1,2
So just heads up.


135
0:11:1,2 --> 0:11:2,98
It's probably nothing,
if you hear the bang


136
0:11:2,98 --> 0:11:6,41
coming from this direction.


137
0:11:6,41 --> 0:11:8,24
We do take up an entire
city block here.


138
0:11:8,24 --> 0:11:9,46
In fact, we actually
have two parts.


139
0:11:9,46 --> 0:11:10,35
We have this office.


140
0:11:10,35 --> 0:11:13,45
We also have a section across
over towards the Chelsea


141
0:11:13,45 --> 0:11:15,94
Market area.


142
0:11:15,94 --> 0:11:18,17
As you go looking around, you
go out, you can go into the


143
0:11:18,17 --> 0:11:18,77
Chelsea Market.


144
0:11:18,77 --> 0:11:20,79
The whole bottom part is
actually still a market.


145
0:11:20,79 --> 0:11:23,75
That's a fun place
to go visit.


146
0:11:23,75 --> 0:11:26,14
There are lots of different
products here in this office.


147
0:11:26,14 --> 0:11:30,73
Everything from Ads to Google
Drive to Maps and Finance.


148
0:11:30,73 --> 0:11:32,69
Google Cloud is here.


149
0:11:32,69 --> 0:11:34,82
Really, engineers that are
working on the products that


150
0:11:34,82 --> 0:11:37,6
you know and love are all
here in this building.


151
0:11:37,6 --> 0:11:39,45
We also have Marketing,
and Sales, and


152
0:11:39,45 --> 0:11:41,65
Engineering, and Support.


153
0:11:41,65 --> 0:11:45,4
It really takes a big team to
deliver fantastic products.


154
0:11:45,4 --> 0:11:47,96



155
0:11:47,96 --> 0:11:50,5
A little bit about the New
York City culture here.


156
0:11:50,5 --> 0:11:54,4
We have many different
themed cafeterias.


157
0:11:54,4 --> 0:11:56,81
I guess we serve like somewhere
around a million


158
0:11:56,81 --> 0:11:58,98
plus meals a year here
in this office.


159
0:11:58,98 --> 0:12:1,2
It just gives you an
idea of the scope.


160
0:12:1,2 --> 0:12:3,77
We have these great scooters
that we can run up


161
0:12:3,77 --> 0:12:4,3
and down the halls.


162
0:12:4,3 --> 0:12:6,29
Sorry, unless you go on
the tour, you won't


163
0:12:6,29 --> 0:12:6,97
be able to do this.


164
0:12:6,97 --> 0:12:9,22
But I guess if you're on the
tour, you can grab one.


165
0:12:9,22 --> 0:12:10,45
We tried this last night.


166
0:12:10,45 --> 0:12:13,18
I duly impressed my friend.


167
0:12:13,18 --> 0:12:15,9
I took my luggage, and my
bag, and everything.


168
0:12:15,9 --> 0:12:18,11
I dropped it on a scooter, and
we raced across the building,


169
0:12:18,11 --> 0:12:20,83
I think, in about 45 seconds.


170
0:12:20,83 --> 0:12:23,37
The scooters really get us
around this building fast.


171
0:12:23,37 --> 0:12:25,9
We have game rooms and break
rooms all over the place.


172
0:12:25,9 --> 0:12:28,25
You'll see this on the
tour, which is great.


173
0:12:28,25 --> 0:12:30,47
We are definitely a very
diverse company.


174
0:12:30,47 --> 0:12:35,5
We support diversity in
all of its glory.


175
0:12:35,5 --> 0:12:38,8
And so we have lots internal
groups to sort of communicate


176
0:12:38,8 --> 0:12:41,84
and share our thoughts with
everybody, which is fantastic.


177
0:12:41,84 --> 0:12:43,9
I love this a lot
about Google.


178
0:12:43,9 --> 0:12:46,38



179
0:12:46,38 --> 0:12:48,13
A little bit about what
we've done in the


180
0:12:48,13 --> 0:12:49,5
greater New York area.


181
0:12:49,5 --> 0:12:51,6
One of the things we do at
Google is we try to be great


182
0:12:51,6 --> 0:12:52,85
corporate citizens.


183
0:12:52,85 --> 0:12:55,78
And great citizens of the
areas in which we are.


184
0:12:55,78 --> 0:12:59,42
And in this area here, just
late last year, we lit up,


185
0:12:59,42 --> 0:13:0,76
literally, the Chelsea
neighborhood.


186
0:13:0,76 --> 0:13:4,5
I think it's like six city
blocks that we get free Wi-Fi.


187
0:13:4,5 --> 0:13:6,2
So if you're enjoying the free
Wi-Fi when you're out and


188
0:13:6,2 --> 0:13:9,33
about, that's from
Google here.


189
0:13:9,33 --> 0:13:11,72
It should say Google Wi-Fi,
or something like that.


190
0:13:11,72 --> 0:13:13,9
Almost everybody has access.


191
0:13:13,9 --> 0:13:15,73
Internal to the office
here, Google Guest.


192
0:13:15,73 --> 0:13:19,9
But we've done this, and it was
really important to us to


193
0:13:19,9 --> 0:13:21,66
do this around here,
to give the access.


194
0:13:21,66 --> 0:13:22,955
It just wasn't quite
ubiquitous.


195
0:13:22,955 --> 0:13:27,21



196
0:13:27,21 --> 0:13:30,84
In terms of other interesting
things about Google, I think I


197
0:13:30,84 --> 0:13:33,64
lost like 60 cholesterol points,
or something, when I


198
0:13:33,64 --> 0:13:35,1
joined Google.


199
0:13:35,1 --> 0:13:37,91
Previous companies didn't
take my health as


200
0:13:37,91 --> 0:13:40,26
seriously as Google.


201
0:13:40,26 --> 0:13:42,26
When I'm walking around the
office, I have lots of healthy


202
0:13:42,26 --> 0:13:44,17
choices of things to eat.


203
0:13:44,17 --> 0:13:47,3
I still have a lot more work
to do on that front.


204
0:13:47,3 --> 0:13:48,8
Some fun facts about New York.


205
0:13:48,8 --> 0:13:50,35
This is a fantastic city.


206
0:13:50,35 --> 0:13:54,9
If you have not had a chance to
explore, hopefully you've


207
0:13:54,9 --> 0:13:54,58
booked time.


208
0:13:54,58 --> 0:13:57,33
Whether you've lived here your
whole life, whether you just


209
0:13:57,33 --> 0:13:59,17
came in last night-- and
I heard some people


210
0:13:59,17 --> 0:14:0,47
flew in this morning--


211
0:14:0,47 --> 0:14:2,75
this is definitely
a great area.


212
0:14:2,75 --> 0:14:4,35
New York is rich in history.


213
0:14:4,35 --> 0:14:6,36
It has many different markets.


214
0:14:6,36 --> 0:14:7,65
This is the Chelsea
neighborhood.


215
0:14:7,65 --> 0:14:12,2
This was where a lot of the sort
of import-export into the


216
0:14:12,2 --> 0:14:13,3
city happened for a long time.


217
0:14:13,3 --> 0:14:14,37
That's why this building
was called the


218
0:14:14,37 --> 0:14:15,34
Port Authority building.


219
0:14:15,34 --> 0:14:18,56
It was attached to the port.


220
0:14:18,56 --> 0:14:21,3
Some of the fun facts you'll
find around the city.


221
0:14:21,3 --> 0:14:24,53
The Empire State Building,
is an amazing building.


222
0:14:24,53 --> 0:14:27,16
What's interesting about this is
this is the most expensive


223
0:14:27,16 --> 0:14:31,61
elevator ride I've ever
had in my life.


224
0:14:31,61 --> 0:14:33,5
I did not know an elevator could
cost that much, and it


225
0:14:33,5 --> 0:14:35,16
was only like 60 seconds.


226
0:14:35,16 --> 0:14:38,47
But if you get to the top, and
you're brave enough to walk to


227
0:14:38,47 --> 0:14:41,15
the edge, it's a very
interesting experience.


228
0:14:41,15 --> 0:14:45,59
Both the Empire State Building
and the Rockefeller Center


229
0:14:45,59 --> 0:14:47,84
have these spectacular views
from the top of the building.


230
0:14:47,84 --> 0:14:49,83
And you can see all around
the whole city.


231
0:14:49,83 --> 0:14:50,65
It's fantastic.


232
0:14:50,65 --> 0:14:54,61
The Empire State Building was
the world's tallest building


233
0:14:54,61 --> 0:14:56,67
for 40 years.


234
0:14:56,67 --> 0:14:59,39
And then everybody started to
figure out that if you put an


235
0:14:59,39 --> 0:15:0,57
antenna on your building,
you could


236
0:15:0,57 --> 0:15:1,58
get the tallest building.


237
0:15:1,58 --> 0:15:4,45
I don't know if that's sort
of cheating, or not.


238
0:15:4,45 --> 0:15:5,54
A little known fact.


239
0:15:5,54 --> 0:15:7,79
The Oreo cookie was
actually invented


240
0:15:7,79 --> 0:15:9,2
here in New York City.


241
0:15:9,2 --> 0:15:11,3
It was actually invented right
across the street in the


242
0:15:11,3 --> 0:15:12,55
Chelsea Market.


243
0:15:12,55 --> 0:15:15,46
And the ode to the Oreo cookie
is a small plaque that says


244
0:15:15,46 --> 0:15:17,5
the Oreo cookie was
invented here.


245
0:15:17,5 --> 0:15:20,84
So if you do get a chance to
walk across the street today


246
0:15:20,84 --> 0:15:22,42
or tomorrow, you can go
find out where the


247
0:15:22,42 --> 0:15:24,155
Oreo cookie was invented.


248
0:15:24,155 --> 0:15:26,25
It was invented here in 1912.


249
0:15:26,25 --> 0:15:28,31
And I guess they had a bunch
of cream and a bunch of


250
0:15:28,31 --> 0:15:29,6
biscuits, and they were
trying to figure out


251
0:15:29,6 --> 0:15:30,0
what to do with them.


252
0:15:30,0 --> 0:15:33,18
So they mashed them together,
and came up with this iconic


253
0:15:33,18 --> 0:15:35,19
cookie that pretty much, I
think, everybody around the


254
0:15:35,19 --> 0:15:37,96
world knows.


255
0:15:37,96 --> 0:15:43,89
With that, I'm going to hand
this off to Ari Shamash, who's


256
0:15:43,89 --> 0:15:46,76
going to kick us off
with the keynote.


257
0:15:46,76 --> 0:15:48,43
Immediately after the keynote,
we're going to go


258
0:15:48,43 --> 0:15:49,93
into the next talk.


259
0:15:49,93 --> 0:15:53,19
One of things I'm going to do
is between each talk, after


260
0:15:53,19 --> 0:15:56,9
the speaker is finished, I'm
going to come on stage.


261
0:15:56,9 --> 0:16:1,35
As time allows, we'll take the
questions from the Moderator


262
0:16:1,35 --> 0:16:3,62
that you saw there,
the link earlier.


263
0:16:3,62 --> 0:16:6,5
And I will sort of host
the questions.


264
0:16:6,5 --> 0:16:8,8
As we run out of time, we'll
just sort of move on.


265
0:16:8,8 --> 0:16:11,5
But the speakers, I believe, are
all very excited to talk


266
0:16:11,5 --> 0:16:12,14
to all of you.


267
0:16:12,14 --> 0:16:13,26
You can grab them at lunch.


268
0:16:13,26 --> 0:16:15,12
You can grab them at breaks.


269
0:16:15,12 --> 0:16:16,75
They'll generally be around.


270
0:16:16,75 --> 0:16:19,4
Most of them will be around
for the two days.


271
0:16:19,4 --> 0:16:21,8
Some will only be around for
the day that they're here.


272
0:16:21,8 --> 0:16:22,63
So if you do want to grab them,
make sure you try to


273
0:16:22,63 --> 0:16:24,83
grab them on the same
day that they speak.


274
0:16:24,83 --> 0:16:28,64
With that, I'd like to kick it
off, and hand it off to Ari.


275
0:16:28,64 --> 0:16:29,4
All right.


276
0:16:29,4 --> 0:16:30,35
Thank you.


277
0:16:30,35 --> 0:16:34,625
[APPLAUSE]


278
0:16:34,625 --> 0:16:38,33
ARI SHAMASH: Thanks very much,
Tony, for the introduction.


279
0:16:38,33 --> 0:16:40,66
We are four minutes
ahead of schedule.


280
0:16:40,66 --> 0:16:42,615
I am going to do my
best to fix that.


281
0:16:42,615 --> 0:16:46,9



282
0:16:46,9 --> 0:16:49,62
I want to welcome all of
you guys to New York,


283
0:16:49,62 --> 0:16:50,79
to Google New York.


284
0:16:50,79 --> 0:16:52,87
I am from the New York
office here.


285
0:16:52,87 --> 0:16:55,49
I'm part of the test engineering
organization,


286
0:16:55,49 --> 0:16:56,89
specifically with Ads.


287
0:16:56,89 --> 0:16:59,3
But before I get started, I
really want to give a shout


288
0:16:59,3 --> 0:17:1,32
out to our folks from Boston.


289
0:17:1,32 --> 0:17:4,52
Any of you from Boston?


290
0:17:4,52 --> 0:17:6,96
Our prayers and thoughts are
with you guys as you go


291
0:17:6,96 --> 0:17:7,42
through this.


292
0:17:7,42 --> 0:17:10,51
As the city, and me personally,
as the city that


293
0:17:10,51 --> 0:17:13,91
went through 9/11, we completely
understand the pain


294
0:17:13,91 --> 0:17:18,69
that everybody is going through,
and has to endure.


295
0:17:18,69 --> 0:17:18,92
We are right there with you.


296
0:17:18,92 --> 0:17:20,17
Our thoughts are with you.


297
0:17:20,17 --> 0:17:22,66



298
0:17:22,66 --> 0:17:25,31
I'd like to start by telling
you guys a story.


299
0:17:25,31 --> 0:17:26,369
I hope you'll bear with me.


300
0:17:26,369 --> 0:17:29,2
There's quite a few stories
in my presentation.


301
0:17:29,2 --> 0:17:32,69
My story starts in
the mid 1990s.


302
0:17:32,69 --> 0:17:35,58
Just to give you some context
about the mid 1990s, here's


303
0:17:35,58 --> 0:17:36,81
what they look like.


304
0:17:36,81 --> 0:17:39,49
Music was distributed
on disks.


305
0:17:39,49 --> 0:17:42,69
You literally had to carry
a pile of disks around.


306
0:17:42,69 --> 0:17:44,41
Wi-Fi didn't exist.


307
0:17:44,41 --> 0:17:46,51
If you wanted to connect
to the internet, you


308
0:17:46,51 --> 0:17:47,97
had to find a cable.


309
0:17:47,97 --> 0:17:49,69
If you were lucky, you found
one of those blue ones,


310
0:17:49,69 --> 0:17:51,42
because they might actually
give you reasonable


311
0:17:51,42 --> 0:17:52,1
connectivity.


312
0:17:52,1 --> 0:17:54,87
If you were unlucky, you had one
of those beasts over there


313
0:17:54,87 --> 0:17:58,4
called a modem that connected
you to the internet.


314
0:17:58,4 --> 0:17:59,83
You actually had to dial
up to the internet.


315
0:17:59,83 --> 0:18:3,59
You had to wait 45 seconds
before you had conductivity.


316
0:18:3,59 --> 0:18:6,42
If you were even luckier,
you had a cellphone.


317
0:18:6,42 --> 0:18:8,71
You might actually have to get
straps, and strap it onto your


318
0:18:8,71 --> 0:18:10,96
back, because that's what
that thing looked like.


319
0:18:10,96 --> 0:18:14,31
You had to carry it
around, right?


320
0:18:14,31 --> 0:18:15,49
That's what a laptop
looked like.


321
0:18:15,49 --> 0:18:18,33
They had tiny, little screens,
and they had these bricks.


322
0:18:18,33 --> 0:18:19,36
I guess they still have
bricks today.


323
0:18:19,36 --> 0:18:20,88
But they had tiny,
little screens.


324
0:18:20,88 --> 0:18:23,2
If you were lucky, they might
actually be color.


325
0:18:23,2 --> 0:18:26,83
Google, at the time, was just a
figment of imagination in a


326
0:18:26,83 --> 0:18:29,18
couple of grad students.


327
0:18:29,18 --> 0:18:32,27
Here is actually what they
looked like way back when.


328
0:18:32,27 --> 0:18:34,48
For me, I was a software
developer.


329
0:18:34,48 --> 0:18:36,88
I've been a software developer
my entire career.


330
0:18:36,88 --> 0:18:38,73
When I graduated from
school, software


331
0:18:38,73 --> 0:18:40,32
development was quite simple.


332
0:18:40,32 --> 0:18:42,94
You spent a couple of months
collecting requirements from


333
0:18:42,94 --> 0:18:43,97
your customer.


334
0:18:43,97 --> 0:18:46,59
You write them down
in books this big.


335
0:18:46,59 --> 0:18:50,27
Then you spend a couple more
months banging out software.


336
0:18:50,27 --> 0:18:52,11
Then you take all that software,
you take the


337
0:18:52,11 --> 0:18:54,73
requirements, you give it to
some other group, and that


338
0:18:54,73 --> 0:18:57,8
group then spends a few months
validating whether the


339
0:18:57,8 --> 0:19:1,13
software that you built matches
the requirements that


340
0:19:1,13 --> 0:19:3,24
were written, oh,
many months ago.


341
0:19:3,24 --> 0:19:5,63
The fact that something might
have actually changed in those


342
0:19:5,63 --> 0:19:7,99
few months is completely
irrelevant.


343
0:19:7,99 --> 0:19:9,47
You got the requirements.


344
0:19:9,47 --> 0:19:10,97
You built some software.


345
0:19:10,97 --> 0:19:12,1
And if it matches, it matches.


346
0:19:12,1 --> 0:19:14,34
If it doesn't match,
it doesn't match.


347
0:19:14,34 --> 0:19:17,84
We had a customer, financial
services, that wanted to build


348
0:19:17,84 --> 0:19:19,61
a web-based application--


349
0:19:19,61 --> 0:19:22,66
pretty advanced at the time--


350
0:19:22,66 --> 0:19:24,67
in order to take some
data that they had.


351
0:19:24,67 --> 0:19:27,78
Now, this particular company
invested about 100 years


352
0:19:27,78 --> 0:19:29,74
building up their intellectual
property.


353
0:19:29,74 --> 0:19:32,71
Much of it sat on 3"
by 5" index cards.


354
0:19:32,71 --> 0:19:35,32
So the project was to take data
off of 3" by 5" index


355
0:19:35,32 --> 0:19:37,53
cards, stick it onto a database,
and then distribute


356
0:19:37,53 --> 0:19:39,97
it to the world over the web.


357
0:19:39,97 --> 0:19:40,48
They were--


358
0:19:40,48 --> 0:19:42,69
I don't want to say risk averse,
because they were


359
0:19:42,69 --> 0:19:44,18
building an application
that was meant to be


360
0:19:44,18 --> 0:19:45,49
deployed on the web--


361
0:19:45,49 --> 0:19:48,4
but they didn't understand what
sort of application they


362
0:19:48,4 --> 0:19:49,66
wanted to build.


363
0:19:49,66 --> 0:19:51,475
We went up to them and asked
them, OK, what do


364
0:19:51,475 --> 0:19:52,76
you want us to build?


365
0:19:52,76 --> 0:19:53,82
We're happy to build
it for you.


366
0:19:53,82 --> 0:19:55,3
Tell us your requirements.


367
0:19:55,3 --> 0:19:57,78
They turned around and said,
we don't really know.


368
0:19:57,78 --> 0:20:1,15
So we had a project manager at
the time who said, maybe we


369
0:20:1,15 --> 0:20:4,18
should try this thing called
rapid iterations to try to


370
0:20:4,18 --> 0:20:6,5
help the customer understand.


371
0:20:6,5 --> 0:20:7,64
We asked him, what
you mean by that?


372
0:20:7,64 --> 0:20:9,66
What are rapid iterations?


373
0:20:9,66 --> 0:20:12,43
He said, well, let's build
the application.


374
0:20:12,43 --> 0:20:16,4
Let's do a build, and deploy to
some sort of QA, or a user


375
0:20:16,4 --> 0:20:19,18
acceptance environment,
on a weekly basis.


376
0:20:19,18 --> 0:20:22,2
We'll show it to the customer
on a weekly basis.


377
0:20:22,2 --> 0:20:24,77
The customer will tell us
whether they think it's


378
0:20:24,77 --> 0:20:27,4
reasonable or not reasonable,
and then we'll make


379
0:20:27,4 --> 0:20:29,1
adjustments along the way.


380
0:20:29,1 --> 0:20:31,89
This literally blew our minds.


381
0:20:31,89 --> 0:20:32,32
Right?


382
0:20:32,32 --> 0:20:33,33
What are you talking about?


383
0:20:33,33 --> 0:20:35,34
How is it that we're going
to possibly start writing


384
0:20:35,34 --> 0:20:38,77
software without volumes
of documentation?


385
0:20:38,77 --> 0:20:40,17
How are we going to do
quality assurance?


386
0:20:40,17 --> 0:20:42,93
How are we going to know that
we're doing the right thing?


387
0:20:42,93 --> 0:20:44,13
The guy said, don't
worry about it.


388
0:20:44,13 --> 0:20:46,4
Let's just try it, and we'll
see what happens.


389
0:20:46,4 --> 0:20:48,61
All of us thought this was
a pretty neat idea.


390
0:20:48,61 --> 0:20:50,52
So we decided to go for it.


391
0:20:50,52 --> 0:20:53,53
We decided that Thursday night
would be build night.


392
0:20:53,53 --> 0:20:55,68
Nobody leaves the office
until the build is


393
0:20:55,68 --> 0:20:58,0
done on Thursday night.


394
0:20:58,0 --> 0:21:1,83
Friday morning, QA group
comes in, validates it.


395
0:21:1,83 --> 0:21:3,84
Monday, we show it
to the customer.


396
0:21:3,84 --> 0:21:6,4
Customer tells us we're on
the right track, or not.


397
0:21:6,4 --> 0:21:7,57
Repeat.


398
0:21:7,57 --> 0:21:9,34
Sounded pretty easy, right?


399
0:21:9,34 --> 0:21:10,4
So we started.


400
0:21:10,4 --> 0:21:12,15
We banged some code
out for a week.


401
0:21:12,15 --> 0:21:14,43
We get there on Thursday
afternoon.


402
0:21:14,43 --> 0:21:16,2
4:00 or 5:00 o'clock, he
said, OK, let's just


403
0:21:16,2 --> 0:21:17,7
start doing a build.


404
0:21:17,7 --> 0:21:18,38
Let's see what happens.


405
0:21:18,38 --> 0:21:20,84
To make a long story short,
we were there until Friday


406
0:21:20,84 --> 0:21:23,79
morning trying to get the
environment working.


407
0:21:23,79 --> 0:21:26,19
It was a long night.


408
0:21:26,19 --> 0:21:28,73
It took us a couple hours just
to get the code to compile.


409
0:21:28,73 --> 0:21:31,32
It was the first time we
actually built the thing.


410
0:21:31,32 --> 0:21:33,56
Then it took us a couple more
hours to get it working in the


411
0:21:33,56 --> 0:21:35,51
environment.


412
0:21:35,51 --> 0:21:38,71
The environment that we wanted
to deploy into didn't match


413
0:21:38,71 --> 0:21:40,76
the environment that we were
developing against.


414
0:21:40,76 --> 0:21:42,89
All sorts of crazy stuff.


415
0:21:42,89 --> 0:21:44,8
Finally, Friday we sleep.


416
0:21:44,8 --> 0:21:46,15
Monday, we show it
to the customer.


417
0:21:46,15 --> 0:21:46,96
The customer was happy.


418
0:21:46,96 --> 0:21:49,6
All the application did
was log in, log out.


419
0:21:49,6 --> 0:21:51,15
How much could we actually
get done in a week?


420
0:21:51,15 --> 0:21:52,71
The customer was
able to log in.


421
0:21:52,71 --> 0:21:53,95
The customer was able
to log out.


422
0:21:53,95 --> 0:21:54,53
Thumbs up.


423
0:21:54,53 --> 0:21:56,21
We're all good to go.


424
0:21:56,21 --> 0:21:57,96
Right?


425
0:21:57,96 --> 0:22:0,12
The second Monday morning, we,
as an engineering group, got


426
0:22:0,12 --> 0:22:2,3
together and said, look, if
we're going to go through this


427
0:22:2,3 --> 0:22:5,3
every single week, we're never
going to get done.


428
0:22:5,3 --> 0:22:6,96
Actually, the main motivation
is that we all wanted to go


429
0:22:6,96 --> 0:22:7,79
out on Thursday nights.


430
0:22:7,79 --> 0:22:10,7
Like, we had lives, and this
thing was getting in the way


431
0:22:10,7 --> 0:22:12,29
of our lives.


432
0:22:12,29 --> 0:22:13,58
We wanted to go out
Thursday night.


433
0:22:13,58 --> 0:22:15,99
What are we going to do to make
sure that this week is


434
0:22:15,99 --> 0:22:18,26
not going to be a disaster?


435
0:22:18,26 --> 0:22:22,54
We thought, OK, maybe we do
a trial run on Wednesday.


436
0:22:22,54 --> 0:22:24,32
We did a trial run
on Wednesday.


437
0:22:24,32 --> 0:22:25,65
We didn't go out on
Wednesday night.


438
0:22:25,65 --> 0:22:27,97
We were there until midnight
getting the thing to run.


439
0:22:27,97 --> 0:22:30,11
But Thursday night we
had a good time.


440
0:22:30,11 --> 0:22:30,87
Wasn't so bad.


441
0:22:30,87 --> 0:22:33,74
We only had to clean up the mess
that we made on Thursday


442
0:22:33,74 --> 0:22:36,4
rather than cleaning up a
week's worth of mess.


443
0:22:36,4 --> 0:22:37,88
So you can see where this
is going, right?


444
0:22:37,88 --> 0:22:41,16
All of you guys understand
what software development


445
0:22:41,16 --> 0:22:42,22
looks like today.


446
0:22:42,22 --> 0:22:45,33
Rapid iterations, continuous
builds, all that good stuff.


447
0:22:45,33 --> 0:22:50,18
But at the time, it really felt
like we were pioneers in


448
0:22:50,18 --> 0:22:52,34
a brand new industry.


449
0:22:52,34 --> 0:22:53,78
We ended up--


450
0:22:53,78 --> 0:22:57,51
and you guys see the end story
behind all of this--


451
0:22:57,51 --> 0:22:59,92
we ended up launching
the product.


452
0:22:59,92 --> 0:23:3,25
Amazingly, the product is
still there are today.


453
0:23:3,25 --> 0:23:6,12
Hopefully, all the code that I
wrote is long gone, four or


454
0:23:6,12 --> 0:23:6,82
five times over.


455
0:23:6,82 --> 0:23:9,89
That's what it's going to take
to weed the thing out.


456
0:23:9,89 --> 0:23:11,44
But the product is still
there today.


457
0:23:11,44 --> 0:23:13,72
The customer's extremely
happy.


458
0:23:13,72 --> 0:23:17,43
But as importantly, by the end
of the project, we ended up


459
0:23:17,43 --> 0:23:20,62
with an extremely high
development velocity.


460
0:23:20,62 --> 0:23:23,69
From a test perspective, because
we ended up automating


461
0:23:23,69 --> 0:23:25,66
the tests, we ended up
automating the builds.


462
0:23:25,66 --> 0:23:29,64
We ended up automating the
environment creation that was


463
0:23:29,64 --> 0:23:32,42
necessary to deploy our code.


464
0:23:32,42 --> 0:23:35,83
We ended up with an extremely
high development velocity.


465
0:23:35,83 --> 0:23:38,3
At the end, the only quality we
had to worry about was for


466
0:23:38,3 --> 0:23:40,86
the features that we developed
in that particular cycle,


467
0:23:40,86 --> 0:23:44,23
because all of our regression
made sure that we didn't break


468
0:23:44,23 --> 0:23:46,7
anything in the past.


469
0:23:46,7 --> 0:23:47,92
And we also ended up with a
whole bunch of artifacts.


470
0:23:47,92 --> 0:23:50,21
Lots of small tests, a
collection of medium-sized


471
0:23:50,21 --> 0:23:54,82
tests, a handful of manual large
tests that we had to


472
0:23:54,82 --> 0:23:57,19
run, because browser automation
this early


473
0:23:57,19 --> 0:23:59,92
environment virtualization
didn't exist at the time to


474
0:23:59,92 --> 0:24:1,71
enable us to automate
browsers.


475
0:24:1,71 --> 0:24:3,25
But we learned a couple
of things.


476
0:24:3,25 --> 0:24:8,97
First of all, making testing
easy so we, as developers,


477
0:24:8,97 --> 0:24:11,86
could do it was really, really,
really important.


478
0:24:11,86 --> 0:24:13,94
Because then we can build a
feature, write a test for it,


479
0:24:13,94 --> 0:24:15,5
and be done.


480
0:24:15,5 --> 0:24:17,1
We didn't have to wait for
somebody to come along at a


481
0:24:17,1 --> 0:24:19,23
later time to test it for us.


482
0:24:19,23 --> 0:24:22,82
Also what we learned is if you
hold us developers accountable


483
0:24:22,82 --> 0:24:25,91
for the pain associated with
building, deploying, and


484
0:24:25,91 --> 0:24:29,5
testing, we would do the right
thing from the beginning


485
0:24:29,5 --> 0:24:31,25
rather than waiting for somebody
else to come and


486
0:24:31,25 --> 0:24:34,0
clean up our mess.


487
0:24:34,0 --> 0:24:39,18
Fortunately, all the stuff that
we built for this were


488
0:24:39,18 --> 0:24:41,2
skunkworks, shell scripts,
and stuff like that.


489
0:24:41,2 --> 0:24:43,85
All of the artifacts
are long gone.


490
0:24:43,85 --> 0:24:45,58
The artifacts that we built
were unique for that


491
0:24:45,58 --> 0:24:46,76
particular environment.


492
0:24:46,76 --> 0:24:48,42
There was only really
one kind of browser


493
0:24:48,42 --> 0:24:49,82
available at the time.


494
0:24:49,82 --> 0:24:51,69
Really, one kind of operating
system that this


495
0:24:51,69 --> 0:24:52,7
was deployed onto.


496
0:24:52,7 --> 0:24:56,6
So the artifacts that we
built weren't really


497
0:24:56,6 --> 0:24:57,94
useful in the long term.


498
0:24:57,94 --> 0:24:59,81
They were useful for that
particular project.


499
0:24:59,81 --> 0:25:4,1
But the thought process that
went into my mind, something


500
0:25:4,1 --> 0:25:5,12
clicked, right?


501
0:25:5,12 --> 0:25:7,8
Just like it clicked with
many of you guys.


502
0:25:7,8 --> 0:25:8,75
This is the right way
to develop software.


503
0:25:8,75 --> 0:25:12,5



504
0:25:12,5 --> 0:25:15,19
So we really felt like we were
pioneers at the time.


505
0:25:15,19 --> 0:25:18,59
And it's a feeling that I think
I share with many of you


506
0:25:18,59 --> 0:25:20,46
guys that are here
in the audience.


507
0:25:20,46 --> 0:25:22,75
And many of you guys that are
watching this presentation.


508
0:25:22,75 --> 0:25:26,48
We're at the cusp, all of us,
we're at the cusp of something


509
0:25:26,48 --> 0:25:28,1
that was pretty cool.


510
0:25:28,1 --> 0:25:29,39
The industry changed.


511
0:25:29,39 --> 0:25:32,33
A whole new discipline within
computer science evolved.


512
0:25:32,33 --> 0:25:35,94
Something that we, within
Google, call test engineering,


513
0:25:35,94 --> 0:25:37,38
and it proliferated.


514
0:25:37,38 --> 0:25:39,49
It really proliferated over
the last 15 years.


515
0:25:39,49 --> 0:25:41,6
I wasn't the only one.


516
0:25:41,6 --> 0:25:43,57
I wasn't the only one.


517
0:25:43,57 --> 0:25:46,51
Many of you guys went through
the same exact evolution at


518
0:25:46,51 --> 0:25:48,17
the same time.


519
0:25:48,17 --> 0:25:52,2
Luckily for me, and for all of
us, many of you also built


520
0:25:52,2 --> 0:25:55,52
artifacts that could be reused
by other projects.


521
0:25:55,52 --> 0:25:58,91
Think of all the technologies
that exist today that we have


522
0:25:58,91 --> 0:26:2,68
available to us to make all
of this stuff work.


523
0:26:2,68 --> 0:26:4,39
Continuous build engine.


524
0:26:4,39 --> 0:26:5,9
Unit test frameworks.


525
0:26:5,9 --> 0:26:7,86
All sorts of desktop and
browser automation


526
0:26:7,86 --> 0:26:9,4
technologies.


527
0:26:9,4 --> 0:26:12,27
Virtualization, which enables
us to build really cheap


528
0:26:12,27 --> 0:26:15,11
environments, and have those
environments be--


529
0:26:15,11 --> 0:26:16,98
you can bring up an instantiate
environment.


530
0:26:16,98 --> 0:26:17,93
You can instantiate
an environment.


531
0:26:17,93 --> 0:26:19,31
You can hydrate it with data.


532
0:26:19,31 --> 0:26:22,19
You can run some tests against
it, then you can destroy that


533
0:26:22,19 --> 0:26:25,93
environment at a relatively
low cost.


534
0:26:25,93 --> 0:26:28,7
Think about all the different
processes that are available


535
0:26:28,7 --> 0:26:28,54
to us today.


536
0:26:28,54 --> 0:26:29,44
Best practices.


537
0:26:29,44 --> 0:26:31,24
Agile.


538
0:26:31,24 --> 0:26:33,93
Dogfooding, something that we do
extensively within Google.


539
0:26:33,93 --> 0:26:38,655
We have the opportunity today to
take an application, deploy


540
0:26:38,655 --> 0:26:41,44
it to production, and make that
new version available to


541
0:26:41,44 --> 0:26:42,85
a small subset of
our audience.


542
0:26:42,85 --> 0:26:44,48
Maybe trusted users.


543
0:26:44,48 --> 0:26:45,97
Maybe 1%.


544
0:26:45,97 --> 0:26:48,48
Maybe only users that are
internal to your company that


545
0:26:48,48 --> 0:26:51,9
can tolerate issues.


546
0:26:51,9 --> 0:26:53,96
Within Google, we call
that dogfooding.


547
0:26:53,96 --> 0:26:55,93
We open up our application, at
least new features in the


548
0:26:55,93 --> 0:26:59,2
application, to a subset of our
audience before we turn


549
0:26:59,2 --> 0:27:2,58
around and expose it to the
to the external world.


550
0:27:2,58 --> 0:27:5,21
That way, if there are issues,
we know about them.


551
0:27:5,21 --> 0:27:7,42
And we expose them only
to a limited audience.


552
0:27:7,42 --> 0:27:9,47
There are also all sorts
of knowledge


553
0:27:9,47 --> 0:27:10,89
and information sharing.


554
0:27:10,89 --> 0:27:14,32
All of you guys are here at
this conference to learn.


555
0:27:14,32 --> 0:27:16,98
The conferences exist about
this particular topic.


556
0:27:16,98 --> 0:27:17,81
That's great.


557
0:27:17,81 --> 0:27:18,96
This is not the only
conference.


558
0:27:18,96 --> 0:27:20,12
There is lots of them.


559
0:27:20,12 --> 0:27:23,31
Lots of mechanisms for
information sharing today.


560
0:27:23,31 --> 0:27:28,0
Books, videos, all sorts
of other things.


561
0:27:28,0 --> 0:27:29,52
Industry.


562
0:27:29,52 --> 0:27:33,65
Many companies like Google, many
of your companies, have


563
0:27:33,65 --> 0:27:37,79
dedicated organizations that
focus on test engineering, and


564
0:27:37,79 --> 0:27:41,6
also focus on moving that
industry forward.


565
0:27:41,6 --> 0:27:45,44
But probably something that I'm
most proud of, and we're


566
0:27:45,44 --> 0:27:48,24
going to hear from some of these
folks today, there's


567
0:27:48,24 --> 0:27:54,22
also an entire realm within
academia that's focused on


568
0:27:54,22 --> 0:27:55,17
test engineering today.


569
0:27:55,17 --> 0:28:0,39
So not only are we, as members
of the industry, focusing on


570
0:28:0,39 --> 0:28:3,73
this particular topic, there's
now a fountain of information,


571
0:28:3,73 --> 0:28:7,99
a fountain of research, a
fountain of students, that are


572
0:28:7,99 --> 0:28:10,83
coming out of universities
having worked on test


573
0:28:10,83 --> 0:28:12,54
engineering full time.


574
0:28:12,54 --> 0:28:16,8
And we've invited several
members of the academia to


575
0:28:16,8 --> 0:28:19,24
come and talk at GTAC this year
to help us understand the


576
0:28:19,24 --> 0:28:22,31
kind of research, the kind of
groundbreaking research that's


577
0:28:22,31 --> 0:28:26,89
happening in universities and
other institutions like that,


578
0:28:26,89 --> 0:28:29,46
that enable the next generation,
the next wave of


579
0:28:29,46 --> 0:28:35,14
information, the next wave of
test engineering to happen.


580
0:28:35,14 --> 0:28:39,38
So just like I felt like a
pioneer many, many years ago,


581
0:28:39,38 --> 0:28:42,84
oh, so last century, right?


582
0:28:42,84 --> 0:28:44,17
We've evolved.


583
0:28:44,17 --> 0:28:46,22
Many of you guys have felt
the same exact thing.


584
0:28:46,22 --> 0:28:48,14
Many of you guys were
at the forefront of


585
0:28:48,14 --> 0:28:49,32
this particular industry.


586
0:28:49,32 --> 0:28:52,58
We've evolved as an industry.


587
0:28:52,58 --> 0:28:54,8
I thank myself that all the
tools that I created for that


588
0:28:54,8 --> 0:28:56,66
particular project
are long gone.


589
0:28:56,66 --> 0:29:0,15
If we had to deal with only the
tools that we built for


590
0:29:0,15 --> 0:29:2,65
that particular project, we'd
never be here today.


591
0:29:2,65 --> 0:29:5,84
So I want to thank the many of
you that also participated in


592
0:29:5,84 --> 0:29:7,75
this particular industry to take
the knowledge, to take


593
0:29:7,75 --> 0:29:9,77
the learnings and
build the tools.


594
0:29:9,77 --> 0:29:11,34
We've really evolved.


595
0:29:11,34 --> 0:29:15,97
We've gone from pioneers to a
well-defined industry that


596
0:29:15,97 --> 0:29:17,73
we're all proud to be
members of today.


597
0:29:17,73 --> 0:29:21,89



598
0:29:21,89 --> 0:29:25,31
So GTAC is a little bit
about sharing as well.


599
0:29:25,31 --> 0:29:28,55
What I'd like to do is share
about how Google goes about


600
0:29:28,55 --> 0:29:30,67
doing test engineering.


601
0:29:30,67 --> 0:29:32,52
We're also going to hear--
there's several talks,


602
0:29:32,52 --> 0:29:35,54
including the one immediately
after mine where you guys get


603
0:29:35,54 --> 0:29:37,72
the opportunity to share about
what test engineering looks


604
0:29:37,72 --> 0:29:39,46
like about your particular
companies.


605
0:29:39,46 --> 0:29:41,79
I'd love to hear that,
but I'll go first.


606
0:29:41,79 --> 0:29:44,95
I'll share what Google is doing
about test engineering,


607
0:29:44,95 --> 0:29:48,13
some of the best practices that
we have in place today,


608
0:29:48,13 --> 0:29:50,35
and some of the challenges that
we face today that I'd


609
0:29:50,35 --> 0:29:51,6
love to see solved.


610
0:29:51,6 --> 0:29:54,2



611
0:29:54,2 --> 0:29:55,69
First, a little bit of
background about what Google


612
0:29:55,69 --> 0:29:57,93
looks like as a company.


613
0:29:57,93 --> 0:29:59,61
Google speed, Google scale--


614
0:29:59,61 --> 0:30:2,45
we have roughly 15,000 engineers
in roughly 40


615
0:30:2,45 --> 0:30:6,41
different offices around the
world at any given time, so


616
0:30:6,41 --> 0:30:9,72
about 5,000 projects under
active development.


617
0:30:9,72 --> 0:30:13,16
We have a single monolithic
source code tree with all


618
0:30:13,16 --> 0:30:17,53
sorts of mixed language, mixed
code, mixed stuff.


619
0:30:17,53 --> 0:30:21,51
100 million lines of code,
roughly 50% of which-- roughly


620
0:30:21,51 --> 0:30:24,22
half of it changes on
a monthly basis.


621
0:30:24,22 --> 0:30:25,28
So it's very active great.


622
0:30:25,28 --> 0:30:26,85
We spent a lot of time actually


623
0:30:26,85 --> 0:30:29,53
curating the source code.


624
0:30:29,53 --> 0:30:31,19
We do a lot of deletes
within Google.


625
0:30:31,19 --> 0:30:33,23
We don't let things rot.


626
0:30:33,23 --> 0:30:35,49
Development happens
at one branch.


627
0:30:35,49 --> 0:30:38,42
There's head, and
there's head.


628
0:30:38,42 --> 0:30:39,1
That's it.


629
0:30:39,1 --> 0:30:40,34
That's all we got.


630
0:30:40,34 --> 0:30:43,4
All submissions are
done at head.


631
0:30:43,4 --> 0:30:44,7
All releases are done at head.


632
0:30:44,7 --> 0:30:46,4
All builds are done at head.


633
0:30:46,4 --> 0:30:47,5
All tests are run at head.


634
0:30:47,5 --> 0:30:50,2
Everything runs at head.


635
0:30:50,2 --> 0:30:53,18
As a result, one of the benefits
is that we don't have


636
0:30:53,18 --> 0:30:55,58
to support 1,000 different
versions of libraries for


637
0:30:55,58 --> 0:30:56,54
different applications.


638
0:30:56,54 --> 0:30:58,54
Everything runs at head.


639
0:30:58,54 --> 0:31:0,68
And I'll talk about the
consequences of that in a


640
0:31:0,68 --> 0:31:1,73
little while.


641
0:31:1,73 --> 0:31:3,66
All the builds are
done from source.


642
0:31:3,66 --> 0:31:6,16
We actually do not pull
in any binary


643
0:31:6,16 --> 0:31:7,31
artifacts into our binaries.


644
0:31:7,31 --> 0:31:10,75
Every single build, straight
to the source.


645
0:31:10,75 --> 0:31:13,15
So even a small build-- actually
in my first day at


646
0:31:13,15 --> 0:31:16,55
Google, or first week at Google,
I built a simple web


647
0:31:16,55 --> 0:31:18,44
server that just responded
through to a request.


648
0:31:18,44 --> 0:31:19,12
I built the thing.


649
0:31:19,12 --> 0:31:20,86
I was expecting the
thing to build--


650
0:31:20,86 --> 0:31:24,44
have a couple of data files, a
couple of .class files done.


651
0:31:24,44 --> 0:31:28,4
Next thing I know, there's
100,000 files that go into


652
0:31:28,4 --> 0:31:29,98
building this thing.


653
0:31:29,98 --> 0:31:33,32
So even the smallest build, as
a result of me building that


654
0:31:33,32 --> 0:31:33,46
web server--


655
0:31:33,46 --> 0:31:35,28
I just want to give a little
bit of context to that.


656
0:31:35,28 --> 0:31:36,98
I picked up advanced
monitoring.


657
0:31:36,98 --> 0:31:38,67
I picked up advanced
instrumentation.


658
0:31:38,67 --> 0:31:40,34
I picked up advancement
metrics.


659
0:31:40,34 --> 0:31:42,97
A lot of infrastructure that
went into that little web


660
0:31:42,97 --> 0:31:46,87
server just to respond to a
simple request, but that means


661
0:31:46,87 --> 0:31:50,13
that even the smallest builds
can have roughly 100,000


662
0:31:50,13 --> 0:31:52,116
artifacts associated
with them.


663
0:31:52,116 --> 0:31:54,97
It's pretty complicated.


664
0:31:54,97 --> 0:31:57,7
On a given day, we have about
5,500 submissions to the


665
0:31:57,7 --> 0:32:0,88
source code repository,
roughly averaged out.


666
0:32:0,88 --> 0:32:7,42
That's roughly 20 per second,
if we were doing at average


667
0:32:7,42 --> 0:32:9,89
development across a 24-hour
period, which we're not.


668
0:32:9,89 --> 0:32:13,23
So at peak, which roughly
corresponds to about three


669
0:32:13,23 --> 0:32:15,98
minutes before people
go home, we have 60


670
0:32:15,98 --> 0:32:18,48
plus submits per second--


671
0:32:18,48 --> 0:32:20,69
per minute, roughly
one per second.


672
0:32:20,69 --> 0:32:22,43
That translates to about
100 million test


673
0:32:22,43 --> 0:32:25,34
cases run per day.


674
0:32:25,34 --> 0:32:26,57
So that's what Google
looks like.


675
0:32:26,57 --> 0:32:27,96
So I'd like to spend a couple of
minutes talking about what


676
0:32:27,96 --> 0:32:29,28
test engineering at
Google looks like.


677
0:32:29,28 --> 0:32:30,8
There's really two
parts to that.


678
0:32:30,8 --> 0:32:33,38
There are the tools and the
people, but first a little bit


679
0:32:33,38 --> 0:32:34,73
of context.


680
0:32:34,73 --> 0:32:36,99
Google's focus is really
about engineering


681
0:32:36,99 --> 0:32:38,6
productivity as a whole.


682
0:32:38,6 --> 0:32:42,55
The test engineering group or
the discipline is part of this


683
0:32:42,55 --> 0:32:43,29
greater discipline.


684
0:32:43,29 --> 0:32:45,92
So as part of engineering
productivity, we focus on


685
0:32:45,92 --> 0:32:47,3
three things--


686
0:32:47,3 --> 0:32:50,6
developer infrastructure, which
is really about building


687
0:32:50,6 --> 0:32:53,535
tools that every single
developer within Google uses.


688
0:32:53,535 --> 0:32:56,64
It's about test engineering,
which primarily focuses on


689
0:32:56,64 --> 0:32:59,91
test automation, but also is
involved in lots of different


690
0:32:59,91 --> 0:33:2,15
areas, and I'll show you
examples along the way--


691
0:33:2,15 --> 0:33:4,83
and also release engineering,
which focuses on building


692
0:33:4,83 --> 0:33:7,14
tools and optimized
processes--


693
0:33:7,14 --> 0:33:8,26
repeatable processes--


694
0:33:8,26 --> 0:33:9,55
for getting information
out the door.


695
0:33:9,55 --> 0:33:10,81
But our mission is
pretty simple.


696
0:33:10,81 --> 0:33:13,75
We want to develop it, build it,
test it, release it, and


697
0:33:13,75 --> 0:33:14,75
measure it--


698
0:33:14,75 --> 0:33:16,44
better, faster, stronger.


699
0:33:16,44 --> 0:33:21,22
Throw in all your favorites
superlatives there.


700
0:33:21,22 --> 0:33:24,75
So first let me start with
the build system itself.


701
0:33:24,75 --> 0:33:26,52
The longer, the better--


702
0:33:26,52 --> 0:33:29,21
that's kind of a bad thing if
you look at things from a


703
0:33:29,21 --> 0:33:30,65
developer productivity.


704
0:33:30,65 --> 0:33:32,84
We want to avoid
this scenario.


705
0:33:32,84 --> 0:33:34,86
So Google's build system is
really optimized for a whole


706
0:33:34,86 --> 0:33:36,865
bunch of different things, but
primarily performance.


707
0:33:36,865 --> 0:33:39,82



708
0:33:39,82 --> 0:33:43,55
So what we do for performance
is parallelize as much as we


709
0:33:43,55 --> 0:33:45,34
can all the builds.


710
0:33:45,34 --> 0:33:47,1
First thing we do when somebody
does a build is


711
0:33:47,1 --> 0:33:49,71
analyze all the dependencies,
what can run in parallel.


712
0:33:49,71 --> 0:33:53,38
Then we send those requests off
to our cloud, which has


713
0:33:53,38 --> 0:33:56,42
not thousands and thousands and
thousands of machines just


714
0:33:56,42 --> 0:34:0,8
standing by waiting to receive
orders to build information--


715
0:34:0,8 --> 0:34:1,78
massive performance.


716
0:34:1,78 --> 0:34:6,34
We can get to roughly 60 files,
we average about 57


717
0:34:6,34 --> 0:34:8,98
actions every second
on a 24-hour


718
0:34:8,98 --> 0:34:12,52
basis through our cloud.


719
0:34:12,52 --> 0:34:14,71
We also optimize for
correctness.


720
0:34:14,71 --> 0:34:17,33
Make clean is a bug.


721
0:34:17,33 --> 0:34:18,65
You should never have
to make clean.


722
0:34:18,65 --> 0:34:20,69
If you have to make clean,
there's a bug


723
0:34:20,69 --> 0:34:21,81
in the build system.


724
0:34:21,81 --> 0:34:23,0
There's something that's
not defined.


725
0:34:23,0 --> 0:34:24,8
There's something that's
not declared.


726
0:34:24,8 --> 0:34:26,61
There's something that's
incorrect.


727
0:34:26,61 --> 0:34:30,159
Our build system imposes that
correctness on on everything


728
0:34:30,159 --> 0:34:31,429
that we do.


729
0:34:31,429 --> 0:34:33,44
Incrementality also fits in.


730
0:34:33,44 --> 0:34:35,889
We want to do the least
amount of work.


731
0:34:35,889 --> 0:34:37,239
That has two consequences.


732
0:34:37,239 --> 0:34:39,61
First, we want to figure out the
least amount of work that


733
0:34:39,61 --> 0:34:42,12
needs to be done for that
particular developer.


734
0:34:42,12 --> 0:34:44,0
That's pretty well understood,
and all the build systems


735
0:34:44,0 --> 0:34:45,44
around the industry do that.


736
0:34:45,44 --> 0:34:49,11
But we also want to make sure
that across Google as an


737
0:34:49,11 --> 0:34:52,15
enterprise, we do the least
amount of work.


738
0:34:52,15 --> 0:34:55,1
That means if my colleagues over
in the other side of the


739
0:34:55,1 --> 0:34:56,86
world-- let's say
Mountain View--


740
0:34:56,86 --> 0:34:59,77
have done a built at a
particular revision.


741
0:34:59,77 --> 0:35:3,14
And I then do a build of that
same revision, and the same


742
0:35:3,14 --> 0:35:5,65
file, same target here
in New York.


743
0:35:5,65 --> 0:35:9,72
I should not have to repeat
the compilation.


744
0:35:9,72 --> 0:35:10,68
They built it.


745
0:35:10,68 --> 0:35:12,39
I should be able to reuse it.


746
0:35:12,39 --> 0:35:16,37
So our cloud actually caches the
output of all the builds,


747
0:35:16,37 --> 0:35:19,69
and I benefit from somebody
else's build of the same


748
0:35:19,69 --> 0:35:22,47
target at that same revision.


749
0:35:22,47 --> 0:35:24,75
We also want to simplify use
by developers, so our build


750
0:35:24,75 --> 0:35:26,51
system is multi-functional.


751
0:35:26,51 --> 0:35:27,9
I can build a file.


752
0:35:27,9 --> 0:35:29,98
I can run that particular
target.


753
0:35:29,98 --> 0:35:31,72
I can test that target.


754
0:35:31,72 --> 0:35:34,92
I can run source code coverage
for that particular target.


755
0:35:34,92 --> 0:35:37,49
And then I can do a dependency
analysis on that particular


756
0:35:37,49 --> 0:35:40,85
target, all using the same
commands, just by changing


757
0:35:40,85 --> 0:35:43,13
arguments-- the same
basic command.


758
0:35:43,13 --> 0:35:45,47
I don't have to go and
do crazy things.


759
0:35:45,47 --> 0:35:47,84
The same applies for
multi-language.


760
0:35:47,84 --> 0:35:50,65
I, as a builder, don't have to
know whether it's a Java


761
0:35:50,65 --> 0:35:53,46
target, a Python target, a shell
target, a C++ target, a


762
0:35:53,46 --> 0:35:55,53
JavaScript target.


763
0:35:55,53 --> 0:35:58,3
I want to just run the test
against it, I run that target


764
0:35:58,3 --> 0:35:59,98
and I run the tests
against it--


765
0:35:59,98 --> 0:36:3,1
pretty simple, pretty
powerful.


766
0:36:3,1 --> 0:36:6,48
There's lots of talks, and I've
provided these URLs that


767
0:36:6,48 --> 0:36:8,34
go into a lot more detail
about our build system.


768
0:36:8,34 --> 0:36:11,66
Feel free to go check
them out.


769
0:36:11,66 --> 0:36:14,49
Some performance numbers about
our build system--


770
0:36:14,49 --> 0:36:16,56
this talks about
incrementality.


771
0:36:16,56 --> 0:36:20,3
About 90% of our builds run
less than 20 seconds.


772
0:36:20,3 --> 0:36:23,43
It's only when you get in the
90th percentile and higher do


773
0:36:23,43 --> 0:36:25,9
our builds take a lot longer
than that, because the caching


774
0:36:25,9 --> 0:36:26,71
doesn't kick in.


775
0:36:26,71 --> 0:36:27,96
You're building something
from scratch


776
0:36:27,96 --> 0:36:30,92
that nobody else built.


777
0:36:30,92 --> 0:36:32,31
Our cache--


778
0:36:32,31 --> 0:36:36,97
anywhere from 89% to 98%
effective, depending on what


779
0:36:36,97 --> 0:36:38,44
you want to do.


780
0:36:38,44 --> 0:36:40,92
There are actually two levels
of caches, one on my local


781
0:36:40,92 --> 0:36:41,51
workstation--


782
0:36:41,51 --> 0:36:45,38
so if I run two builds in a row,
my second build leverages


783
0:36:45,38 --> 0:36:45,99
the first build.


784
0:36:45,99 --> 0:36:48,75
I don't have to go back to the
cloud to download all that


785
0:36:48,75 --> 0:36:49,62
information.


786
0:36:49,62 --> 0:36:52,19
But let's say the first time
around, I run my build.


787
0:36:52,19 --> 0:36:55,15
89% of the time, I will be
leveraging off of somebody


788
0:36:55,15 --> 0:36:56,47
else's build.


789
0:36:56,47 --> 0:36:59,9
The great part-- and I'll talk
about the continuous build


790
0:36:59,9 --> 0:37:1,28
engine-- our continuous engine
is sitting there building


791
0:37:1,28 --> 0:37:3,65
stuff at every single change.


792
0:37:3,65 --> 0:37:6,4
I as an individual developer
can take advantage of the


793
0:37:6,4 --> 0:37:8,88
cache that's been primed by our
continuous build system.


794
0:37:8,88 --> 0:37:12,2



795
0:37:12,2 --> 0:37:15,12
Build performance over time
has also decreased, even


796
0:37:15,12 --> 0:37:17,24
though the amount of code we've
typically have to build


797
0:37:17,24 --> 0:37:18,41
has increased.


798
0:37:18,41 --> 0:37:21,21
This is a direct result
of test engineering--


799
0:37:21,21 --> 0:37:22,83
or just straight up
engineering--


800
0:37:22,83 --> 0:37:25,37
against the build system to make
it more efficient, better


801
0:37:25,37 --> 0:37:27,61
analysis of dependencies,
better analysis of


802
0:37:27,61 --> 0:37:31,33
parallelization, but also just
plain old faster computers


803
0:37:31,33 --> 0:37:34,62
that we can run our
builds against.


804
0:37:34,62 --> 0:37:37,14
We talk a little bit about
test execution.


805
0:37:37,14 --> 0:37:40,69
Just like builds, tests also
happen in extreme parallel.


806
0:37:40,69 --> 0:37:43,67
So if a particular test suite
has four test cases-- as this


807
0:37:43,67 --> 0:37:45,23
one does, this example does--


808
0:37:45,23 --> 0:37:47,19
we'll run all four of
them in parallel.


809
0:37:47,19 --> 0:37:51,36
More so, we'll actually start
the execution of tests as soon


810
0:37:51,36 --> 0:37:53,88
as the build for that particular
test is done.


811
0:37:53,88 --> 0:37:56,2
So if test one, test two, test
three, and test four need to


812
0:37:56,2 --> 0:37:58,58
be built, if test four--


813
0:37:58,58 --> 0:38:1,85
the build for test four gets
done first, the execution for


814
0:38:1,85 --> 0:38:4,18
test four will start first.


815
0:38:4,18 --> 0:38:7,55
If test four fails, we don't
even bother waiting for the


816
0:38:7,55 --> 0:38:9,51
other three to report in.


817
0:38:9,51 --> 0:38:12,56
Test four fails, therefore the
entire test suite fails.


818
0:38:12,56 --> 0:38:15,11
We report that right away
so the developer can


819
0:38:15,11 --> 0:38:16,47
start taking action.


820
0:38:16,47 --> 0:38:18,59
And this might actually happen
before test one, test two, and


821
0:38:18,59 --> 0:38:21,75
test three even finish
building.


822
0:38:21,75 --> 0:38:24,99
Our continuous build system ties
these two tools together.


823
0:38:24,99 --> 0:38:28,17
Widely adopted within Google,
there's one continuous build


824
0:38:28,17 --> 0:38:30,62
system that accounts for the
vast majority of all the


825
0:38:30,62 --> 0:38:33,7
builds that we have
within Google.


826
0:38:33,7 --> 0:38:35,41
This is what its user interface
looks like.


827
0:38:35,41 --> 0:38:37,93
There's two key components of
this continuous build system


828
0:38:37,93 --> 0:38:40,17
that I'd like to talk about.


829
0:38:40,17 --> 0:38:44,25
First is the before and after
submit test abilities, and the


830
0:38:44,25 --> 0:38:46,19
second one is about flaky
tests and the


831
0:38:46,19 --> 0:38:47,59
consequences thereof.


832
0:38:47,59 --> 0:38:50,25
The first one is actually
really key.


833
0:38:50,25 --> 0:38:53,75
Like I learned in my first
project, if you make it really


834
0:38:53,75 --> 0:38:57,23
easy for developers to run
tests, and hold them


835
0:38:57,23 --> 0:39:1,32
accountable to that, they will
run tests and check code


836
0:39:1,32 --> 0:39:3,62
that's actually correct
into the repository.


837
0:39:3,62 --> 0:39:5,19
You don't have to find
out about after.


838
0:39:5,19 --> 0:39:8,16
So our continuous
build system has


839
0:39:8,16 --> 0:39:9,62
what's known as a presubmit.


840
0:39:9,62 --> 0:39:12,18
I can take some code that I'm
sitting and editing on my


841
0:39:12,18 --> 0:39:14,73
workstation, hand it over
to the continuous build


842
0:39:14,73 --> 0:39:17,9
environment and say, take this,
merge it in with the


843
0:39:17,9 --> 0:39:20,7
last known green, and tell me
whether I'm going to break the


844
0:39:20,7 --> 0:39:21,92
build or not.


845
0:39:21,92 --> 0:39:23,15
That's great.


846
0:39:23,15 --> 0:39:27,23
I don't have to set up my
workstation in any special way


847
0:39:27,23 --> 0:39:29,11
to make test running possible.


848
0:39:29,11 --> 0:39:31,81
It's just a generic
workstation.


849
0:39:31,81 --> 0:39:34,7
It's going to be running my
code, and changes are going to


850
0:39:34,7 --> 0:39:37,1
be running in the same exact
environment that the


851
0:39:37,1 --> 0:39:39,87
continuous build engine uses to
determine whether tests are


852
0:39:39,87 --> 0:39:40,92
correct or not correct.


853
0:39:40,92 --> 0:39:42,2
So that's fantastic.


854
0:39:42,2 --> 0:39:46,8
We actually take that to an
even more extreme level.


855
0:39:46,8 --> 0:39:48,46
As soon as code is submitted
for a code review within


856
0:39:48,46 --> 0:39:51,83
Google, the code review process
not only sends it to a


857
0:39:51,83 --> 0:39:54,36
human being-- another human
being to go take a look at,


858
0:39:54,36 --> 0:39:56,75
but it also sends it
to the continuous


859
0:39:56,75 --> 0:39:58,94
built system to evaluate.


860
0:39:58,94 --> 0:40:1,2
We don't wait for the
developer to ask the


861
0:40:1,2 --> 0:40:2,58
continuous build system
whether the code's OK.


862
0:40:2,58 --> 0:40:4,22
We just do it proactively.


863
0:40:4,22 --> 0:40:7,22
So roughly the same amount of
time, likely maybe even


864
0:40:7,22 --> 0:40:9,25
faster, they'll hear
from their peer in


865
0:40:9,25 --> 0:40:10,83
terms of a code review.


866
0:40:10,83 --> 0:40:12,2
Your code looks good.


867
0:40:12,2 --> 0:40:14,33
Your code is horrible, throw
it out, start from scratch.


868
0:40:14,33 --> 0:40:15,86
Or anywhere in between.


869
0:40:15,86 --> 0:40:18,82
You'd also hear back from the
continuous build system--


870
0:40:18,82 --> 0:40:21,87
your tests pass, your tests
fail, anywhere in between.


871
0:40:21,87 --> 0:40:24,21
What tests fail, what
the logs are--


872
0:40:24,21 --> 0:40:25,39
they'll get notification.


873
0:40:25,39 --> 0:40:27,79
They'll also get a great email,
and this was a tool


874
0:40:27,79 --> 0:40:31,46
that was built by my colleagues
over in Zurich.


875
0:40:31,46 --> 0:40:34,18
They'll get an email that says,
your incremental code


876
0:40:34,18 --> 0:40:37,67
that you just added only
has 23% test coverage.


877
0:40:37,67 --> 0:40:40,89
For example, I picked
23% out of a hat.


878
0:40:40,89 --> 0:40:43,88
So we do incremental
test coverage--


879
0:40:43,88 --> 0:40:46,66
source code coverage right there
dynamically on behalf of


880
0:40:46,66 --> 0:40:49,3
the user in an attempt--


881
0:40:49,3 --> 0:40:51,27
and I'll be nice-- in an
attempt to notify the


882
0:40:51,27 --> 0:40:54,21
developer about what level
of coverage their


883
0:40:54,21 --> 0:40:56,6
incremental code has.


884
0:40:56,6 --> 0:40:57,56
OK, I'll stop being nice.


885
0:40:57,56 --> 0:40:59,82
It's really about shaming them
into believing that they


886
0:40:59,82 --> 0:41:1,45
should be writing more
tests for stuff


887
0:41:1,45 --> 0:41:2,9
that they're writing.


888
0:41:2,9 --> 0:41:3,755
But they get this stuff
all proactively.


889
0:41:3,755 --> 0:41:5,6
It's right there.


890
0:41:5,6 --> 0:41:7,7
And the code reviewer
also sees it.


891
0:41:7,7 --> 0:41:10,1
So here's an incentive for the
developers, right off the bat,


892
0:41:10,1 --> 0:41:13,17
to do the right thing.


893
0:41:13,17 --> 0:41:17,8
Our continuous build system
also handles fine grade


894
0:41:17,8 --> 0:41:17,6
dependencies.


895
0:41:17,6 --> 0:41:21,1
That's one way of lowering
compute costs for us.


896
0:41:21,1 --> 0:41:22,58
Like I said, 100 million
tests a day.


897
0:41:22,58 --> 0:41:24,47
That's pretty expensive
to run all of them.


898
0:41:24,47 --> 0:41:26,44
We only run the tests that
are actually necessary.


899
0:41:26,44 --> 0:41:28,66
We know all the dependencies
through the build system.


900
0:41:28,66 --> 0:41:31,13
We know what test is impacted
by what particular change.


901
0:41:31,13 --> 0:41:34,1
We'll only run the tests that
are appropriate for that


902
0:41:34,1 --> 0:41:36,5
particular change.


903
0:41:36,5 --> 0:41:38,66
Flaky tests--


904
0:41:38,66 --> 0:41:42,18
endless pain for us,
flaky tests.


905
0:41:42,18 --> 0:41:44,48
Flaky test is defined
as a test that is


906
0:41:44,48 --> 0:41:46,1
non-deterministic.


907
0:41:46,1 --> 0:41:49,79
Given a fixed environment,
particular revision of code,


908
0:41:49,79 --> 0:41:53,94
particular set of changes, you
run the test numerous times,


909
0:41:53,94 --> 0:41:56,4
and the test gives you
different results.


910
0:41:56,4 --> 0:41:58,58
There are lots of possibilities
for what causes


911
0:41:58,58 --> 0:41:59,43
flaky tests--


912
0:41:59,43 --> 0:42:3,3
environmental issues, code
issues, test code issues


913
0:42:3,3 --> 0:42:5,28
itself, et cetera.


914
0:42:5,28 --> 0:42:8,76
You can imagine if there's a
routine that returns a random


915
0:42:8,76 --> 0:42:12,51
number, and the unit test that
tests it tries to check that


916
0:42:12,51 --> 0:42:14,5
the number is below a particular
threshold.


917
0:42:14,5 --> 0:42:18,61
Well, maybe if it's testing a
50-50, it will pass half the


918
0:42:18,61 --> 0:42:20,83
time and fail half the time.


919
0:42:20,83 --> 0:42:25,5
So, non-deterministic flaky
tests are shown in this


920
0:42:25,5 --> 0:42:27,21
particular display by the
scattering of reds.


921
0:42:27,21 --> 0:42:31,22
By the way, the solid line of
red, that's a failure that was


922
0:42:31,22 --> 0:42:33,37
submitted by a particular
user.


923
0:42:33,37 --> 0:42:35,37
That's the second to last
row from the bottom.


924
0:42:35,37 --> 0:42:37,46
But the miscellaneous reds that
you see there are all


925
0:42:37,46 --> 0:42:38,87
flaky tests.


926
0:42:38,87 --> 0:42:40,35
They're tests that are
non-deterministic.


927
0:42:40,35 --> 0:42:42,35
Why is this a problem?


928
0:42:42,35 --> 0:42:45,82
Well, first of all, if the
developer's making a change,


929
0:42:45,82 --> 0:42:49,47
and they submit their change
into the presubmit queue and


930
0:42:49,47 --> 0:42:52,59
the presubmit queue fails, the
developer does not know


931
0:42:52,59 --> 0:42:56,21
whether it was the change that
they introduced, or if it was


932
0:42:56,21 --> 0:42:59,73
a flaky test that caused that
particular failure.


933
0:42:59,73 --> 0:43:1,89
Worst case, they go and they
start trying to find out


934
0:43:1,89 --> 0:43:5,55
what's going on within their
code that caused this


935
0:43:5,55 --> 0:43:8,11
particular problem.


936
0:43:8,11 --> 0:43:12,93
We would love to be 100% correct
around tests passing


937
0:43:12,93 --> 0:43:14,71
and failing, because that would
enable us to go to the


938
0:43:14,71 --> 0:43:15,81
next level of automation.


939
0:43:15,81 --> 0:43:18,21
If we detect a failure,
we reject.


940
0:43:18,21 --> 0:43:20,7
We roll back the submit.


941
0:43:20,7 --> 0:43:22,19
That would be fantastic.


942
0:43:22,19 --> 0:43:23,73
But we can't do that, because
of flaky tests.


943
0:43:23,73 --> 0:43:25,2
So we do three things.


944
0:43:25,2 --> 0:43:28,45
Our build system keeps track
of flaky information.


945
0:43:28,45 --> 0:43:30,95
And that particular tool was
built by my colleagues over in


946
0:43:30,95 --> 0:43:35,45
London to measure, understand,
and present back to the


947
0:43:35,45 --> 0:43:37,63
developers the level of
flakiness associated with a


948
0:43:37,63 --> 0:43:38,87
particular test.


949
0:43:38,87 --> 0:43:42,13
It's pretty easy to see the
different patterns with flaky


950
0:43:42,13 --> 0:43:43,86
tests as opposed to
real failures.


951
0:43:43,86 --> 0:43:46,1
So we do statistical analysis
and try to come up with some


952
0:43:46,1 --> 0:43:48,12
particular numbers.


953
0:43:48,12 --> 0:43:50,3
We try to get the developers
to fix them.


954
0:43:50,3 --> 0:43:52,67
So by letting them know their
tests are flaky, by shaming


955
0:43:52,67 --> 0:43:55,82
them into letting them know that
they're tests are flaky,


956
0:43:55,82 --> 0:43:58,45
we get the developers
to fix them.


957
0:43:58,45 --> 0:44:2,47
If we can't, we do the least
popular thing, and we just


958
0:44:2,47 --> 0:44:8,85
retry tests over and over and
over again until we determine


959
0:44:8,85 --> 0:44:12,27
that the test is flaky,
or we determined


960
0:44:12,27 --> 0:44:15,67
that the test is OK.


961
0:44:15,67 --> 0:44:17,31
We look for a pass.


962
0:44:17,31 --> 0:44:19,3
As you can imagine, as I showed
before, our submits


963
0:44:19,3 --> 0:44:21,96
into the source code repository
are not uniform


964
0:44:21,96 --> 0:44:23,5
over a 24-hour period.


965
0:44:23,5 --> 0:44:26,73
So we can take advantage of
the overnight hours to do


966
0:44:26,73 --> 0:44:29,7
incremental source
code computation


967
0:44:29,7 --> 0:44:30,33
for all of our projects.


968
0:44:30,33 --> 0:44:34,55
We also do extra analysis of
flaky tests overnight.


969
0:44:34,55 --> 0:44:35,93
So that's our continuous
build system.


970
0:44:35,93 --> 0:44:37,74
Some statistics about it--


971
0:44:37,74 --> 0:44:39,2
number of submits per day.


972
0:44:39,2 --> 0:44:40,96
A CL within Google is
called a changelist.


973
0:44:40,96 --> 0:44:44,18
It corresponds to a particular
change that was committed into


974
0:44:44,18 --> 0:44:45,5
our repository.


975
0:44:45,5 --> 0:44:47,31
Linear growth over time--


976
0:44:47,31 --> 0:44:48,46
that's fantastic.


977
0:44:48,46 --> 0:44:50,17
We hire more developers.


978
0:44:50,17 --> 0:44:51,5
More developers write
more code.


979
0:44:51,5 --> 0:44:52,75
We have more submits
over time.


980
0:44:52,75 --> 0:44:55,61



981
0:44:55,61 --> 0:44:57,23
The good news is that those
developers are not only


982
0:44:57,23 --> 0:44:57,67
writing code.


983
0:44:57,67 --> 0:44:58,66
They're writing tests.


984
0:44:58,66 --> 0:45:3,74
So the number of seconds that we
need to use to compute code


985
0:45:3,74 --> 0:45:6,34
test runs for every single
submit is also


986
0:45:6,34 --> 0:45:7,36
going up over time.


987
0:45:7,36 --> 0:45:8,79
That's fantastic.


988
0:45:8,79 --> 0:45:10,49
Developers are writing
more tests.


989
0:45:10,49 --> 0:45:12,4
For any given change,
we run more tests.


990
0:45:12,4 --> 0:45:13,52
We're happy to do that.


991
0:45:13,52 --> 0:45:16,59
But I have kids that are going
through geometry today, so I


992
0:45:16,59 --> 0:45:17,9
understand this.


993
0:45:17,9 --> 0:45:18,95
When you take a straight line,
multiply it by a straight


994
0:45:18,95 --> 0:45:21,73
line, you end up with
a quadratic.


995
0:45:21,73 --> 0:45:23,82
Quadratics are bad.


996
0:45:23,82 --> 0:45:27,8
There is no way-- even with
all the data centers that


997
0:45:27,8 --> 0:45:30,44
Google has, there is no way that
we at Google can keep up


998
0:45:30,44 --> 0:45:34,74
quadratic growth across
all of our test cases.


999
0:45:34,74 --> 0:45:36,68
I remember we actually
had a conversation.


1000
0:45:36,68 --> 0:45:39,51
Our developer tools group had
a conversation with our data


1001
0:45:39,51 --> 0:45:40,57
center people.


1002
0:45:40,57 --> 0:45:42,44
They went up to them and
they said, we need more


1003
0:45:42,44 --> 0:45:44,43
machines to run tests.


1004
0:45:44,43 --> 0:45:46,26
The data center people,
being data center


1005
0:45:46,26 --> 0:45:47,75
people, were quite blunt.


1006
0:45:47,75 --> 0:45:49,78
They said, you have
a choice to make.


1007
0:45:49,78 --> 0:45:50,87
You can run your tests.


1008
0:45:50,87 --> 0:45:53,7
We have enough computers
to run your tests.


1009
0:45:53,7 --> 0:45:56,61
We'll have to shut down all the
production applications.


1010
0:45:56,61 --> 0:45:58,45
You guys OK with that?


1011
0:45:58,45 --> 0:45:59,34
Tests or production?


1012
0:45:59,34 --> 0:46:1,134
What do you guys want to do?


1013
0:46:1,134 --> 0:46:2,13
AUDIENCE: [INAUDIBLE]


1014
0:46:2,13 --> 0:46:3,38
ARI SHAMASH: Yeah.


1015
0:46:3,38 --> 0:46:5,54



1016
0:46:5,54 --> 0:46:7,0
So that's where we are today.


1017
0:46:7,0 --> 0:46:11,5
We are heavily applying
engineering to solve a brute


1018
0:46:11,5 --> 0:46:11,79
force problem.


1019
0:46:11,79 --> 0:46:14,44
This is a theme that comes up
over and over and over again,


1020
0:46:14,44 --> 0:46:17,83
and I've seen this over the
last 15 or 20 years.


1021
0:46:17,83 --> 0:46:20,39
When you can apply brute force,
the easiest thing to do


1022
0:46:20,39 --> 0:46:21,39
is apply brute force.


1023
0:46:21,39 --> 0:46:22,96
But brute force times
out after a


1024
0:46:22,96 --> 0:46:23,36
certain amount of time.


1025
0:46:23,36 --> 0:46:25,19
You just can't scale.


1026
0:46:25,19 --> 0:46:27,23
You have to start thinking about
better ways of doing


1027
0:46:27,23 --> 0:46:29,7
things, and that's what
we're doing today.


1028
0:46:29,7 --> 0:46:31,34
So maybe we don't run the tests
at every single change.


1029
0:46:31,34 --> 0:46:33,98
We run them periodically, and
then we'll run all sorts of


1030
0:46:33,98 --> 0:46:36,68
interesting culprit finding to
try to figure out where in


1031
0:46:36,68 --> 0:46:38,34
between that the breakage was.


1032
0:46:38,34 --> 0:46:41,2
There's actually a talk tomorrow
about culprit finding


1033
0:46:41,2 --> 0:46:42,27
within Google.


1034
0:46:42,27 --> 0:46:44,26



1035
0:46:44,26 --> 0:46:46,28
So let me talk a little bit
about the people, the people


1036
0:46:46,28 --> 0:46:47,68
that make this all happen
within Google.


1037
0:46:47,68 --> 0:46:49,3
There are two roles--


1038
0:46:49,3 --> 0:46:50,14
SETs and TEs--


1039
0:46:50,14 --> 0:46:52,43
within the test engineering
group at Google.


1040
0:46:52,43 --> 0:46:55,75
We within testing engineering
do a handful of things.


1041
0:46:55,75 --> 0:46:58,23
We create processes and plans
that would help test a


1042
0:46:58,23 --> 0:46:59,48
particular product.


1043
0:46:59,48 --> 0:47:2,54
We think of best ways to
maximize coverage.


1044
0:47:2,54 --> 0:47:5,21
But we also are highly involved
in building a lot of


1045
0:47:5,21 --> 0:47:6,84
the tools that I talked about.


1046
0:47:6,84 --> 0:47:9,45
In fact, many of the tools that
I demonstrated were built


1047
0:47:9,45 --> 0:47:11,83
by the test engineering
folks here at Google.


1048
0:47:11,83 --> 0:47:13,7
I'll show you guys
some examples.


1049
0:47:13,7 --> 0:47:15,79
There are some links that
you can go to to


1050
0:47:15,79 --> 0:47:18,0
read more about this.


1051
0:47:18,0 --> 0:47:22,44
First one, probably making up
roughly 50% of what we do, is


1052
0:47:22,44 --> 0:47:24,5
really focused on flaky tests.


1053
0:47:24,5 --> 0:47:28,6
I described earlier the problems
with flaky tests.


1054
0:47:28,6 --> 0:47:31,75
They're a huge cost, and they're
a huge time sink.


1055
0:47:31,75 --> 0:47:33,62
How do you eliminate
flaky tests?


1056
0:47:33,62 --> 0:47:35,19
You build hermetic environments
you can


1057
0:47:35,19 --> 0:47:36,38
run your tests in.


1058
0:47:36,38 --> 0:47:40,46
Hermetic environments are
self-isolated environments.


1059
0:47:40,46 --> 0:47:42,83
Instantiated tests
are run against


1060
0:47:42,83 --> 0:47:44,84
them, and then deleted.


1061
0:47:44,84 --> 0:47:47,86
The more hermetic they are, the
less external dependencies


1062
0:47:47,86 --> 0:47:51,18
they are, the better.


1063
0:47:51,18 --> 0:47:54,66
The cheaper it is to create that
environment, the faster


1064
0:47:54,66 --> 0:47:57,0
the tests will run.


1065
0:47:57,0 --> 0:47:59,46
So a lot of the engineering that
we do is about building


1066
0:47:59,46 --> 0:48:3,23
consistent, reproducible,
hermetic environments, so we


1067
0:48:3,23 --> 0:48:5,54
can run multiple of those
environments and run tests at


1068
0:48:5,54 --> 0:48:6,5
the same time.


1069
0:48:6,5 --> 0:48:10,95
For a typical application, we
might be running 5, 10, 15, 20


1070
0:48:10,95 --> 0:48:14,22
instances of that application at
any given time in parallel


1071
0:48:14,22 --> 0:48:16,35
with different revisions of
source code being tested


1072
0:48:16,35 --> 0:48:17,47
against that application.


1073
0:48:17,47 --> 0:48:19,62
That's pretty common.


1074
0:48:19,62 --> 0:48:21,96
We need separate environments
that don't interact with one


1075
0:48:21,96 --> 0:48:23,61
another and don't interfere
with all the testing


1076
0:48:23,61 --> 0:48:24,77
that goes on there.


1077
0:48:24,77 --> 0:48:26,94
So that's roughly 50% of the
time what we do, and there's a


1078
0:48:26,94 --> 0:48:30,4
link over there that has
more information.


1079
0:48:30,4 --> 0:48:31,725
Another one is metrics.


1080
0:48:31,725 --> 0:48:34,29
If you can't measure it, you
can't really understand it or


1081
0:48:34,29 --> 0:48:34,94
control it.


1082
0:48:34,94 --> 0:48:37,26
So we try to measure lots
of interesting things.


1083
0:48:37,26 --> 0:48:37,75
We're Google.


1084
0:48:37,75 --> 0:48:39,18
We love data.


1085
0:48:39,18 --> 0:48:42,43
We collect lots of interesting
data and present it to


1086
0:48:42,43 --> 0:48:45,66
developers as a way, again, to
get the engineering groups to


1087
0:48:45,66 --> 0:48:46,1
the right thing.


1088
0:48:46,1 --> 0:48:47,8
And when I talk about
developers, I actually mean


1089
0:48:47,8 --> 0:48:49,73
us, because we're developers
as well.


1090
0:48:49,73 --> 0:48:52,98
So we collect metrics for test
engineering, in addition to


1091
0:48:52,98 --> 0:48:56,43
collecting metrics on the
developer engineers--


1092
0:48:56,43 --> 0:48:59,71
or the product engineers, the
developers on products.


1093
0:48:59,71 --> 0:49:2,46
First one-- and I'll kind of go
around the slide, starting


1094
0:49:2,46 --> 0:49:4,27
with the upper left
hand corner.


1095
0:49:4,27 --> 0:49:6,11
This is positive reinforcement
about


1096
0:49:6,11 --> 0:49:7,92
incremental source code coverage.


1097
0:49:7,92 --> 0:49:10,13
This was built by my colleagues
in London.


1098
0:49:10,13 --> 0:49:13,84
They had this idea that for
every single submit, we'd


1099
0:49:13,84 --> 0:49:16,6
measure the incremental
source code coverage.


1100
0:49:16,6 --> 0:49:19,71
And if it's good source good
coverage, we'd give credit to


1101
0:49:19,71 --> 0:49:21,35
the person who submitted it.


1102
0:49:21,35 --> 0:49:22,39
So here it is.


1103
0:49:22,39 --> 0:49:24,15
We have these lookout
displays scattered


1104
0:49:24,15 --> 0:49:24,95
all around the offices.


1105
0:49:24,95 --> 0:49:28,14
If any of you guys are going
on tours, look around.


1106
0:49:28,14 --> 0:49:30,97
There's a whole a handful
of them around the


1107
0:49:30,97 --> 0:49:31,65
fourth floor here.


1108
0:49:31,65 --> 0:49:34,96
They're constantly being
refreshed with update metrics.


1109
0:49:34,96 --> 0:49:36,39
So that's an example
of econometrics


1110
0:49:36,39 --> 0:49:37,93
that we put up there.


1111
0:49:37,93 --> 0:49:39,87
These lookout displays scroll
through lots of different


1112
0:49:39,87 --> 0:49:40,67
information.


1113
0:49:40,67 --> 0:49:43,16
If a person does a great job
with incremental source code


1114
0:49:43,16 --> 0:49:45,64
coverage and they submit a
change that's got high


1115
0:49:45,64 --> 0:49:48,16
coverage, they get their
picture up there.


1116
0:49:48,16 --> 0:49:51,12
It's right there in the middle,
nice and big with lots


1117
0:49:51,12 --> 0:49:52,79
of green around it.


1118
0:49:52,79 --> 0:49:55,47
The group that this was deployed
into started a


1119
0:49:55,47 --> 0:49:58,68
friendly competition of who
can get the highest green,


1120
0:49:58,68 --> 0:50:2,26
most number of greens, get their
face up there as often


1121
0:50:2,26 --> 0:50:3,65
as possible.


1122
0:50:3,65 --> 0:50:4,29
Fantastic.


1123
0:50:4,29 --> 0:50:5,0
Loving it.


1124
0:50:5,0 --> 0:50:8,41
This utility alone raised
source code coverage for


1125
0:50:8,41 --> 0:50:12,52
applications by a significant
amount.


1126
0:50:12,52 --> 0:50:15,17
Bottom left hand corner
is latency metrics.


1127
0:50:15,17 --> 0:50:17,5
So we measure constant
performance of application,


1128
0:50:17,5 --> 0:50:18,81
make that information
available.


1129
0:50:18,81 --> 0:50:20,85
We don't wait until the
application is in production


1130
0:50:20,85 --> 0:50:24,83
to find out that significant
performance problems


1131
0:50:24,83 --> 0:50:26,18
are about to hit.


1132
0:50:26,18 --> 0:50:26,84
We measure.


1133
0:50:26,84 --> 0:50:27,49
We show it.


1134
0:50:27,49 --> 0:50:28,63
We move on.


1135
0:50:28,63 --> 0:50:32,65
We also show build status, and
that's that green Project X


1136
0:50:32,65 --> 0:50:35,97
status that passed today,
last timestamp, whatnot.


1137
0:50:35,97 --> 0:50:40,38
There are some groups, who shall
remain nameless, that


1138
0:50:40,38 --> 0:50:42,49
don't adhere to the--


1139
0:50:42,49 --> 0:50:45,69
or don't respond to the positive
reinforcement that's


1140
0:50:45,69 --> 0:50:48,13
on the top left hand corner.


1141
0:50:48,13 --> 0:50:50,51
We had a problem with a
particular group where non


1142
0:50:50,51 --> 0:50:54,68
high priority bugs, like the
P3s and P4s were piling up.


1143
0:50:54,68 --> 0:50:58,42
And the group was just not
motivated to go and fix them.


1144
0:50:58,42 --> 0:50:59,6
So we brainstormed about this.


1145
0:50:59,6 --> 0:51:1,52
We tried all the positive
reinforcement--


1146
0:51:1,52 --> 0:51:5,18
giving them kudos for fixing
bugs, rewarding them,


1147
0:51:5,18 --> 0:51:7,71
recognizing them, doing
all the good things.


1148
0:51:7,71 --> 0:51:9,0
Didn't make a difference.


1149
0:51:9,0 --> 0:51:10,57
So we went the other way--


1150
0:51:10,57 --> 0:51:15,26
public shame, humiliation.


1151
0:51:15,26 --> 0:51:16,87
We put this utility together.


1152
0:51:16,87 --> 0:51:20,46
We need it black on purpose--
black is ugly--


1153
0:51:20,46 --> 0:51:24,31
with lots of red around
it-- accusatory, put


1154
0:51:24,31 --> 0:51:26,73
up the worst offender.


1155
0:51:26,73 --> 0:51:27,85
We were sitting there
in the morning.


1156
0:51:27,85 --> 0:51:28,73
A bunch of us were
sitting there.


1157
0:51:28,73 --> 0:51:29,43
It was nice and quiet.


1158
0:51:29,43 --> 0:51:30,51
We were sitting there
typing away.


1159
0:51:30,51 --> 0:51:33,44
The next thing we know,
somebody comes in.


1160
0:51:33,44 --> 0:51:37,22
And I'll give you the G rated
version, because GTAC is a


1161
0:51:37,22 --> 0:51:39,62
family-friendly sort
of of conference.


1162
0:51:39,62 --> 0:51:43,55
Why is my picture up there?


1163
0:51:43,55 --> 0:51:46,5
Comes up to us-- why is
my picture up there?


1164
0:51:46,5 --> 0:51:47,3
It was a lot more colorful.


1165
0:51:47,3 --> 0:51:50,18



1166
0:51:50,18 --> 0:51:51,4
You had a lot of bugs.


1167
0:51:51,4 --> 0:51:54,71
What do I do to get my picture
out from there?


1168
0:51:54,71 --> 0:51:56,45
Go fix your bugs.


1169
0:51:56,45 --> 0:51:58,69
The entire day, we hear furious
typing, lots of


1170
0:51:58,69 --> 0:52:1,99
banging, lots of other
choice words.


1171
0:52:1,99 --> 0:52:5,4
Picture disappears by
late afternoon.


1172
0:52:5,4 --> 0:52:7,91
Next thing we know, why is my
picture up there, from the


1173
0:52:7,91 --> 0:52:9,9
second person who's up.


1174
0:52:9,9 --> 0:52:11,2
You have lot of bugs.


1175
0:52:11,2 --> 0:52:13,46
Go fix them.


1176
0:52:13,46 --> 0:52:18,52
Needless to say, a few weeks
after that, problem solved.


1177
0:52:18,52 --> 0:52:22,84
So in the summary, for test
engineering, we really look


1178
0:52:22,84 --> 0:52:26,98
for creative ways to introduce
cultural change so things are


1179
0:52:26,98 --> 0:52:30,12
done correctly right up front
with our developing groups.


1180
0:52:30,12 --> 0:52:32,46
So the impact of test
engineering--


1181
0:52:32,46 --> 0:52:34,24
and you know we're not
in with every single


1182
0:52:34,24 --> 0:52:34,99
product within Google.


1183
0:52:34,99 --> 0:52:38,75
There's only about 800, 900 of
us or so against a population


1184
0:52:38,75 --> 0:52:40,62
of 15,000 engineers.


1185
0:52:40,62 --> 0:52:42,59
So we're not engaged with
every single group.


1186
0:52:42,59 --> 0:52:45,4
But the groups that we do engage
with, first of all, are


1187
0:52:45,4 --> 0:52:48,36
really happy to have test
engineering support.


1188
0:52:48,36 --> 0:52:50,77
But we also have demonstrable
impact.


1189
0:52:50,77 --> 0:52:51,98
For example, Google+--


1190
0:52:51,98 --> 0:52:54,7
100 new features released
in the first 90 days.


1191
0:52:54,7 --> 0:52:59,41
That's roughly, on average,
more than a release a day.


1192
0:52:59,41 --> 0:53:4,13
Search, we can go from an idea
to production in 48 hours--


1193
0:53:4,13 --> 0:53:5,68
less than 48 hours.


1194
0:53:5,68 --> 0:53:6,94
And Chrome-- the browser--


1195
0:53:6,94 --> 0:53:9,82
six weeks, regular schedule,
[INAUDIBLE].


1196
0:53:9,82 --> 0:53:12,54
That's the impact of
test engineering.


1197
0:53:12,54 --> 0:53:14,2
I also want to pause
at this point.


1198
0:53:14,2 --> 0:53:15,48
I know Tony addressed this.


1199
0:53:15,48 --> 0:53:17,88
But really, it's test
engineering, the discipline of


1200
0:53:17,88 --> 0:53:20,34
test engineering within Google,
that sponsors this


1201
0:53:20,34 --> 0:53:22,4
conference year in
and year out.


1202
0:53:22,4 --> 0:53:24,48
There's lots of volunteers
from the test engineering


1203
0:53:24,48 --> 0:53:26,65
discipline that help put
it together this year.


1204
0:53:26,65 --> 0:53:28,61
And the test engineering
discipline funds


1205
0:53:28,61 --> 0:53:29,68
it year over year.


1206
0:53:29,68 --> 0:53:32,84
So I want to say thank you to
the various members that


1207
0:53:32,84 --> 0:53:35,87
organized this conference, and
the various individuals and


1208
0:53:35,87 --> 0:53:40,73
executives that form test
engineering, but also made


1209
0:53:40,73 --> 0:53:41,98
this particular conference
happen.


1210
0:53:41,98 --> 0:53:44,46



1211
0:53:44,46 --> 0:53:46,32
So now it's your turn.


1212
0:53:46,32 --> 0:53:48,77
Over the next couple of days,
we're going to hear many of


1213
0:53:48,77 --> 0:53:51,36
your presentations about what
test engineering at your


1214
0:53:51,36 --> 0:53:53,13
particular companies
looks like.


1215
0:53:53,13 --> 0:53:54,3
Maybe you call it something
different.


1216
0:53:54,3 --> 0:53:55,46
Love to hear the names.


1217
0:53:55,46 --> 0:53:57,3
We'd love to hear your
best practices.


1218
0:53:57,3 --> 0:53:58,97
We'd love to hear
your challenges.


1219
0:53:58,97 --> 0:54:1,18
What can we learn from
each other to


1220
0:54:1,18 --> 0:54:4,73
improve all of our practices?


1221
0:54:4,73 --> 0:54:6,43
So I have a question.


1222
0:54:6,43 --> 0:54:8,54
Are we done?


1223
0:54:8,54 --> 0:54:11,76
Are we done with test
engineering?


1224
0:54:11,76 --> 0:54:14,6
Here we were 15, 20 years ago.


1225
0:54:14,6 --> 0:54:15,39
We clearly had a lot
of work to do.


1226
0:54:15,39 --> 0:54:17,885
We were all pioneers in
a brand new space.


1227
0:54:17,885 --> 0:54:19,37
Are we done?


1228
0:54:19,37 --> 0:54:21,67
We kind of have awesome tools.


1229
0:54:21,67 --> 0:54:22,78
All this stuff works.


1230
0:54:22,78 --> 0:54:26,4
We're able to develop
software.


1231
0:54:26,4 --> 0:54:27,82
So the question that I have--


1232
0:54:27,82 --> 0:54:30,37
are we about coffee?


1233
0:54:30,37 --> 0:54:33,22
Do we need to hunker down and
drink more coffee, and


1234
0:54:33,22 --> 0:54:34,55
continue engineering
[INAUDIBLE]


1235
0:54:34,55 --> 0:54:35,8
test engineering?


1236
0:54:35,8 --> 0:54:39,6



1237
0:54:39,6 --> 0:54:40,17
Or is it about beer?


1238
0:54:40,17 --> 0:54:42,84
Do we pick up some beer now?


1239
0:54:42,84 --> 0:54:44,48
Samuel Adams-- again,
a shout out to my


1240
0:54:44,48 --> 0:54:45,89
friends over in Boston.


1241
0:54:45,89 --> 0:54:48,57
Fantastic beer.


1242
0:54:48,57 --> 0:54:51,77
Should we grab some beer and
go celebrate, be done?


1243
0:54:51,77 --> 0:54:55,57
Are we done with this particular
discipline?


1244
0:54:55,57 --> 0:54:57,38
I think the answer is no.


1245
0:54:57,38 --> 0:54:59,7
As much as I would love to get
together and drink some


1246
0:54:59,7 --> 0:55:0,93
beers-- it's only about 10
o'clock in the morning.


1247
0:55:0,93 --> 0:55:2,52
It's a little early.


1248
0:55:2,52 --> 0:55:3,77
We're not in Ireland.


1249
0:55:3,77 --> 0:55:6,23



1250
0:55:6,23 --> 0:55:7,44
Coffee is still good.


1251
0:55:7,44 --> 0:55:9,45
But we have a lot of work to
do, because the world is


1252
0:55:9,45 --> 0:55:10,85
changing underneath us.


1253
0:55:10,85 --> 0:55:13,48
And that's really why many
of us are here today.


1254
0:55:13,48 --> 0:55:15,67
Let's take some statistics
from YouTube.


1255
0:55:15,67 --> 0:55:17,81
72 hours of video are
uploaded every


1256
0:55:17,81 --> 0:55:19,56
single minute to YouTube.


1257
0:55:19,56 --> 0:55:21,95
Four billion hours of
videos are watched


1258
0:55:21,95 --> 0:55:23,54
every single month.


1259
0:55:23,54 --> 0:55:25,54
While developers are sitting
there watching videos while


1260
0:55:25,54 --> 0:55:28,58
they're waiting for their
build systems.


1261
0:55:28,58 --> 0:55:29,51
2011--


1262
0:55:29,51 --> 0:55:31,3
more than one trillion views--


1263
0:55:31,3 --> 0:55:34,99
140 views for every single
person on the earth.


1264
0:55:34,99 --> 0:55:36,675
That's even assuming that every
single person on the


1265
0:55:36,675 --> 0:55:38,95
earth has internet access.


1266
0:55:38,95 --> 0:55:42,7
Most interestingly, 70% of the
traffic comes from outside the


1267
0:55:42,7 --> 0:55:44,1
United States.


1268
0:55:44,1 --> 0:55:44,92
That's on the media side.


1269
0:55:44,92 --> 0:55:49,96
On the mobile side, 25% of
traffic to YouTube comes from


1270
0:55:49,96 --> 0:55:52,78
mobile devices.


1271
0:55:52,78 --> 0:55:55,6
So I started thinking about
this and said, is this is


1272
0:55:55,6 --> 0:55:57,6
really a problem?


1273
0:55:57,6 --> 0:55:57,42
That's great.


1274
0:55:57,42 --> 0:56:0,34
That's great that YouTube has
all these fantastic statistics


1275
0:56:0,34 --> 0:56:2,52
showing the change.


1276
0:56:2,52 --> 0:56:4,2
Is this a problem?


1277
0:56:4,2 --> 0:56:7,69
So I looked at various different
sources on the web.


1278
0:56:7,69 --> 0:56:10,22
The source for this particular
graph is up there.


1279
0:56:10,22 --> 0:56:12,66
Mobile versus desktop
traffic--


1280
0:56:12,66 --> 0:56:14,6
desktop is that 85%.


1281
0:56:14,6 --> 0:56:15,73
Mobile is at 15%.


1282
0:56:15,73 --> 0:56:18,69
We all apply the 80-20 rule.


1283
0:56:18,69 --> 0:56:19,5
I don't know.


1284
0:56:19,5 --> 0:56:20,89
This looks to me like
we're kind of done.


1285
0:56:20,89 --> 0:56:22,7
We figured out the desktop.


1286
0:56:22,7 --> 0:56:25,52
We figured out how all of its
issues with the desktop.


1287
0:56:25,52 --> 0:56:27,2
We know how to mock out
all of its inputs.


1288
0:56:27,2 --> 0:56:28,84
We know how to mock out
all of its output.


1289
0:56:28,84 --> 0:56:30,7
We know how to analyze
the output.


1290
0:56:30,7 --> 0:56:31,8
We have image comparison.


1291
0:56:31,8 --> 0:56:33,17
We have great tools for
understanding of applications


1292
0:56:33,17 --> 0:56:34,48
that are working well.


1293
0:56:34,48 --> 0:56:37,81
It looks like we're done.


1294
0:56:37,81 --> 0:56:39,72
Then Eric Schmidt--


1295
0:56:39,72 --> 0:56:43,59
former CEO, current chairman
of Google--


1296
0:56:43,59 --> 0:56:47,81
and his buddy Jared Cohen wrote
a book-- it was actually


1297
0:56:47,81 --> 0:56:50,48
just published today.


1298
0:56:50,48 --> 0:56:51,51
I got my copy yesterday.


1299
0:56:51,51 --> 0:56:53,65
Fortunately I got a chance to
read through some of it--


1300
0:56:53,65 --> 0:56:56,82
called "The New Digital Age,"
that talks about some of the


1301
0:56:56,82 --> 0:56:58,51
changes that are under foot.


1302
0:56:58,51 --> 0:56:59,93
And I'd like to tell you
a little bit about it.


1303
0:56:59,93 --> 0:57:1,6
And the first thing he says is
that there's only about two


1304
0:57:1,6 --> 0:57:4,93
billion people that are
on the internet today.


1305
0:57:4,93 --> 0:57:7,46
But he predicts that in the next
few years, five billion


1306
0:57:7,46 --> 0:57:8,79
more-- the incremental--


1307
0:57:8,79 --> 0:57:10,1
will come online.


1308
0:57:10,1 --> 0:57:15,31
And he's seeing some early
indicators that this is true.


1309
0:57:15,31 --> 0:57:18,97
First, he visited
Iraq in 2009.


1310
0:57:18,97 --> 0:57:22,56
The first thing he noticed in
this war ravaged country,


1311
0:57:22,56 --> 0:57:24,32
trash wasn't picked up.


1312
0:57:24,32 --> 0:57:29,62
Reliable water was not evenly
available across the country.


1313
0:57:29,62 --> 0:57:32,15
The first thing that they got
up and running, one of the


1314
0:57:32,15 --> 0:57:35,55
highest priority items in Iraq,
was getting a mobile


1315
0:57:35,55 --> 0:57:40,5
network so they can exchange
information from one another.


1316
0:57:40,5 --> 0:57:42,71
One of the first things that
they got up and running.


1317
0:57:42,71 --> 0:57:49,37
Like to tell you about another
story in Africa, again, as he


1318
0:57:49,37 --> 0:57:50,93
was traveling the world.


1319
0:57:50,93 --> 0:57:53,9
In the Congo fishermen--


1320
0:57:53,9 --> 0:57:56,34
actually, fisherwomen--


1321
0:57:56,34 --> 0:57:56,88
fish.


1322
0:57:56,88 --> 0:57:59,1
They used to take their
fish to the market.


1323
0:57:59,1 --> 0:58:0,49
If they were lucky,
they sold them.


1324
0:58:0,49 --> 0:58:3,77
If they were unlucky, the fish
went bad, they threw them out.


1325
0:58:3,77 --> 0:58:7,58
Using mobile devices,
they actually leave


1326
0:58:7,58 --> 0:58:8,79
the fist in the river.


1327
0:58:8,79 --> 0:58:11,57
They catch the fish, but they
leave them in the river until


1328
0:58:11,57 --> 0:58:13,66
they have a customer ready
to pick them up.


1329
0:58:13,66 --> 0:58:16,72
They receive notification
on their mobile device.


1330
0:58:16,72 --> 0:58:17,75
They take a fish out
of the water.


1331
0:58:17,75 --> 0:58:19,53
They give it straight
to the customer.


1332
0:58:19,53 --> 0:58:22,5
No loss in inventory, maximize
their opportunity.


1333
0:58:22,5 --> 0:58:25,48
And this actually created
a semi-economy there, if


1334
0:58:25,48 --> 0:58:29,42
somebody has fish that another
fisher person wants, they can


1335
0:58:29,42 --> 0:58:31,9
now exchange it among themselves
using mobile


1336
0:58:31,9 --> 0:58:33,53
technology.


1337
0:58:33,53 --> 0:58:36,4
Lots of interesting stories.


1338
0:58:36,4 --> 0:58:36,8
So are we done?


1339
0:58:36,8 --> 0:58:39,9
Again, is Eric right?


1340
0:58:39,9 --> 0:58:43,18
So I started looking to more
data, and this one, again, the


1341
0:58:43,18 --> 0:58:44,46
source is on the bottom.


1342
0:58:44,46 --> 0:58:49,42
74% of the developed world is
already using the net, but


1343
0:58:49,42 --> 0:58:53,72
only 26% of the developing
world is using the net.


1344
0:58:53,72 --> 0:58:56,51
And if you average it out
relative to population, the


1345
0:58:56,51 --> 0:58:57,58
average is 35%.


1346
0:58:57,58 --> 0:59:2,84
Much closer to the developing
world line than the developed


1347
0:59:2,84 --> 0:59:5,59
world because there's a lot more
people in the developing


1348
0:59:5,59 --> 0:59:10,39
world that still have
to get connected.


1349
0:59:10,39 --> 0:59:12,52
So let's revisit these graphs
again looking at them from


1350
0:59:12,52 --> 0:59:14,16
different geographical
perspectives.


1351
0:59:14,16 --> 0:59:16,22
Let's take South Korea.


1352
0:59:16,22 --> 0:59:19,81
South Korea is highly advanced,
but the story there,


1353
0:59:19,81 --> 0:59:22,53
desktop versus mobile, tells
a very different story.


1354
0:59:22,53 --> 0:59:28,42
Much closer to 60-40 than
it is worldwide.


1355
0:59:28,42 --> 0:59:31,15
Let's take another step
and look at India.


1356
0:59:31,15 --> 0:59:33,735
The story in India is
radically different.


1357
0:59:33,735 --> 0:59:36,66
There's a lot more mobile stuff
going on than there is


1358
0:59:36,66 --> 0:59:39,0
desktop stuff, and this
trend is only


1359
0:59:39,0 --> 0:59:40,63
going to continue growing.


1360
0:59:40,63 --> 0:59:42,18
So mobile's already
here today.


1361
0:59:42,18 --> 0:59:44,39
It's something that we have
to address today.


1362
0:59:44,39 --> 0:59:47,22



1363
0:59:47,22 --> 0:59:49,39
There's lots of challenges with
media and mobile, and


1364
0:59:49,39 --> 0:59:51,46
I'll run through them.


1365
0:59:51,46 --> 0:59:52,28
Platforms.


1366
0:59:52,28 --> 0:59:54,97
Tremendous amount of variability
in platforms.


1367
0:59:54,97 --> 1:0:0,22
Lots of hardware, lots of
different operating systems.


1368
1:0:0,22 --> 1:0:2,61
The operating systems themselves
may not be as


1369
1:0:2,61 --> 1:0:4,73
stable as you would
love them to be.


1370
1:0:4,73 --> 1:0:8,92
And unlike on the web where I
as an application developer


1371
1:0:8,92 --> 1:0:11,4
had complete control of the
stack, top to bottom, in my


1372
1:0:11,4 --> 1:0:13,91
production environment,
that's no longer true


1373
1:0:13,91 --> 1:0:15,4
on the mobile side.


1374
1:0:15,4 --> 1:0:18,25
If I'm an app developer, I now
have to deal with other


1375
1:0:18,25 --> 1:0:20,56
applications that are on the
device-- my application, the


1376
1:0:20,56 --> 1:0:23,47
operating system, all sorts of
different combinations and


1377
1:0:23,47 --> 1:0:25,55
permutations that
are going on.


1378
1:0:25,55 --> 1:0:27,92
The hardware is different, the
platforms are different.


1379
1:0:27,92 --> 1:0:30,38
Input.


1380
1:0:30,38 --> 1:0:32,65
There's no longer just
a keyboard and mouse.


1381
1:0:32,65 --> 1:0:34,86
There's tremendous amount of
variability in input these


1382
1:0:34,86 --> 1:0:38,91
days across all the
different devices.


1383
1:0:38,91 --> 1:0:40,87
There are cameras.


1384
1:0:40,87 --> 1:0:42,51
There are GPS receivers.


1385
1:0:42,51 --> 1:0:43,24
There's touchscreen.


1386
1:0:43,24 --> 1:0:45,3
There's gestures.


1387
1:0:45,3 --> 1:0:46,2
There's physical buttons.


1388
1:0:46,2 --> 1:0:47,61
There's voice recognition.


1389
1:0:47,61 --> 1:0:50,3
You can tell the device
what to do.


1390
1:0:50,3 --> 1:0:54,8
On the output side, there's
all sorts of devices.


1391
1:0:54,8 --> 1:1:1,41
Resolutions, languages, all
sorts of issues around that.


1392
1:1:1,41 --> 1:1:3,22
Also the network is no
longer consistent.


1393
1:1:3,22 --> 1:1:5,75
The same application that's
running on the web, at least


1394
1:1:5,75 --> 1:1:7,4
you can assume that if the
application is running, you


1395
1:1:7,4 --> 1:1:9,22
can talk back home.


1396
1:1:9,22 --> 1:1:11,46
It managed to get downloaded
somehow.


1397
1:1:11,46 --> 1:1:14,17
Offline is getting better and
better every single day.


1398
1:1:14,17 --> 1:1:17,7
But really, how many desktops
are offline?


1399
1:1:17,7 --> 1:1:18,67
Mobile is no longer true.


1400
1:1:18,67 --> 1:1:21,22
The same application that's
running can experience, within


1401
1:1:21,22 --> 1:1:25,32
minutes, lots of network, no
network, medium network,


1402
1:1:25,32 --> 1:1:27,76
network bandwidth, network
latency, all sorts of the


1403
1:1:27,76 --> 1:1:30,32
variability on the network side
that have to be dealt


1404
1:1:30,32 --> 1:1:32,67
with in some sort of
interesting way.


1405
1:1:32,67 --> 1:1:34,1
On the media side, the
variability in


1406
1:1:34,1 --> 1:1:35,54
quality is as high.


1407
1:1:35,54 --> 1:1:38,27
Codex, will this media work
on this particular device?


1408
1:1:38,27 --> 1:1:39,49
Will it work well?


1409
1:1:39,49 --> 1:1:40,1
Will it stream?


1410
1:1:40,1 --> 1:1:41,94
Will it be real time?


1411
1:1:41,94 --> 1:1:44,73
How do I understand
video quality?


1412
1:1:44,73 --> 1:1:47,17
Any of you have taken compressed
videos and looked


1413
1:1:47,17 --> 1:1:48,87
at them image by image, you'll
see that the images are


1414
1:1:48,87 --> 1:1:50,97
radically not good.


1415
1:1:50,97 --> 1:1:55,6



1416
1:1:55,6 --> 1:1:56,85
But that's OK, because our
brain does a great job of


1417
1:1:56,85 --> 1:2:0,7
taking a sequence of them and
putting them together.


1418
1:2:0,7 --> 1:2:1,81
Sound.


1419
1:2:1,81 --> 1:2:3,18
Our ears are not as forgiving.


1420
1:2:3,18 --> 1:2:7,46
If there's a pop in the noise,
instantly our brains will


1421
1:2:7,46 --> 1:2:9,22
determine that this is bad.


1422
1:2:9,22 --> 1:2:11,22
Software delivery mechanisms
have changed.


1423
1:2:11,22 --> 1:2:13,53
We now have to, again, go back
to the world where we're


1424
1:2:13,53 --> 1:2:15,19
downloading software.


1425
1:2:15,19 --> 1:2:19,44
We're allowing the user to
download software, and if we


1426
1:2:19,44 --> 1:2:21,86
want to release a new version,
we no longer can do it


1427
1:2:21,86 --> 1:2:23,99
instantaneously and give
access to all of our


1428
1:2:23,99 --> 1:2:25,18
developers.


1429
1:2:25,18 --> 1:2:27,2
We have to wait for the
developer to download it.


1430
1:2:27,2 --> 1:2:29,6
So again, we have to deal with
multiple, different versions


1431
1:2:29,6 --> 1:2:30,46
at the same time.


1432
1:2:30,46 --> 1:2:32,85
Worse, there's now an
intermediary between


1433
1:2:32,85 --> 1:2:33,865
our users and us.


1434
1:2:33,865 --> 1:2:35,73
The app stores are there.


1435
1:2:35,73 --> 1:2:37,59
Security, privacy.


1436
1:2:37,59 --> 1:2:40,3
We have to go back to a world
where malware, and viruses,


1437
1:2:40,3 --> 1:2:42,49
and all these other things
are at play.


1438
1:2:42,49 --> 1:2:47,68
Also device sharing
is at play.


1439
1:2:47,68 --> 1:2:49,25
So these are all
the challenges.


1440
1:2:49,25 --> 1:2:51,72
And again, I feel like we're
pioneers again, coming back to


1441
1:2:51,72 --> 1:2:54,96
be same feeling that I had
when I started my little


1442
1:2:54,96 --> 1:2:56,62
adventure in the 1990s.


1443
1:2:56,62 --> 1:2:58,2
I feel like we're
about to begin


1444
1:2:58,2 --> 1:3:0,4
on a brand new adventure.


1445
1:3:0,4 --> 1:3:3,39
We're all pioneers in this brand
new industry, having to


1446
1:3:3,39 --> 1:3:7,6
solve roughly similar problems
that we solved many, many,


1447
1:3:7,6 --> 1:3:9,4
many moons ago.


1448
1:3:9,4 --> 1:3:11,48
All of us collectively have
to solve them, but


1449
1:3:11,48 --> 1:3:12,73
in a brand new space.


1450
1:3:12,73 --> 1:3:16,46



1451
1:3:16,46 --> 1:3:23,5
And if we think mobile and media
are it today, the next


1452
1:3:23,5 --> 1:3:25,84
generation of devices
is upon us.


1453
1:3:25,84 --> 1:3:28,59
You got one of these guys.


1454
1:3:28,59 --> 1:3:30,9
We have to worry, how
do you test this?


1455
1:3:30,9 --> 1:3:32,17
It's a whole new challenge.


1456
1:3:32,17 --> 1:3:34,19
The number of inputs that are
available to this particular


1457
1:3:34,19 --> 1:3:35,76
device are enormous.


1458
1:3:35,76 --> 1:3:36,34
Cars.


1459
1:3:36,34 --> 1:3:38,93
How do you test cars with all
their inputs and outputs and


1460
1:3:38,93 --> 1:3:40,84
all the decisions that
they get to make?


1461
1:3:40,84 --> 1:3:44,23
And all the other devices?


1462
1:3:44,23 --> 1:3:50,71
So I'd like to close by saying
all of us are pioneers.


1463
1:3:50,71 --> 1:3:55,11
All of us are in this
adventure together.


1464
1:3:55,11 --> 1:3:57,4
Let's put on our
thinking caps.


1465
1:3:57,4 --> 1:4:0,12
Let's share, let's
collaborate.


1466
1:4:0,12 --> 1:4:1,77
Coffee.


1467
1:4:1,77 --> 1:4:7,8
Beer later, but coffee now, and
figure out what the next


1468
1:4:7,8 --> 1:4:9,4
wave of test engineering is
going to look like for these


1469
1:4:9,4 --> 1:4:13,87
new devices, both for the
media and for the mobile


1470
1:4:13,87 --> 1:4:16,2
devices today, and for the next


1471
1:4:16,2 --> 1:4:17,84
generation devices tomorrow.


1472
1:4:17,84 --> 1:4:20,76
Same sort of adventure that many
of us have gone through


1473
1:4:20,76 --> 1:4:22,23
starting on the desktop.


1474
1:4:22,23 --> 1:4:25,59
Let's take all of our thinking
for the desktop and apply it


1475
1:4:25,59 --> 1:4:27,14
for all this new world.


1476
1:4:27,14 --> 1:4:28,1
Thank you very much.


1477
1:4:28,1 --> 1:4:29,398
I hope you enjoy this
conference.


1478
1:4:29,398 --> 1:4:36,868
[APPLAUSE]


1479
1:4:36,868 --> 1:4:38,22
TONY VOELLM: Wow.


1480
1:4:38,22 --> 1:4:41,14
That was a fantastic, Ari.


1481
1:4:41,14 --> 1:4:42,7
Thank you for that.


1482
1:4:42,7 --> 1:4:44,71
I learned some really important
things in this talk.


1483
1:4:44,71 --> 1:4:48,66
One is Ari is going around
taking pictures of people


1484
1:4:48,66 --> 1:4:49,79
sleeping at their desk.


1485
1:4:49,79 --> 1:4:51,63
You're see that.


1486
1:4:51,63 --> 1:4:52,19
So watch out.


1487
1:4:52,19 --> 1:4:53,65
If you're sleeping, he may
take your picture.


1488
1:4:53,65 --> 1:4:55,84
ARI SHAMASH: But not me.


1489
1:4:55,84 --> 1:4:56,513
I never sleep at my desk.


1490
1:4:56,513 --> 1:5:0,24
TONY VOELLM: And the other thing
I noticed in his graphs


1491
1:5:0,24 --> 1:5:2,83
is there's a quadratic decrease
in productivity at


1492
1:5:2,83 --> 1:5:4,42
Google right around January.


1493
1:5:4,42 --> 1:5:6,57
2 Who would figure this?


1494
1:5:6,57 --> 1:5:8,73
End of December, January.


1495
1:5:8,73 --> 1:5:11,77
So hopefully, all you've got
some really good notes.


1496
1:5:11,77 --> 1:5:13,93
I joke around about these
things, but there are a lot of


1497
1:5:13,93 --> 1:5:17,19
great thoughts in here, and a
lot about the challenges that


1498
1:5:17,19 --> 1:5:20,76
are going to be there going
forward and all the problems


1499
1:5:20,76 --> 1:5:21,68
that we need to solve.


1500
1:5:21,68 --> 1:5:23,77
That's what all of
you are here.


1501
1:5:23,77 --> 1:5:26,88
If you're not spending time
during the breaks talking to


1502
1:5:26,88 --> 1:5:28,68
each other, you're not getting
the most out of this


1503
1:5:28,68 --> 1:5:29,31
opportunity.


1504
1:5:29,31 --> 1:5:31,59
So we really want everybody
here to be talking to


1505
1:5:31,59 --> 1:5:34,3
everybody else, so
please do that.


1506
1:5:34,3 --> 1:5:35,32
Two quick things.


1507
1:5:35,32 --> 1:5:37,82
We have transcribers that
are over in this corner.


1508
1:5:37,82 --> 1:5:40,49
Everybody's done a great job not
standing between where I


1509
1:5:40,49 --> 1:5:42,21
am and over there.


1510
1:5:42,21 --> 1:5:44,9
Just be cognizant, please
don't do that.


1511
1:5:44,9 --> 1:5:47,1
Otherwise they can't get the
transcription correct.


1512
1:5:47,1 --> 1:5:49,56
And we also have somebody
signing over


1513
1:5:49,56 --> 1:5:50,46
here, which is great.


1514
1:5:50,46 --> 1:5:51,53
So thank you.


1515
1:5:51,53 --> 1:5:54,22
Hopefully I just didn't
have some bad word or


1516
1:5:54,22 --> 1:5:54,92
something like that.


1517
1:5:54,92 --> 1:5:55,53
I think that's thank you.


1518
1:5:55,53 --> 1:5:56,95
I grew up near Gallaudet
College, so I


1519
1:5:56,95 --> 1:5:58,49
picked up a few things.


1520
1:5:58,49 --> 1:6:4,1
And with that, we're going to
move on into our next speaker.


1521
1:6:4,1 --> 1:6:7,97
So we have James Waldrop
here from Twitter.


1522
1:6:7,97 --> 1:6:10,98
He tells me that he is
an avid kayaker.


1523
1:6:10,98 --> 1:6:14,76
He likes to kayak at night
mostly because his kids are


1524
1:6:14,76 --> 1:6:17,47
sleeping then, which I can
very much appreciate.


1525
1:6:17,47 --> 1:6:19,61
I get to walk the dog somewhere
around midnight, so


1526
1:6:19,61 --> 1:6:22,48
that's something that we
definitely share in common.


1527
1:6:22,48 --> 1:6:25,56
And even though I'm not going to
explain to you why, if you


1528
1:6:25,56 --> 1:6:27,55
want to go out to moderator, you
should put this question


1529
1:6:27,55 --> 1:6:32,91
in there about why is his
product labeled "Lago?"


1530
1:6:32,91 --> 1:6:34,97
Because he loves this question,
that's what I heard.


1531
1:6:34,97 --> 1:6:39,5
So with that, James, come on up,
and we're excited to hear


1532
1:6:39,5 --> 1:6:41,63
about your talk, Testing
Systems At Scale.


1533
1:6:41,63 --> 1:6:43,1
JAMES WALDROP: Thank you.


1534
1:6:43,1 --> 1:6:48,86
[APPLAUSE]


1535
1:6:48,86 --> 1:6:50,836
JAMES WALDROP: Thanks, Tony.


1536
1:6:50,836 --> 1:6:55,2
Let's see, yes, the product.


1537
1:6:55,2 --> 1:6:56,62
It's really an open
source library.


1538
1:6:56,62 --> 1:7:4,39
I try not to basically say too
much about it, except clearly


1539
1:7:4,39 --> 1:7:6,26
at presentations like this.


1540
1:7:6,26 --> 1:7:11,1
It's actually called Iago, with
an I. The font used for


1541
1:7:11,1 --> 1:7:14,16
these presentations is sans
serif, so please keep that in


1542
1:7:14,16 --> 1:7:19,78
mind as you look at the name
of it, because I constantly


1543
1:7:19,78 --> 1:7:23,52
get questions about Lago, and
people who are clearly using


1544
1:7:23,52 --> 1:7:27,3
sans serif fonts are looking at
this going, OK, that's an


1545
1:7:27,3 --> 1:7:28,7
L. It's not an


1546
1:7:28,7 --> 1:7:31,23
L. It's an I. Anyway.


1547
1:7:31,23 --> 1:7:36,43
So, I joined Twitter about two
years ago, a little more.


1548
1:7:36,43 --> 1:7:40,52
And when I joined Twitter, my
first week we had an outage


1549
1:7:40,52 --> 1:7:44,14
where the site was not
available to users.


1550
1:7:44,14 --> 1:7:47,59
And the experience for
the users was this.


1551
1:7:47,59 --> 1:7:49,5
And this is not a great
experience for your user if


1552
1:7:49,5 --> 1:7:52,82
you care about actually keeping
your service up,


1553
1:7:52,82 --> 1:7:55,59
although it's an amusing
picture.


1554
1:7:55,59 --> 1:7:57,6
People love to make fun of it.


1555
1:7:57,6 --> 1:8:0,32
Clearly, if you're an engineer
who works at Twitter, this is


1556
1:8:0,32 --> 1:8:2,4
a very sad face image.


1557
1:8:2,4 --> 1:8:4,98
You do not want to have this
showing up, and your mother


1558
1:8:4,98 --> 1:8:8,5
calling you and saying, hey,
your system's down.


1559
1:8:8,5 --> 1:8:13,57
So how do we get rid
of the Fail Whale?


1560
1:8:13,57 --> 1:8:15,65
In the last couple years, we've
gone a long way towards


1561
1:8:15,65 --> 1:8:17,59
getting rid of it, and I'm
basically going to talk about


1562
1:8:17,59 --> 1:8:19,83
how we do that at Twitter.


1563
1:8:19,83 --> 1:8:23,83
Specifically, if anybody really
wants to know the


1564
1:8:23,83 --> 1:8:30,569
meaning of it, Fail Whale is
a 502 HTTP response code.


1565
1:8:30,569 --> 1:8:33,435
If it takes more than five
seconds to render your request


1566
1:8:33,435 --> 1:8:36,564
or to respond to your request,
then we will serve you a Fail


1567
1:8:36,564 --> 1:8:37,87
Whale instead.


1568
1:8:37,87 --> 1:8:41,26
And so that gives you an idea
of exactly what's going on


1569
1:8:41,26 --> 1:8:42,479
behind the scenes when
you see that.


1570
1:8:42,479 --> 1:8:44,95
It's not a great story.


1571
1:8:44,95 --> 1:8:46,77
So why the Fail Whale?


1572
1:8:46,77 --> 1:8:50,109



1573
1:8:50,109 --> 1:8:53,6
I'm sure there are quite a lot
of Ruby advocates in the world


1574
1:8:53,6 --> 1:8:58,87
and in this room, and a lot
of the systems at Twitter


1575
1:8:58,87 --> 1:9:1,12
famously were built on
top of Ruby on Rails.


1576
1:9:1,12 --> 1:9:4,439
I'm not going to say anything
bad about Ruby.


1577
1:9:4,439 --> 1:9:8,66
I will say, though, that when
you have a monolithic


1578
1:9:8,66 --> 1:9:13,529
architecture that has all been
written in one big blob of


1579
1:9:13,529 --> 1:9:16,319
code, effectively, then it
becomes very hard to


1580
1:9:16,319 --> 1:9:20,75
effectively manage that code,
both in terms of its


1581
1:9:20,75 --> 1:9:23,12
performance and in terms
of its ability to


1582
1:9:23,12 --> 1:9:24,5
make changes to it.


1583
1:9:24,5 --> 1:9:27,92
So the Ruby world has a lot of
interesting ways to achieve


1584
1:9:27,92 --> 1:9:31,72
performance these days at the
scale that we care about, and


1585
1:9:31,72 --> 1:9:33,54
unfortunately, we really
couldn't do any of them


1586
1:9:33,54 --> 1:9:37,24
because of our monolithic body
of code that wasn't able to be


1587
1:9:37,24 --> 1:9:39,147
iterated on in a
reasonable way.


1588
1:9:39,147 --> 1:9:42,79



1589
1:9:42,79 --> 1:9:45,87
The answer to that, of course,
was to decompose it.


1590
1:9:45,87 --> 1:9:49,14
And so at this point, I think
we have something along the


1591
1:9:49,14 --> 1:9:51,88
order of about 120 services
in production.


1592
1:9:51,88 --> 1:9:54,83
So we've taken this monolithic
body of code over the course


1593
1:9:54,83 --> 1:9:57,88
of the last two years and turned
it into a lot of little


1594
1:9:57,88 --> 1:10:0,7
services which are written in
many different languages,


1595
1:10:0,7 --> 1:10:5,53
including many on the Java
Virtual Machine, Java Scala,


1596
1:10:5,53 --> 1:10:9,46
Closure, and then also some
written in things like Python,


1597
1:10:9,46 --> 1:10:11,94
C++, and still Ruby.


1598
1:10:11,94 --> 1:10:16,39
But now that it's decomposed,
we can make


1599
1:10:16,39 --> 1:10:17,95
changes to it more quickly.


1600
1:10:17,95 --> 1:10:20,78
Our engineering organization
of, hey, I'm going to build


1601
1:10:20,78 --> 1:10:23,53
this particular area of the
product, and you're going to


1602
1:10:23,53 --> 1:10:26,85
build this area over here,
actually is able to work that


1603
1:10:26,85 --> 1:10:29,12
way because they have their
own services that they can


1604
1:10:29,12 --> 1:10:31,73
deploy, and this guy over here
has his own services that he


1605
1:10:31,73 --> 1:10:32,93
can deploy.


1606
1:10:32,93 --> 1:10:35,4
And so they can work relatively
independently of


1607
1:10:35,4 --> 1:10:36,62
each other.


1608
1:10:36,62 --> 1:10:39,88
The problem with this, as
anybody who's maybe gone


1609
1:10:39,88 --> 1:10:43,82
through this or if you think
really fast, you might realize


1610
1:10:43,82 --> 1:10:48,43
that there's an issue here,
which is that as you move from


1611
1:10:48,43 --> 1:10:52,3
this monolithic world to a
service-oriented world,


1612
1:10:52,3 --> 1:10:54,4
testing becomes a
huge problem.


1613
1:10:54,4 --> 1:10:58,92
Because in order to test any
given piece of software to


1614
1:10:58,92 --> 1:11:1,15
find out if it can handle
production load, you need to


1615
1:11:1,15 --> 1:11:2,71
be able to stand up that
whole environment.


1616
1:11:2,71 --> 1:11:5,21
And in the case of Twitter and
in the case of, for instance,


1617
1:11:5,21 --> 1:11:7,96
the previous Talk Google, that's
probably close to if


1618
1:11:7,96 --> 1:11:9,71
not impossible.


1619
1:11:9,71 --> 1:11:13,62
And so how do we test
in this new world?


1620
1:11:13,62 --> 1:11:17,31
How do you test systems at scale
when any one service


1621
1:11:17,31 --> 1:11:19,99
might depend on 20 downstream
services, and they in turn


1622
1:11:19,99 --> 1:11:23,32
depend on another 20 downstream
services.


1623
1:11:23,32 --> 1:11:26,12
In told, if you want to stand up
any front end environment,


1624
1:11:26,12 --> 1:11:28,76
you're probably going to have to
stand up 80 of those 120 or


1625
1:11:28,76 --> 1:11:31,228
whatever number of services
we have in production.


1626
1:11:31,228 --> 1:11:40,27



1627
1:11:40,27 --> 1:11:42,11
The rest of this talk
will be about


1628
1:11:42,11 --> 1:11:44,58
synthetic, artificial load.


1629
1:11:44,58 --> 1:11:49,36
Clearly, I wanted to give kind
of a front page shout out to


1630
1:11:49,36 --> 1:11:53,5
all the other ways that we have
to test performance, but


1631
1:11:53,5 --> 1:11:55,56
I will say that all of them
are in production.


1632
1:11:55,56 --> 1:11:58,32
And I don't know about people in
this room, but personally,


1633
1:11:58,32 --> 1:12:0,99
I feel like if I'm testing it
in production, and my users


1634
1:12:0,99 --> 1:12:3,47
can experience pain or I can
take the system down, let's


1635
1:12:3,47 --> 1:12:6,26
say, in production, then that's
probably too late to be


1636
1:12:6,26 --> 1:12:7,44
testing it.


1637
1:12:7,44 --> 1:12:11,72
And I really want to test it
before any of that can happen.


1638
1:12:11,72 --> 1:12:14,36
But the techniques that we have
to test in production, as


1639
1:12:14,36 --> 1:12:17,46
far as performance goes,
are canaries.


1640
1:12:17,46 --> 1:12:19,84
Canary, if you're not familiar
with the concept, you have a


1641
1:12:19,84 --> 1:12:22,27
cluster of systems that
are handling requests,


1642
1:12:22,27 --> 1:12:23,52
maybe 1,000 of them.


1643
1:12:23,52 --> 1:12:26,62
You deploy your new version of
software to one of them, and


1644
1:12:26,62 --> 1:12:29,66
now it's taking 1% of the
traffic, and you get to see,


1645
1:12:29,66 --> 1:12:32,36
hey, is it getting better
or worse as


1646
1:12:32,36 --> 1:12:34,78
compared to the old system?


1647
1:12:34,78 --> 1:12:37,9
Clearly, though, it's taking
production traffic.


1648
1:12:37,9 --> 1:12:38,17
There's dark traffic.


1649
1:12:38,17 --> 1:12:40,58
This is a little safer.


1650
1:12:40,58 --> 1:12:42,36
It is basically a system--
and we use


1651
1:12:42,36 --> 1:12:43,7
this heavily at Twitter--


1652
1:12:43,7 --> 1:12:46,27



1653
1:12:46,27 --> 1:12:48,2
we have a front end
called TFE.


1654
1:12:48,2 --> 1:12:49,54
Funny name, right?


1655
1:12:49,54 --> 1:12:53,18
TFE will take traffic, and then
if it's configured in


1656
1:12:53,18 --> 1:12:59,41
such a way as to do this, it
will send all of the traffic


1657
1:12:59,41 --> 1:13:2,35
to the normal production
systems, and it will copy,


1658
1:13:2,35 --> 1:13:5,92
send a second request, to a
system that's not stood up yet


1659
1:13:5,92 --> 1:13:9,9
and whose response it's
going to throw away.


1660
1:13:9,9 --> 1:13:11,91
But now users aren't affected
unless, for instance-- this


1661
1:13:11,91 --> 1:13:13,91
has happened, sadly--


1662
1:13:13,91 --> 1:13:18,1
the system that it's sending the
traffic to doesn't respond


1663
1:13:18,1 --> 1:13:20,36
in a reasonable amount of
time, and TFE isn't


1664
1:13:20,36 --> 1:13:22,37
necessarily configured
correctly in


1665
1:13:22,37 --> 1:13:23,29
order to handle that.


1666
1:13:23,29 --> 1:13:25,84
Let's say, pretend that this
might not have happened six


1667
1:13:25,84 --> 1:13:28,77
months ago.


1668
1:13:28,77 --> 1:13:33,82
And lo and behold, you have an
outage caused by dark traffic.


1669
1:13:33,82 --> 1:13:36,7
And then the final one is more
interesting to people who are


1670
1:13:36,7 --> 1:13:38,1
doing functional testing.


1671
1:13:38,1 --> 1:13:43,295
Tap compare is the ability to
do a dark traffic read or a


1672
1:13:43,295 --> 1:13:45,98
dark traffic write, like I just
described, but compare


1673
1:13:45,98 --> 1:13:48,63
the results and make sure that
the software you're about to


1674
1:13:48,63 --> 1:13:52,44
stand up actually sends the same
content as the software


1675
1:13:52,44 --> 1:13:54,59
that you have in production
today.


1676
1:13:54,59 --> 1:13:56,71
And with that said, I'm not
going to talk anymore about


1677
1:13:56,71 --> 1:13:57,55
testing in production.


1678
1:13:57,55 --> 1:14:2,7
Well, I will, but only in
a scary, inappropriate


1679
1:14:2,7 --> 1:14:3,32
way, but it's fun.


1680
1:14:3,32 --> 1:14:5,82



1681
1:14:5,82 --> 1:14:7,44
So what did I do?


1682
1:14:7,44 --> 1:14:11,63
I joined, like I said,
two years ago.


1683
1:14:11,63 --> 1:14:13,91
I was in the Performance
Engineering Group at


1684
1:14:13,91 --> 1:14:14,73
Salesforce.


1685
1:14:14,73 --> 1:14:17,7
I came to Twitter specifically
to try to solve this problem


1686
1:14:17,7 --> 1:14:20,755
as far as performance goes, and
I wrote a load generator.


1687
1:14:20,755 --> 1:14:23,95
A load generator internally
is called Parrot.


1688
1:14:23,95 --> 1:14:26,71
It turns out, though, that
there are any number of


1689
1:14:26,71 --> 1:14:29,83
trademarks associated with
Parrot, including most


1690
1:14:29,83 --> 1:14:31,96
unfortunately the Parrot
VM that Perl


1691
1:14:31,96 --> 1:14:33,21
6 will run on someday.


1692
1:14:33,21 --> 1:14:36,17



1693
1:14:36,17 --> 1:14:38,48
When we open sourced it, I
couldn't call it Parrot, so


1694
1:14:38,48 --> 1:14:40,14
it's called Iago.


1695
1:14:40,14 --> 1:14:43,65
I actually had no idea that Iago
was this bird that you


1696
1:14:43,65 --> 1:14:44,79
see up here.


1697
1:14:44,79 --> 1:14:48,47
I'm too old to have
seen "Aladdin." I


1698
1:14:48,47 --> 1:14:49,31
crowd sourced the name.


1699
1:14:49,31 --> 1:14:50,76
I said I can't call
it Parrot, guys.


1700
1:14:50,76 --> 1:14:52,1
What should I call it?


1701
1:14:52,1 --> 1:14:55,2
A bunch of people wrote back,
and the one that got the most


1702
1:14:55,2 --> 1:14:55,81
votes was Iago.


1703
1:14:55,81 --> 1:14:57,54
I'm like, Shakespeare?


1704
1:14:57,54 --> 1:14:59,72
I don't get it, but OK.


1705
1:14:59,72 --> 1:15:1,76
Sure, it got a lot of votes,
and then I found out it was


1706
1:15:1,76 --> 1:15:3,1
"Aladdin."


1707
1:15:3,1 --> 1:15:5,71



1708
1:15:5,71 --> 1:15:7,47
So why did I need to write
a load generator?


1709
1:15:7,47 --> 1:15:8,8
There are a lot of load
generators out here.


1710
1:15:8,8 --> 1:15:10,47
I've used most of--


1711
1:15:10,47 --> 1:15:12,12
I'm not going to say all of
them, but I've used a lot of


1712
1:15:12,12 --> 1:15:14,38
load generators in
my lifetime.


1713
1:15:14,38 --> 1:15:15,35
I've used JMeter.


1714
1:15:15,35 --> 1:15:16,26
I've used LoadRunner.


1715
1:15:16,26 --> 1:15:17,27
I've used ab.


1716
1:15:17,27 --> 1:15:20,24
I've used Flood.


1717
1:15:20,24 --> 1:15:21,79
I'm not going to go through the
full list, but I've used a


1718
1:15:21,79 --> 1:15:22,39
lot of them.


1719
1:15:22,39 --> 1:15:24,21
So why did I feel
like I needed to


1720
1:15:24,21 --> 1:15:26,19
write a new load generator?


1721
1:15:26,19 --> 1:15:30,46
First of all, a lot of coded
Twitter is written in Scala.


1722
1:15:30,46 --> 1:15:31,51
I wanted learn Scala.


1723
1:15:31,51 --> 1:15:34,12
I had written some toy
projects in it.


1724
1:15:34,12 --> 1:15:35,4
And so I was like, hey, wait.


1725
1:15:35,4 --> 1:15:37,44
What's the best way to
learn a language?


1726
1:15:37,44 --> 1:15:40,13
You write some piece of code
that you already know how to


1727
1:15:40,13 --> 1:15:41,9
write in this new language.


1728
1:15:41,9 --> 1:15:42,55
That'll be great.


1729
1:15:42,55 --> 1:15:44,84
Sure, that's an awesome reason
to invent a new load


1730
1:15:44,84 --> 1:15:47,11
generator, right?


1731
1:15:47,11 --> 1:15:49,57
Another reason is that, you
know, do you ever get this


1732
1:15:49,57 --> 1:15:52,23
sort of thing like if I'm not
actually doing engineering


1733
1:15:52,23 --> 1:15:54,0
that the other engineers
won't respect me.


1734
1:15:54,0 --> 1:15:56,57
So it's like if I just bring
in JMeter or I bring in


1735
1:15:56,57 --> 1:15:58,23
LoadRunner, and I start running
load against their


1736
1:15:58,23 --> 1:16:1,14
system, I'm not going to get
nearly as much credit or


1737
1:16:1,14 --> 1:16:4,62
respect in the organization as
if I wrote my own, right?


1738
1:16:4,62 --> 1:16:4,96
[LAUGHTER]


1739
1:16:4,96 --> 1:16:7,83
JAMES WALDROP: So, yeah.


1740
1:16:7,83 --> 1:16:8,42
Another reason.


1741
1:16:8,42 --> 1:16:9,95
Hey, all those other
load generators,


1742
1:16:9,95 --> 1:16:12,94
sorry, guys, you suck.


1743
1:16:12,94 --> 1:16:16,9
There's really no reason
to use any of them.


1744
1:16:16,9 --> 1:16:21,12
They're all bad, clearly.


1745
1:16:21,12 --> 1:16:22,69
I hope the answer is obvious.


1746
1:16:22,69 --> 1:16:25,4
None of the above.


1747
1:16:25,4 --> 1:16:31,18
But when it comes to load
generators, I have done this


1748
1:16:31,18 --> 1:16:33,2
three times before
I got to Twitter,


1749
1:16:33,2 --> 1:16:33,99
and then did a fourth.


1750
1:16:33,99 --> 1:16:35,96
And I open sourced it,
so hopefully I never


1751
1:16:35,96 --> 1:16:37,89
have to do it again.


1752
1:16:37,89 --> 1:16:42,27
But I really want load
generation to be simple, and I


1753
1:16:42,27 --> 1:16:44,41
have a lot of experience
when it's not


1754
1:16:44,41 --> 1:16:46,26
simple of what happens.


1755
1:16:46,26 --> 1:16:49,28
And what happens is that you
end up with very large


1756
1:16:49,28 --> 1:16:51,41
performance engineering teams,
and they're very


1757
1:16:51,41 --> 1:16:52,29
hard to hire onto.


1758
1:16:52,29 --> 1:16:54,9
It's a very specialized skill.


1759
1:16:54,9 --> 1:16:56,51
And so you're sitting there
constantly trying to scramble


1760
1:16:56,51 --> 1:16:58,41
and figure out is it
going to scale?


1761
1:16:58,41 --> 1:16:59,14
Is it going to scale?


1762
1:16:59,14 --> 1:17:0,81
And you don't have people
to answer the question


1763
1:17:0,81 --> 1:17:2,64
why or if it will.


1764
1:17:2,64 --> 1:17:4,7
And you don't have enough people
to answer the question


1765
1:17:4,7 --> 1:17:7,16
why won't it when it doesn't.


1766
1:17:7,16 --> 1:17:11,43
So if you're an engineer, as
I've been, and you want to


1767
1:17:11,43 --> 1:17:15,0
answer this question, will my
new service, new whatever,


1768
1:17:15,0 --> 1:17:18,71
feature, gizmo that I'm about
to ship to production, is it


1769
1:17:18,71 --> 1:17:19,29
going to scale?


1770
1:17:19,29 --> 1:17:22,3
Can it handle a million QPS?


1771
1:17:22,3 --> 1:17:23,6
How do you go out and do that?


1772
1:17:23,6 --> 1:17:26,2
You sit down in front
of your computer.


1773
1:17:26,2 --> 1:17:28,38
You're an engineer,
and guess what?


1774
1:17:28,38 --> 1:17:30,1
You write a for loop.


1775
1:17:30,1 --> 1:17:31,33
Right?


1776
1:17:31,33 --> 1:17:34,69
So a for loop-- if anybody's not
ever written one, I really


1777
1:17:34,69 --> 1:17:36,45
hope that all of you have--


1778
1:17:36,45 --> 1:17:38,63
sits there.


1779
1:17:38,63 --> 1:17:39,5
You write a for loop.


1780
1:17:39,5 --> 1:17:40,53
Let's see, I think I
have a piece of it.


1781
1:17:40,53 --> 1:17:42,6
Yep, there we go.


1782
1:17:42,6 --> 1:17:43,25
So that's a for loop.


1783
1:17:43,25 --> 1:17:45,39
We're going to start up 100
threads, and we're going to


1784
1:17:45,39 --> 1:17:49,515
make requests as fast as we can
against whatever service


1785
1:17:49,515 --> 1:17:50,57
it is that we have stood up.


1786
1:17:50,57 --> 1:17:53,93
And apologies, this was not code
reviewed, so it may not


1787
1:17:53,93 --> 1:17:58,18
be actually compiling, but it's
my sort of theoretical,


1788
1:17:58,18 --> 1:18:0,49
abstract for loop.


1789
1:18:0,49 --> 1:18:4,22
And any load generator that
you're going to use had


1790
1:18:4,22 --> 1:18:7,55
probably better be able to
be better than this.


1791
1:18:7,55 --> 1:18:9,9
If it's not better than this,
then the engineer is just


1792
1:18:9,9 --> 1:18:11,85
going to sit down, and they're
going to do it themselves,


1793
1:18:11,85 --> 1:18:14,82
because this takes five minutes
to write, if that.


1794
1:18:14,82 --> 1:18:19,6
So that is if you're writing a
load generator or you're in


1795
1:18:19,6 --> 1:18:24,94
that business, you had better
outperform the for loop.


1796
1:18:24,94 --> 1:18:27,34
Unfortunately, though, at least
if you're an engineer,


1797
1:18:27,34 --> 1:18:29,7
the for loop is really
appealing.


1798
1:18:29,7 --> 1:18:35,38
And if you're, say, JMeter, and
all of your configuration


1799
1:18:35,38 --> 1:18:38,59
is either via XML if you want to
do it that way, which most


1800
1:18:38,59 --> 1:18:41,96
people don't, or it's a GUI that
looks like it beamed in


1801
1:18:41,96 --> 1:18:47,83
from the late '80s, and if your
load runner is a GUI that


1802
1:18:47,83 --> 1:18:50,45
happens to be really unstable
and can't do automated testing


1803
1:18:50,45 --> 1:18:53,45
at all, or if you're ab, it's
something that's completely


1804
1:18:53,45 --> 1:18:57,35
not configurable at all.


1805
1:18:57,35 --> 1:18:59,13
I'm sorry to bash
on Jamie here.


1806
1:18:59,13 --> 1:19:1,54
I'm sure a lot of people
here have used it.


1807
1:19:1,54 --> 1:19:4,83
It takes forever to actually
write a load test in JMeter.


1808
1:19:4,83 --> 1:19:6,93
And if you want to do anything
interesting at all, you're


1809
1:19:6,93 --> 1:19:7,99
going to be writing a plug-in.


1810
1:19:7,99 --> 1:19:10,49
And I have done that, and let me
tell you, I do not wish it


1811
1:19:10,49 --> 1:19:11,83
on anybody.


1812
1:19:11,83 --> 1:19:15,29
And so it would be really nice
if whatever this load


1813
1:19:15,29 --> 1:19:17,58
generator was was really easy to
write new things in, it has


1814
1:19:17,58 --> 1:19:19,715
to be extensible.


1815
1:19:19,715 --> 1:19:24,91
A for loop actually satisfies
all of those constraints.


1816
1:19:24,91 --> 1:19:26,92
But the for loop
has a problem.


1817
1:19:26,92 --> 1:19:29,82
It turns out that it's actually
quite wrong as far as


1818
1:19:29,82 --> 1:19:32,56
testing performance
of your code.


1819
1:19:32,56 --> 1:19:36,44
It will give you nice, warm,
fuzzy answers of I can handle


1820
1:19:36,44 --> 1:19:37,51
40,000 QPS.


1821
1:19:37,51 --> 1:19:39,84
Woo hoo, look at me and my
product and my service.


1822
1:19:39,84 --> 1:19:41,49
It scales really well.


1823
1:19:41,49 --> 1:19:43,41
But it turns out that that has
nothing to do with what's


1824
1:19:43,41 --> 1:19:47,5
actually going to happen to it
when you get into production.


1825
1:19:47,5 --> 1:19:48,82
Why is that?


1826
1:19:48,82 --> 1:19:50,95
So let me talk about some
systems theory.


1827
1:19:50,95 --> 1:19:53,5
Sorry to be academic
for a second.


1828
1:19:53,5 --> 1:19:54,76
Does anybody here know
Little's Law?


1829
1:19:54,76 --> 1:19:57,43
Raise your hand if you
know Little's Law.


1830
1:19:57,43 --> 1:19:57,7
Awesome.


1831
1:19:57,7 --> 1:19:59,9
Nobody here knows
Little's Law.


1832
1:19:59,9 --> 1:20:1,33
I'm glad I put this slide in.


1833
1:20:1,33 --> 1:20:4,18
Little's Law is a really awesome
mathematical result in


1834
1:20:4,18 --> 1:20:8,93
queuing theory that says that
if you have a service and


1835
1:20:8,93 --> 1:20:11,93
requests are arriving at a
particular rate, the number of


1836
1:20:11,93 --> 1:20:14,39
concurrent users or concurrent
requests that that service


1837
1:20:14,39 --> 1:20:17,66
will be able to handle can be
found by saying what is the


1838
1:20:17,66 --> 1:20:20,23
request rate, and what is the
latency or what is the time it


1839
1:20:20,23 --> 1:20:22,66
takes to service that
particular request?


1840
1:20:22,66 --> 1:20:26,71
And that it might sound
intuitive, and it is if you


1841
1:20:26,71 --> 1:20:27,22
think about it.


1842
1:20:27,22 --> 1:20:29,7
Like, hey, if I have 100
requests a second, and it


1843
1:20:29,7 --> 1:20:34,14
takes a second to satisfy that
request, then I will have 100


1844
1:20:34,14 --> 1:20:35,26
requests concurrently, right?


1845
1:20:35,26 --> 1:20:36,91
It's simple math.


1846
1:20:36,91 --> 1:20:41,37
But it turns out that the math
behind that is actually pretty


1847
1:20:41,37 --> 1:20:44,72
hard to derive, and it's awesome
that it's such a


1848
1:20:44,72 --> 1:20:46,64
simple result.


1849
1:20:46,64 --> 1:20:49,26
But really, it's just math,
so why do we care?


1850
1:20:49,26 --> 1:20:52,8
What does Little's Law have
to with a for loop?


1851
1:20:52,8 --> 1:20:56,74
Well, if you are a performance
engineer, you very much want


1852
1:20:56,74 --> 1:20:59,58
to change one thing at a time
about your system so that you


1853
1:20:59,58 --> 1:21:3,69
can know for sure that the
performance impact that you


1854
1:21:3,69 --> 1:21:6,72
are experiencing is because
of that change.


1855
1:21:6,72 --> 1:21:8,22
Flaky tests were mentioned
earlier.


1856
1:21:8,22 --> 1:21:10,54
Flaky tests are the bane of
performance engineers because


1857
1:21:10,54 --> 1:21:11,52
you never get one answer.


1858
1:21:11,52 --> 1:21:13,33
You always get a range
of answers whenever


1859
1:21:13,33 --> 1:21:14,75
you run these tests.


1860
1:21:14,75 --> 1:21:17,1
And so it's really important
that you be able to change


1861
1:21:17,1 --> 1:21:19,42
something, try it again, change
something, try it


1862
1:21:19,42 --> 1:21:22,11
again, and get results
you can count on.


1863
1:21:22,11 --> 1:21:26,23
But Little's Law actually makes
that very hard to do


1864
1:21:26,23 --> 1:21:28,93
that on a system which is
specified in terms of


1865
1:21:28,93 --> 1:21:30,71
concurrent users.


1866
1:21:30,71 --> 1:21:33,65
So open versus closed systems.


1867
1:21:33,65 --> 1:21:36,61



1868
1:21:36,61 --> 1:21:39,33
Basically, an open system--


1869
1:21:39,33 --> 1:21:45,97
and again, I'm not talking about
open source, like APIs


1870
1:21:45,97 --> 1:21:47,68
or anything like, that this
is systems theory--


1871
1:21:47,68 --> 1:21:49,95
an open system is a system
where requests and arrive


1872
1:21:49,95 --> 1:21:52,48
independent of your ability
to service them.


1873
1:21:52,48 --> 1:21:54,8
So in other words, an open
systems is what you get when


1874
1:21:54,8 --> 1:21:58,83
you put your service on the
internet where your users, as


1875
1:21:58,83 --> 1:22:1,91
much as you wish they would, do
not care that you're slow


1876
1:22:1,91 --> 1:22:4,17
right now, or that there's a
big spike, or the Michael


1877
1:22:4,17 --> 1:22:5,58
Jackson just died.


1878
1:22:5,58 --> 1:22:7,59
They're going to send you
requests, whether that's


1879
1:22:7,59 --> 1:22:11,5
tweets or trying to retweet,
regardless of your ability to


1880
1:22:11,5 --> 1:22:12,12
actually handled them.


1881
1:22:12,12 --> 1:22:15,46
A closed system is much
nicer to model.


1882
1:22:15,46 --> 1:22:18,45
If you can imagine, probably the
best example I can think


1883
1:22:18,45 --> 1:22:22,9
of is a call center where you
sit there on the phone with


1884
1:22:22,9 --> 1:22:24,25
the poor person who's sitting
in front of the computer.


1885
1:22:24,25 --> 1:22:28,22
There are only 500 agents, so
that's the concurrency right


1886
1:22:28,22 --> 1:22:29,7
there, 500.


1887
1:22:29,7 --> 1:22:31,42
And they sit there and say,
I'm sorry, the system


1888
1:22:31,42 --> 1:22:32,52
is slow right now.


1889
1:22:32,52 --> 1:22:34,75
I'm waiting for your
data the load.


1890
1:22:34,75 --> 1:22:35,62
That's a closed system.


1891
1:22:35,62 --> 1:22:38,5
It's awesome because you can
just say, all right, I need to


1892
1:22:38,5 --> 1:22:39,34
be able to send 500 threads.


1893
1:22:39,34 --> 1:22:40,99
JMeter can model that
quite well.


1894
1:22:40,99 --> 1:22:43,36
But in a in the real world,
we model things with


1895
1:22:43,36 --> 1:22:45,15
requests per second.


1896
1:22:45,15 --> 1:22:48,82
And that concurrency is equal to
latency times request rate.


1897
1:22:48,82 --> 1:22:51,33
We need to model request
rate, not concurrency.


1898
1:22:51,33 --> 1:22:55,32



1899
1:22:55,32 --> 1:22:57,5
One more thing.


1900
1:22:57,5 --> 1:23:0,65
JMeter and almost every other
load generator I've used by


1901
1:23:0,65 --> 1:23:4,19
default will speak HTTP,
which is fine if


1902
1:23:4,19 --> 1:23:5,4
you have a web service.


1903
1:23:5,4 --> 1:23:7,51
Clearly, Twitter is a web
service, so why isn't that


1904
1:23:7,51 --> 1:23:8,94
sufficient?


1905
1:23:8,94 --> 1:23:11,61
Well, it turns out that
when you build a big


1906
1:23:11,61 --> 1:23:13,73
service-oriented architecture,
you're probably not speaking


1907
1:23:13,73 --> 1:23:15,11
HTTP on the back end.


1908
1:23:15,11 --> 1:23:17,0
At Twitter, we're
talking thrift.


1909
1:23:17,0 --> 1:23:20,55
Thrift is a wire format that
is similar protobuf, which


1910
1:23:20,55 --> 1:23:22,47
many of you are probably
familiar with if you're not


1911
1:23:22,47 --> 1:23:24,59
familiar with thrift.


1912
1:23:24,59 --> 1:23:27,51
And you have to be able to talk
thrift if you're going to


1913
1:23:27,51 --> 1:23:31,3
be able to test systems in
isolation, because like I


1914
1:23:31,3 --> 1:23:34,25
said, you can't stand up the
whole service of Twitter, all


1915
1:23:34,25 --> 1:23:37,77
120 of them, and then send some
HTTP requests in order to


1916
1:23:37,77 --> 1:23:42,65
make something happen way down
10 systems deep so that you


1917
1:23:42,65 --> 1:23:45,39
can find out whether or not
you can handle the load.


1918
1:23:45,39 --> 1:23:47,79
So you need to really be able
to test components, not just


1919
1:23:47,79 --> 1:23:50,32
the whole system.


1920
1:23:50,32 --> 1:23:53,26
Supporting thrift is really,
really tricky.


1921
1:23:53,26 --> 1:24:1,19
It turns out that in thrift, you
codegen your protocol, and


1922
1:24:1,19 --> 1:24:3,47
you typically do that
at compile time.


1923
1:24:3,47 --> 1:24:6,53
So when you're building your
system, you have bound it to a


1924
1:24:6,53 --> 1:24:10,96
particular RPC by the
act of building it.


1925
1:24:10,96 --> 1:24:15,36
And that means, then, that all
of your data objects are there


1926
1:24:15,36 --> 1:24:20,66
at compile time, and if your
imagining a world like JMeter,


1927
1:24:20,66 --> 1:24:23,22
then it means that my load
generator is suddenly going to


1928
1:24:23,22 --> 1:24:27,61
have to know not only your
protocol, which is tricky in


1929
1:24:27,61 --> 1:24:30,75
and of itself, but also going
to have to have all of your


1930
1:24:30,75 --> 1:24:31,68
codegen stuff.


1931
1:24:31,68 --> 1:24:34,56
Which means that if you think
about it, there's 120 systems


1932
1:24:34,56 --> 1:24:38,4
at Twitter, so that means that
now my load generator code is


1933
1:24:38,4 --> 1:24:42,68
dependent on all 120 thrift
interfaces that they expose.


1934
1:24:42,68 --> 1:24:45,27
And I've open sourced it, so now
it's dependent on anything


1935
1:24:45,27 --> 1:24:48,8
anybody can ever do, which
is clearly impossible.


1936
1:24:48,8 --> 1:24:53,2
So I had to change the mental
model of how this works in


1937
1:24:53,2 --> 1:24:56,72
order to satisfy that need
to support thrift.


1938
1:24:56,72 --> 1:24:58,79
HTTP, you don't have any
of those problems.


1939
1:24:58,79 --> 1:25:0,85
HTTP is a very well-defined
protocol--


1940
1:25:0,85 --> 1:25:4,9
cookies, headers, post,
different kinds of requests--


1941
1:25:4,9 --> 1:25:10,4
but very well-specified, and
other than HTTP 2.0, nobody's


1942
1:25:10,4 --> 1:25:14,3
going to invent a new kind of
HTTP that you need to support


1943
1:25:14,3 --> 1:25:16,35
in order to make your
load generator work.


1944
1:25:16,35 --> 1:25:19,29
But thrift is a lot harder.


1945
1:25:19,29 --> 1:25:24,68
So I had to flip the model in
terms of the load generator.


1946
1:25:24,68 --> 1:25:28,73
So in the JMeter and any other
system-- you might use world--


1947
1:25:28,73 --> 1:25:31,78
the dependency is
on the system.


1948
1:25:31,78 --> 1:25:35,37
Instead, I flipped that, and the
dependency now goes from


1949
1:25:35,37 --> 1:25:38,13
the system to the load
generation library.


1950
1:25:38,13 --> 1:25:42,67
And so when I got up here, I
talked about the fact that


1951
1:25:42,67 --> 1:25:44,14
Iago is a library.


1952
1:25:44,14 --> 1:25:47,16
It's not a product per se.


1953
1:25:47,16 --> 1:25:48,78
It is a load generating
library.


1954
1:25:48,78 --> 1:25:52,64
You depend on it just like you
depend on any artifact, and


1955
1:25:52,64 --> 1:25:57,14
what it gives you is enough
stuff that allows you to write


1956
1:25:57,14 --> 1:25:59,64
to an interface, which allows
you to implement your


1957
1:25:59,64 --> 1:26:0,68
particular load test.


1958
1:26:0,68 --> 1:26:3,32
And I'll show you some examples
here in a minute.


1959
1:26:3,32 --> 1:26:4,93
And you write to
that interface.


1960
1:26:4,93 --> 1:26:7,32
And then you launch
it, and it ships.


1961
1:26:7,32 --> 1:26:11,9
With that dependency
comes enough--


1962
1:26:11,9 --> 1:26:13,2
like, jar, blah, blah, blah--


1963
1:26:13,2 --> 1:26:15,16
comes along and then allows
you to launch it.


1964
1:26:15,16 --> 1:26:17,3
It comes with, effectively,
an execution


1965
1:26:17,3 --> 1:26:20,16
environment along with it.


1966
1:26:20,16 --> 1:26:25,46
Secondly, so not only is Iago
different in that it flips the


1967
1:26:25,46 --> 1:26:28,8
dependency model on its head,
it also uses Finagle.


1968
1:26:28,8 --> 1:26:31,99
If anybody has used Finagle,
then you're probably like yay,


1969
1:26:31,99 --> 1:26:33,94
cool, Finagle's awesome.


1970
1:26:33,94 --> 1:26:36,6
I'm assuming that's
not most of you.


1971
1:26:36,6 --> 1:26:38,8
Finagle is a Scala
library that we


1972
1:26:38,8 --> 1:26:39,9
use heavily at Twitter.


1973
1:26:39,9 --> 1:26:40,66
It's open sourced.


1974
1:26:40,66 --> 1:26:41,85
We wrote it.


1975
1:26:41,85 --> 1:26:43,7
And a lot of people
are using it.


1976
1:26:43,7 --> 1:26:47,2
And it allows us to do
asynchronous RPCs


1977
1:26:47,2 --> 1:26:48,55
over Thrift or HTTP.


1978
1:26:48,55 --> 1:26:50,28
Really, name your protocol.


1979
1:26:50,28 --> 1:26:51,74
MySQL was recently added.


1980
1:26:51,74 --> 1:26:54,33
And we have a Google Summer of
Code-- shout out to the folks


1981
1:26:54,33 --> 1:26:55,95
who organized that--


1982
1:26:55,95 --> 1:26:58,77
Google Summer of Code project
this year for adding Zookeeper


1983
1:26:58,77 --> 1:26:59,83
support, for instance.


1984
1:26:59,83 --> 1:27:3,89
So chances are that if it
doesn't support what you need


1985
1:27:3,89 --> 1:27:8,5
to do it, it probably will be
there or is easy to write.


1986
1:27:8,5 --> 1:27:11,1
Finagle, because it's
asynchronous, solves our open


1987
1:27:11,1 --> 1:27:12,9
system versus closed
system conundrum


1988
1:27:12,9 --> 1:27:14,15
that I described earlier.


1989
1:27:14,15 --> 1:27:17,78



1990
1:27:17,78 --> 1:27:22,0
It's based on Netty, which in
turn is based on Java NIO.


1991
1:27:22,0 --> 1:27:24,76
So if you have an asynch world
like that, you can basically


1992
1:27:24,76 --> 1:27:27,42
say hey, I needed a request to
arrive every millisecond.


1993
1:27:27,42 --> 1:27:31,8
Let's say that my arrival
rate is 1,000 RPS.


1994
1:27:31,8 --> 1:27:34,57
So I need a request to arrive
roughly, if I had a uniform


1995
1:27:34,57 --> 1:27:37,33
distribution, every
millisecond.


1996
1:27:37,33 --> 1:27:37,93
OK, great.


1997
1:27:37,93 --> 1:27:39,37
I'm going to send a request
every millisecond.


1998
1:27:39,37 --> 1:27:41,26
I'm not going to have a
thread per request.


1999
1:27:41,26 --> 1:27:44,35
I'm not going to care how slow
or fast your system is.


2000
1:27:44,35 --> 1:27:47,41
A request will be sent and will
arrive every millisecond.


2001
1:27:47,41 --> 1:27:49,22
If your system is down,
then I'm going to get


2002
1:27:49,22 --> 1:27:50,37
a connection refused.


2003
1:27:50,37 --> 1:27:52,4
If your system is up but slow,
then there's going to be a


2004
1:27:52,4 --> 1:27:54,33
socket held open for certain
amount of time.


2005
1:27:54,33 --> 1:27:57,16
But the resource constraints
on my test system are not


2006
1:27:57,16 --> 1:28:0,33
going to interact with the
resource constraints or the


2007
1:28:0,33 --> 1:28:2,48
problems that you might
have on your service.


2008
1:28:2,48 --> 1:28:5,62
That kind of coupling is death
to a performance test.


2009
1:28:5,62 --> 1:28:9,19
If you get your system under
test coupled with your Load


2010
1:28:9,19 --> 1:28:12,27
Generator, then you've created a
closed system, and you're no


2011
1:28:12,27 --> 1:28:15,7
longer modeling reality, at
least modeling reality for


2012
1:28:15,7 --> 1:28:17,22
most of us here.


2013
1:28:17,22 --> 1:28:21,3
Clearly, I described a case
where somebody could create a


2014
1:28:21,3 --> 1:28:22,22
closed system.


2015
1:28:22,22 --> 1:28:23,93
But for the most part, I
believe everybody here


2016
1:28:23,93 --> 1:28:25,95
probably works at
internet scale.


2017
1:28:25,95 --> 1:28:28,48
And therefore you are all
needing a model open systems.


2018
1:28:28,48 --> 1:28:31,19
And so you need something where
it's going to generate


2019
1:28:31,19 --> 1:28:34,7
those requests regardless of how
slow or fast the service


2020
1:28:34,7 --> 1:28:35,55
is at this particular build.


2021
1:28:35,55 --> 1:28:38,9



2022
1:28:38,9 --> 1:28:41,39
So that's all cool.


2023
1:28:41,39 --> 1:28:43,13
But what's it mean?


2024
1:28:43,13 --> 1:28:45,13
So I mentioned that I'm going
to get some code.


2025
1:28:45,13 --> 1:28:47,5
I'm actually moving faster
than I expected.


2026
1:28:47,5 --> 1:28:49,44
Maybe I should slow down.


2027
1:28:49,44 --> 1:28:51,5
So we'll have a lot of time
to look at the code.


2028
1:28:51,5 --> 1:28:55,56
But there are some implications
about this model


2029
1:28:55,56 --> 1:28:58,47
of hey, here's a library,
you depend on it.


2030
1:28:58,47 --> 1:29:0,96
You write your load test
using this library.


2031
1:29:0,96 --> 1:29:2,46
And then you just launch
it, and it runs,


2032
1:29:2,46 --> 1:29:4,57
and it's all good.


2033
1:29:4,57 --> 1:29:8,84
For me, the most important
thing--


2034
1:29:8,84 --> 1:29:14,47
I came from a team at my last
company where, when I left, I


2035
1:29:14,47 --> 1:29:17,3
think there were 15 performance
engineers.


2036
1:29:17,3 --> 1:29:21,53
And now I've heard over the last
two years and change, the


2037
1:29:21,53 --> 1:29:24,95
team is now something like
50 performance engineers.


2038
1:29:24,95 --> 1:29:28,97
And their job is to write
performance tests.


2039
1:29:28,97 --> 1:29:31,1
And that's what they do.


2040
1:29:31,1 --> 1:29:35,63
And as the engineering team
grows there, they have to hire


2041
1:29:35,63 --> 1:29:38,12
more performance engineers
in order to performance


2042
1:29:38,12 --> 1:29:40,26
test all the stuff.


2043
1:29:40,26 --> 1:29:44,32
I think that that model is very
hard to make successful.


2044
1:29:44,32 --> 1:29:47,13
Especially when I started at
Twitter, the company was quite


2045
1:29:47,13 --> 1:29:47,76
a bit smaller.


2046
1:29:47,76 --> 1:29:51,94
I think there were roughly
200 engineers at


2047
1:29:51,94 --> 1:29:53,55
Twitter when I started.


2048
1:29:53,55 --> 1:29:56,8
I wasn't going to be able to go
and performance test every


2049
1:29:56,8 --> 1:29:57,18
single person's thing.


2050
1:29:57,18 --> 1:29:58,69
They were all moving
really fast.


2051
1:29:58,69 --> 1:30:1,68
Way faster than I could
move just by myself.


2052
1:30:1,68 --> 1:30:4,53
And I wasn't going to go
out and hire another 19


2053
1:30:4,53 --> 1:30:8,78
performance engineers really
quick and say, OK, great, now


2054
1:30:8,78 --> 1:30:10,44
we're going to be able
to test your stuff.


2055
1:30:10,44 --> 1:30:12,97
And oh by the way, today we're
something like 900 engineers,


2056
1:30:12,97 --> 1:30:15,93
which is the size of actually
just Google's testing, but


2057
1:30:15,93 --> 1:30:18,83
never mind.


2058
1:30:18,83 --> 1:30:21,96
So now I would need 90
performance engineers, or


2059
1:30:21,96 --> 1:30:22,95
whatever the ratio is.


2060
1:30:22,95 --> 1:30:25,89
Let's say it's 5%, and
I'd need 45 or so.


2061
1:30:25,89 --> 1:30:28,66
And you can project out to
infinity and realize that, in


2062
1:30:28,66 --> 1:30:31,16
fact, this is probably not going
to scale, because there


2063
1:30:31,16 --> 1:30:34,46
aren't that many performance
engineers on the planet.


2064
1:30:34,46 --> 1:30:36,68
And so it's really important
to me that if you're an


2065
1:30:36,68 --> 1:30:38,91
engineer and you're building a
service, that you be able to


2066
1:30:38,91 --> 1:30:40,45
write your own performance
test.


2067
1:30:40,45 --> 1:30:43,5
Not that you can go and learn
JMeter or not that to force


2068
1:30:43,5 --> 1:30:46,39
you to go and, God forbid,
and use LoadRunner.


2069
1:30:46,39 --> 1:30:48,85
But that you actually can just
write some code, like you


2070
1:30:48,85 --> 1:30:50,91
would write your for loop,
and write your


2071
1:30:50,91 --> 1:30:51,67
own performance test.


2072
1:30:51,67 --> 1:30:54,49
So that's a clear implication
of this dependency model


2073
1:30:54,49 --> 1:30:57,77
switch is that you're no longer
working in a world


2074
1:30:57,77 --> 1:31:1,21
where most of the domain
expertise is something that's


2075
1:31:1,21 --> 1:31:2,34
unfamiliar to you.


2076
1:31:2,34 --> 1:31:4,95
You're working in a world
where it's your service.


2077
1:31:4,95 --> 1:31:7,23
You probably already wrote a
sample client when you wrote


2078
1:31:7,23 --> 1:31:9,72
your service, and you just
use that same code to


2079
1:31:9,72 --> 1:31:10,86
generate the load test.


2080
1:31:10,86 --> 1:31:11,77
It's very simple.


2081
1:31:11,77 --> 1:31:15,13
Similar to how the for
loop is very simple.


2082
1:31:15,13 --> 1:31:17,27
Like I've said, I've been at
Twitter for two years.


2083
1:31:17,27 --> 1:31:19,2
I've written two load tests
the entire time


2084
1:31:19,2 --> 1:31:20,11
that I was at Twitter.


2085
1:31:20,11 --> 1:31:23,1
I spent the first six months
writing the Load Generator.


2086
1:31:23,1 --> 1:31:24,91
I wrote a couple sample
load tests that were


2087
1:31:24,91 --> 1:31:25,72
actually never run.


2088
1:31:25,72 --> 1:31:28,25
People looked at it and said,
oh, this is easy, I'll just do


2089
1:31:28,25 --> 1:31:28,88
this myself.


2090
1:31:28,88 --> 1:31:31,29
And I never actually
ran those.


2091
1:31:31,29 --> 1:31:34,72
And there were two instances
where I had to do a load test,


2092
1:31:34,72 --> 1:31:37,86
because they were testing some
aspect of the system where


2093
1:31:37,86 --> 1:31:41,25
either in one case, no team
existed that was maintaining


2094
1:31:41,25 --> 1:31:45,17
that system, and yet we were
expecting to get a large burst


2095
1:31:45,17 --> 1:31:46,29
in traffic.


2096
1:31:46,29 --> 1:31:49,18
And in another case, it
was crossing so many


2097
1:31:49,18 --> 1:31:51,51
organizational groups--


2098
1:31:51,51 --> 1:31:52,95
this was the most
recent example.


2099
1:31:52,95 --> 1:31:55,6
I had to test for
New Year's Eve.


2100
1:31:55,6 --> 1:31:58,31
And so I wrote that test of
what happens when 30,000


2101
1:31:58,31 --> 1:32:2,86
Japanese people all tweet
at midnight exactly.


2102
1:32:2,86 --> 1:32:4,86
It's the best distributed
denial of service attack


2103
1:32:4,86 --> 1:32:5,787
you've ever seen.


2104
1:32:5,787 --> 1:32:6,92
[LAUGHTER]


2105
1:32:6,92 --> 1:32:10,37
And so those are the two load
tests that I had to write.


2106
1:32:10,37 --> 1:32:11,67
I'm going to show
you one of them.


2107
1:32:11,67 --> 1:32:13,96
I don't think I have time
to show you both.


2108
1:32:13,96 --> 1:32:16,6
But I'll show you the most
complicated one, so you get


2109
1:32:16,6 --> 1:32:19,23
some sense of exactly how
hairy can it get.


2110
1:32:19,23 --> 1:32:22,22
And I'll talk about
that in a second.


2111
1:32:22,22 --> 1:32:25,37
There are some unintentional
things that happened as a


2112
1:32:25,37 --> 1:32:28,45
result of doing it
in this way.


2113
1:32:28,45 --> 1:32:30,92
I mentioned that you have sample
code already written.


2114
1:32:30,92 --> 1:32:34,2
It turns out that you actually
have to write a lot less code.


2115
1:32:34,2 --> 1:32:37,33
When I write a JMeter plug-in,
there is a ton of boilerplate


2116
1:32:37,33 --> 1:32:38,93
that I have to implement.


2117
1:32:38,93 --> 1:32:41,73
In other systems, I have to
write a whole bunch of stuff


2118
1:32:41,73 --> 1:32:44,59
just to get it to
do what I want.


2119
1:32:44,59 --> 1:32:48,28
Iago, the code you're writing is
the code you already have.


2120
1:32:48,28 --> 1:32:51,26
So you probably are just copying
and pasting it, in the


2121
1:32:51,26 --> 1:32:53,24
worst case, or pulling
it in as a


2122
1:32:53,24 --> 1:32:56,1
dependency, in a better case.


2123
1:32:56,1 --> 1:32:58,27
And so you just don't have
to write as much code.


2124
1:32:58,27 --> 1:33:0,42
It really takes people,
literally--


2125
1:33:0,42 --> 1:33:1,58
you might think I'm
exaggerating--


2126
1:33:1,58 --> 1:33:4,84
but it typically takes an
engineer at Twitter who has


2127
1:33:4,84 --> 1:33:7,72
never been exposed to the Load
Generator before and everybody


2128
1:33:7,72 --> 1:33:11,17
now at this point, I believe--
well, except the 50 or so we


2129
1:33:11,17 --> 1:33:12,676
hire every month--


2130
1:33:12,676 --> 1:33:15,43
will have been exposed to it.


2131
1:33:15,43 --> 1:33:19,15
But it takes them about 30
minutes typically from I don't


2132
1:33:19,15 --> 1:33:21,74
have anything, my manager just
told me I should probably find


2133
1:33:21,74 --> 1:33:25,28
out if this is going to scale to
all right, here I've got a


2134
1:33:25,28 --> 1:33:27,7
load test and I've run it, and
I found out that, in fact, it


2135
1:33:27,7 --> 1:33:28,58
doesn't scale at all.


2136
1:33:28,58 --> 1:33:29,6
Oh shoot.


2137
1:33:29,6 --> 1:33:31,5
I have to go back to
the drawing board.


2138
1:33:31,5 --> 1:33:34,76
Or better case, it's awesome.


2139
1:33:34,76 --> 1:33:39,28
It also has another really
fascinating application that


2140
1:33:39,28 --> 1:33:41,81
I'm going to get to here in
more detail in a second.


2141
1:33:41,81 --> 1:33:46,66
But Finagle makes it really easy
for you to think in terms


2142
1:33:46,66 --> 1:33:49,8
of asynchronous operations.


2143
1:33:49,8 --> 1:33:51,62
It has this concept
of the future.


2144
1:33:51,62 --> 1:33:53,36
Hopefully many of you are
familiar with that from the


2145
1:33:53,36 --> 1:33:55,11
Java world.


2146
1:33:55,11 --> 1:33:57,72
The future signature in Scala
is a little nicer and easier


2147
1:33:57,72 --> 1:34:0,37
to work with than
it is in Java.


2148
1:34:0,37 --> 1:34:3,32
And it allows you to compose
RPCs in a way that let's you


2149
1:34:3,32 --> 1:34:7,9
say things like, first, I need
to authenticate this user.


2150
1:34:7,9 --> 1:34:10,72
Then I need to check and see if
they have the right access.


2151
1:34:10,72 --> 1:34:12,89
Then I need to run this
request against


2152
1:34:12,89 --> 1:34:13,73
this backend service.


2153
1:34:13,73 --> 1:34:15,52
And I'm going to
scatter gather.


2154
1:34:15,52 --> 1:34:18,3
I'm going to run this request
out to 100 different services.


2155
1:34:18,3 --> 1:34:19,43
And I'm going to compile
the results.


2156
1:34:19,43 --> 1:34:21,24
And I'm going to throw away the
ones that didn't come back


2157
1:34:21,24 --> 1:34:22,85
in a certain amount of time.


2158
1:34:22,85 --> 1:34:25,85
And then I'm going to collate
that into a response that I


2159
1:34:25,85 --> 1:34:26,48
send to the user.


2160
1:34:26,48 --> 1:34:28,87
I can do all of that in about
three lines of code.


2161
1:34:28,87 --> 1:34:32,0
So Finagle makes it really
easy to compose really


2162
1:34:32,0 --> 1:34:33,37
complicated RPCs.


2163
1:34:33,37 --> 1:34:35,6
Using that in the Load
Generator, in turn, means that


2164
1:34:35,6 --> 1:34:36,99
you can write really
complicated load


2165
1:34:36,99 --> 1:34:38,72
tests really easily.


2166
1:34:38,72 --> 1:34:40,54
And I didn't expect that at all,
because I had never been


2167
1:34:40,54 --> 1:34:41,45
exposed to Finagle.


2168
1:34:41,45 --> 1:34:44,2
And that was a really
nice result.


2169
1:34:44,2 --> 1:34:47,98
The thing that that means is
that, as you're going to see,


2170
1:34:47,98 --> 1:34:51,59
it means that you can write very
complicated functional


2171
1:34:51,59 --> 1:34:54,12
test scenarios.


2172
1:34:54,12 --> 1:34:56,92
Before I had a tool like this,
the way that I would do


2173
1:34:56,92 --> 1:34:59,31
performance testing and make
sure that the service is


2174
1:34:59,31 --> 1:35:1,83
behaving correctly at the same
time, let me describe a


2175
1:35:1,83 --> 1:35:4,55
scenario where this
isn't done.


2176
1:35:4,55 --> 1:35:6,93
Let's say that you have a load
test and you're running it and


2177
1:35:6,93 --> 1:35:10,1
your service is performing
really well.


2178
1:35:10,1 --> 1:35:12,8
And then later, somebody has the
bright idea to go and look


2179
1:35:12,8 --> 1:35:13,48
and see what's actually
happening.


2180
1:35:13,48 --> 1:35:16,62
And what's happening is
hey, it's amazing.


2181
1:35:16,62 --> 1:35:18,2
The performance is awesome.


2182
1:35:18,2 --> 1:35:19,18
It's really, really good.


2183
1:35:19,18 --> 1:35:21,4
It's serving a 404.


2184
1:35:21,4 --> 1:35:22,7
Or it's really, really good.


2185
1:35:22,7 --> 1:35:24,49
It's serving a 500, because
there's an exception.


2186
1:35:24,49 --> 1:35:29,355
And it turns out that an HTTP
200 with a nice graphic, like


2187
1:35:29,355 --> 1:35:31,94
a fail whale, might,
to your Load


2188
1:35:31,94 --> 1:35:33,8
Generator, look like success.


2189
1:35:33,8 --> 1:35:37,2
But in fact, the right thing
isn't happening at all.


2190
1:35:37,2 --> 1:35:38,72
Well, how do you solve
that problem.


2191
1:35:38,72 --> 1:35:41,72
Well, of course, then your
Load Generator needs to


2192
1:35:41,72 --> 1:35:44,16
hopefully pay attention to more
than just the response


2193
1:35:44,16 --> 1:35:46,96
code, but also you might
think that--


2194
1:35:46,96 --> 1:35:49,57
this is the way I solved
it in my last gig.


2195
1:35:49,57 --> 1:35:50,97
You run your load and
you're running a


2196
1:35:50,97 --> 1:35:52,5
functional test beside it.


2197
1:35:52,5 --> 1:35:54,94
And you're like, OK, under this
amount of load, these


2198
1:35:54,94 --> 1:35:58,2
scenarios still operate
correctly.


2199
1:35:58,2 --> 1:36:1,26
And so here I've got JMeter,
let's say, running against the


2200
1:36:1,26 --> 1:36:3,71
service, and I've got a Selenium
test or a web driver


2201
1:36:3,71 --> 1:36:6,13
test running simultaneously.


2202
1:36:6,13 --> 1:36:8,95
And that's fine as
far as it goes.


2203
1:36:8,95 --> 1:36:12,81
But wouldn't it be nice if you
could actually say 100,000


2204
1:36:12,81 --> 1:36:14,75
users can all do this
at the same time.


2205
1:36:14,75 --> 1:36:17,7
Where they can do these
50 different things


2206
1:36:17,7 --> 1:36:18,32
all at the same time.


2207
1:36:18,32 --> 1:36:21,17



2208
1:36:21,17 --> 1:36:24,42
Honestly, I don't know of any
way to do that other than this


2209
1:36:24,42 --> 1:36:25,67
Load Generator Iago.


2210
1:36:25,67 --> 1:36:30,73



2211
1:36:30,73 --> 1:36:33,2
I didn't have to load test 100
services, so I had lot of time


2212
1:36:33,2 --> 1:36:35,52
to dedicate to making
Iago great.


2213
1:36:35,52 --> 1:36:36,87
It's still not as great
as it could be.


2214
1:36:36,87 --> 1:36:39,81
We are in the process of syncing
out a bunch of stuff


2215
1:36:39,81 --> 1:36:41,46
to the open source repo--


2216
1:36:41,46 --> 1:36:42,78
bug fixes and such.


2217
1:36:42,78 --> 1:36:47,9
But if people are inspired by
this talk, feel free to come


2218
1:36:47,9 --> 1:36:49,73
and make contributions.


2219
1:36:49,73 --> 1:36:54,47
Unintentionally, the idea of
having a service which is


2220
1:36:54,47 --> 1:36:59,58
really solid became the model
for how we do all of what I


2221
1:36:59,58 --> 1:37:1,97
call developer productivity.


2222
1:37:1,97 --> 1:37:3,26
Or probably a lot of you.


2223
1:37:3,26 --> 1:37:6,24
It's not a realization
I had alone.


2224
1:37:6,24 --> 1:37:7,55
But we basically are focused--


2225
1:37:7,55 --> 1:37:10,73
I manage a team now focused
on developer productivity.


2226
1:37:10,73 --> 1:37:14,0
And our build system
works this way.


2227
1:37:14,0 --> 1:37:16,11
The test frameworks that we
support works this way.


2228
1:37:16,11 --> 1:37:19,85
Our test infrastructure
set up works this way.


2229
1:37:19,85 --> 1:37:22,35
Our deployment tool
works this way.


2230
1:37:22,35 --> 1:37:26,97
And so it became a model for how
things should work is that


2231
1:37:26,97 --> 1:37:29,55
give engineers great tools that
are really easy to use,


2232
1:37:29,55 --> 1:37:33,76
where the default, it's
almost easier to use


2233
1:37:33,76 --> 1:37:35,25
than to not use them.


2234
1:37:35,25 --> 1:37:37,5
And they will do the
right thing.


2235
1:37:37,5 --> 1:37:39,48
And so that's how we're doing
things at Twitter, which


2236
1:37:39,48 --> 1:37:42,33
hopefully is no surprise
to anybody.


2237
1:37:42,33 --> 1:37:45,33
All right, now we get
into the meat.


2238
1:37:45,33 --> 1:37:46,4
Hopefully you can
all read that.


2239
1:37:46,4 --> 1:37:48,53
I actually don't care if you
can't read that too much,


2240
1:37:48,53 --> 1:37:52,62
because it turns out that this
is just an example of how to


2241
1:37:52,62 --> 1:37:58,26
write an echo service in
Finagle using Thrift.


2242
1:37:58,26 --> 1:38:1,2
So you can imagine that you
would have a service like.


2243
1:38:1,2 --> 1:38:3,19
It takes a method.


2244
1:38:3,19 --> 1:38:5,74
Or it has an RPC
that says echo.


2245
1:38:5,74 --> 1:38:8,71
And then it's going to reply
back with what you wrote.


2246
1:38:8,71 --> 1:38:13,42
I'm trying to be relatively
open kimono here.


2247
1:38:13,42 --> 1:38:17,2
There's no hidden dependencies,
other than on


2248
1:38:17,2 --> 1:38:18,77
Finagle and things like that.


2249
1:38:18,77 --> 1:38:20,55
But there's no hidden
code here.


2250
1:38:20,55 --> 1:38:21,89
That's really how the
service is written.


2251
1:38:21,89 --> 1:38:24,54
I cut it off at the end, because
below that is all the


2252
1:38:24,54 --> 1:38:26,3
Zookeeper discovery business.


2253
1:38:26,3 --> 1:38:29,73
And I figured people
don't care.


2254
1:38:29,73 --> 1:38:32,79
Here's a client.


2255
1:38:32,79 --> 1:38:35,55
I hope anybody who's writing
a service is probably also


2256
1:38:35,55 --> 1:38:36,57
written a client for it.


2257
1:38:36,57 --> 1:38:38,69
If you haven't, then you should
probably think about


2258
1:38:38,69 --> 1:38:39,6
doing that.


2259
1:38:39,6 --> 1:38:41,57
Because you learn a lot of
interesting things when you


2260
1:38:41,57 --> 1:38:44,7
behave like your customer,
whoever that is.


2261
1:38:44,7 --> 1:38:47,31
But here is a client
that is going to


2262
1:38:47,31 --> 1:38:49,5
send the message hello.


2263
1:38:49,5 --> 1:38:51,67
And when it gets the response
back, it's going to print


2264
1:38:51,67 --> 1:38:55,78
something out and say, all
right, I got a hello back.


2265
1:38:55,78 --> 1:38:59,94
And that's how you write that
code using Finagle talking to


2266
1:38:59,94 --> 1:39:0,68
my echo service.


2267
1:39:0,68 --> 1:39:2,5
And it's not a lot of code.


2268
1:39:2,5 --> 1:39:4,68
There's a lot of noise
in there about types.


2269
1:39:4,68 --> 1:39:7,0
But other than that, it's
pretty self explanatory.


2270
1:39:7,0 --> 1:39:8,93
And by the way, if anybody here
doesn't know Scala and


2271
1:39:8,93 --> 1:39:13,22
you're totally confused,
my apologies.


2272
1:39:13,22 --> 1:39:14,47
Here is a load test.


2273
1:39:14,47 --> 1:39:17,7



2274
1:39:17,7 --> 1:39:18,95
Take a look at that
for a second.


2275
1:39:18,95 --> 1:39:22,3
Notice that it's calling
client.echo.


2276
1:39:22,3 --> 1:39:25,95
I'm going to go back,
client.echo.


2277
1:39:25,95 --> 1:39:29,29
So if you see that, it's
actually the same code.


2278
1:39:29,29 --> 1:39:32,63
And in fact, it turns
out it's less code.


2279
1:39:32,63 --> 1:39:33,59
How's that possible?


2280
1:39:33,59 --> 1:39:34,51
How could it be less code?


2281
1:39:34,51 --> 1:39:37,13
Well, it turns out that Iago
takes care of some of the


2282
1:39:37,13 --> 1:39:39,95
boilerplate as far as connecting
to a service goes.


2283
1:39:39,95 --> 1:39:44,2
So this load test actually does
a little more than the


2284
1:39:44,2 --> 1:39:45,73
sample client.


2285
1:39:45,73 --> 1:39:47,93
If it gets a hello back,
then it sends another


2286
1:39:47,93 --> 1:39:51,74
message and logs it.


2287
1:39:51,74 --> 1:39:55,35
So that's a really
simple example.


2288
1:39:55,35 --> 1:39:56,69
I'm going to get into
a more complicated


2289
1:39:56,69 --> 1:39:58,61
example here in a second.


2290
1:39:58,61 --> 1:40:1,18
It turns out that if I wanted to
write a for loop that just


2291
1:40:1,18 --> 1:40:4,82
sent echo requests
asynchronously, as long as I


2292
1:40:4,82 --> 1:40:7,82
knew enough about Java NIO or
Netty or some other library


2293
1:40:7,82 --> 1:40:10,82
like that, it would be really
simple for me to do that


2294
1:40:10,82 --> 1:40:14,7
without too much effort.


2295
1:40:14,7 --> 1:40:18,3
So great, what have I gotten?


2296
1:40:18,3 --> 1:40:20,43
How can I do better?


2297
1:40:20,43 --> 1:40:23,5
So we have more complicated
problems than that, it turns


2298
1:40:23,5 --> 1:40:26,41
out, at Twitter and hopefully
most of you as well.


2299
1:40:26,41 --> 1:40:29,15
So load testing direct
messages.


2300
1:40:29,15 --> 1:40:31,5
Direct messages are a feature in
Twitter where you can send


2301
1:40:31,5 --> 1:40:34,35
a private message from one user
to another as long as


2302
1:40:34,35 --> 1:40:36,38
there's a following relationship
between them,


2303
1:40:36,38 --> 1:40:39,24
with some exceptions that I'm
not going to go into related


2304
1:40:39,24 --> 1:40:42,84
to brands where you can direct
message them without them


2305
1:40:42,84 --> 1:40:44,9
following you.


2306
1:40:44,9 --> 1:40:48,13



2307
1:40:48,13 --> 1:40:49,95
I didn't put any of this in
the slides, because I was


2308
1:40:49,95 --> 1:40:52,89
worried that comms would
come after me.


2309
1:40:52,89 --> 1:40:55,82
So I will talk about
this rather than--


2310
1:40:55,82 --> 1:40:58,35
I have to get slides approved.


2311
1:40:58,35 --> 1:41:1,15
So nothing I'm going to tell you
is confidential, per se.


2312
1:41:1,15 --> 1:41:5,43
But at any rate, we had a TV
show, one of these reality


2313
1:41:5,43 --> 1:41:11,73
game shows similar to, say,
"American Idol" where people


2314
1:41:11,73 --> 1:41:12,35
are singing.


2315
1:41:12,35 --> 1:41:13,9
They get up on stage.


2316
1:41:13,9 --> 1:41:13,51
They sing.


2317
1:41:13,51 --> 1:41:14,23
You vote.


2318
1:41:14,23 --> 1:41:16,35
And then America picks
the winner.


2319
1:41:16,35 --> 1:41:19,24
They go home with hopefully a
nice recording contract that


2320
1:41:19,24 --> 1:41:21,87
doesn't take too much
of their money.


2321
1:41:21,87 --> 1:41:26,385
And one of these such shows
wanted to use Twitter to do


2322
1:41:26,385 --> 1:41:27,54
the voting.


2323
1:41:27,54 --> 1:41:30,51
And this show had a $5 million
prize at the end.


2324
1:41:30,51 --> 1:41:33,36
And they were going to do the
voting every single live show


2325
1:41:33,36 --> 1:41:35,63
over Twitter and include
those votes along


2326
1:41:35,63 --> 1:41:36,43
with everything else.


2327
1:41:36,43 --> 1:41:42,49
But voting online has to be
private, at least, without


2328
1:41:42,49 --> 1:41:44,5
some major exceptions.


2329
1:41:44,5 --> 1:41:45,39
And so they were going
to use DMs.


2330
1:41:45,39 --> 1:41:48,71
And at the time--


2331
1:41:48,71 --> 1:41:50,81
in order to not get myself in
trouble, I'm not talking about


2332
1:41:50,81 --> 1:41:52,4
when this was--


2333
1:41:52,4 --> 1:41:56,56
but at the time, we were getting
roughly 400 DMs a


2334
1:41:56,56 --> 1:41:58,26
second over our system.


2335
1:41:58,26 --> 1:42:0,83
So 400 messages a second
back and forth that


2336
1:42:0,83 --> 1:42:3,12
were of this type.


2337
1:42:3,12 --> 1:42:6,75
And when you figure out that
most of the TV showing happens


2338
1:42:6,75 --> 1:42:10,23
in the East Coast and Central
together, which is most of the


2339
1:42:10,23 --> 1:42:13,28
population of the United States,
and that all of this


2340
1:42:13,28 --> 1:42:15,7
voting would be happening at
the same time, because the


2341
1:42:15,7 --> 1:42:16,94
polls open, as it were, at
the end of the show.


2342
1:42:16,94 --> 1:42:19,41
And so everybody immediately
goes and they do their voting.


2343
1:42:19,41 --> 1:42:20,82
So you get a flood of traffic.


2344
1:42:20,82 --> 1:42:22,76
We figured out that we were
going to have roughly on the


2345
1:42:22,76 --> 1:42:25,91
order of 2,000 to 3,000
DMs per second.


2346
1:42:25,91 --> 1:42:30,23
And as I said, the production
traffic at the time was 400.


2347
1:42:30,23 --> 1:42:33,87
And so clearly, we were going to
have a large increase over


2348
1:42:33,87 --> 1:42:34,77
what we could handle.


2349
1:42:34,77 --> 1:42:37,39
So we needed to be able
to test that.


2350
1:42:37,39 --> 1:42:38,44
This is a Direct Message.


2351
1:42:38,44 --> 1:42:39,96
Again, I'm going to
show some code.


2352
1:42:39,96 --> 1:42:41,8
And actually, I'm going to go
a little quickly, because I


2353
1:42:41,8 --> 1:42:42,64
have about four minutes.


2354
1:42:42,64 --> 1:42:45,11
But I'm not going to
go super quickly.


2355
1:42:45,11 --> 1:42:50,37
That's just an underlying
type that would


2356
1:42:50,37 --> 1:42:52,26
hold the Direct Message.


2357
1:42:52,26 --> 1:42:53,29
Here is my processor.


2358
1:42:53,29 --> 1:42:55,84
You might actually be able to
figure out from the code what


2359
1:42:55,84 --> 1:42:58,58
the TV show is.


2360
1:42:58,58 --> 1:43:3,49
So we're actually going
to show five, I think,


2361
1:43:3,49 --> 1:43:4,87
slides of code here.


2362
1:43:4,87 --> 1:43:8,45
So don't get too attached
to any one piece of it.


2363
1:43:8,45 --> 1:43:10,5
This is happening up
in the constructor.


2364
1:43:10,5 --> 1:43:12,4
There is an eval.


2365
1:43:12,4 --> 1:43:14,24
And then we pull in a config.


2366
1:43:14,24 --> 1:43:16,13
And then there's
a couple URLs.


2367
1:43:16,13 --> 1:43:18,9
This is using our API 1.0
endpoint instead of our API


2368
1:43:18,9 --> 1:43:19,74
1.1 endpoint.


2369
1:43:19,74 --> 1:43:22,1
This code was written long
enough ago that there wasn't a


2370
1:43:22,1 --> 1:43:22,99
1.1 endpoint.


2371
1:43:22,99 --> 1:43:24,95
And by the way, none of it
has been code reviewed.


2372
1:43:24,95 --> 1:43:27,19
So please, my apologies.


2373
1:43:27,19 --> 1:43:29,21
I know it's not the highest
quality code.


2374
1:43:29,21 --> 1:43:32,12
I wrote it in, literally,
like a day.


2375
1:43:32,12 --> 1:43:34,72
So there you go.


2376
1:43:34,72 --> 1:43:35,58
Here's some stuff.


2377
1:43:35,58 --> 1:43:37,87
It turns out that if you're
going to have $5 million


2378
1:43:37,87 --> 1:43:41,43
riding on the votes, that you
had better get them right.


2379
1:43:41,43 --> 1:43:43,11
You better not drop any
votes on the floor.


2380
1:43:43,11 --> 1:43:46,12
You better not have
votes show up for


2381
1:43:46,12 --> 1:43:47,74
people you didn't expect.


2382
1:43:47,74 --> 1:43:51,25
And so the voting, like in my
load test, when I talk about


2383
1:43:51,25 --> 1:43:53,8
being able to test correctness
and load at the same time,


2384
1:43:53,8 --> 1:43:55,89
turns out to be critical
in this case.


2385
1:43:55,89 --> 1:43:58,76
Because I need to be able to
make sure that of those 3,000


2386
1:43:58,76 --> 1:44:0,61
DMs per second or whatever the
number is that I'm going to


2387
1:44:0,61 --> 1:44:4,39
test at, that all of them show
up for the right guy or girl


2388
1:44:4,39 --> 1:44:6,0
or whoever it is.


2389
1:44:6,0 --> 1:44:8,99
And that like I said, none of
them get dropped on the floor


2390
1:44:8,99 --> 1:44:9,54
or arrive--


2391
1:44:9,54 --> 1:44:11,88
well, out of order is
fine in this case.


2392
1:44:11,88 --> 1:44:16,12
So I need to track
a bunch of stuff.


2393
1:44:16,12 --> 1:44:21,3
It also turns out that I don't
have another system like


2394
1:44:21,3 --> 1:44:23,24
Twitter that's not Twitter.


2395
1:44:23,24 --> 1:44:25,95
I don't have a copy of Twitter
in my back pocket that I can


2396
1:44:25,95 --> 1:44:28,74
just stand up and run a bunch of
tests against, because that


2397
1:44:28,74 --> 1:44:30,57
would be expensive.


2398
1:44:30,57 --> 1:44:32,84
And it probably wouldn't fit.


2399
1:44:32,84 --> 1:44:36,57
So I need to use Twitter in
order to run this test, which


2400
1:44:36,57 --> 1:44:38,58
means I run the risk of knocking
over production, as


2401
1:44:38,58 --> 1:44:39,14
it turns out.


2402
1:44:39,14 --> 1:44:42,95
But anyway, that was
a known risk.


2403
1:44:42,95 --> 1:44:45,77
But it also turns out that I
don't have millions of users


2404
1:44:45,77 --> 1:44:46,78
in my back pocket.


2405
1:44:46,78 --> 1:44:48,95
And I can't go create millions
of users, because it with


2406
1:44:48,95 --> 1:44:50,7
throw off our analytics and
our growth team would get


2407
1:44:50,7 --> 1:44:51,36
really excited.


2408
1:44:51,36 --> 1:44:52,91
And I would have to break
the news to them that


2409
1:44:52,91 --> 1:44:53,952
that was just me.


2410
1:44:53,952 --> 1:44:56,39
[LAUGHTER]


2411
1:44:56,39 --> 1:44:58,45
And so I don't have a million
users in my back pocket.


2412
1:44:58,45 --> 1:45:0,3
So I decided, you know what?


2413
1:45:0,3 --> 1:45:1,35
It doesn't matter.


2414
1:45:1,35 --> 1:45:3,72
I did a lot of talking
to other engineers.


2415
1:45:3,72 --> 1:45:6,56
This is pretty shortly after
I arrived at Twitter.


2416
1:45:6,56 --> 1:45:8,61
I didn't know much of the
system at that point.


2417
1:45:8,61 --> 1:45:10,44
So I talked to a lot of people,
and they said, no, it


2418
1:45:10,44 --> 1:45:11,6
probably doesn't matter.


2419
1:45:11,6 --> 1:45:14,8
You can probably send all these
DMs from one account.


2420
1:45:14,8 --> 1:45:17,33
So I sent all the DMs from
myself, literally.


2421
1:45:17,33 --> 1:45:18,23
I used my own account.


2422
1:45:18,23 --> 1:45:21,16
But it turns out that we have
rate limiting at Twitter.


2423
1:45:21,16 --> 1:45:24,25
And so if I need to send 3,000
DMs a second, if any of you


2424
1:45:24,25 --> 1:45:26,21
want to do this, you're going
to get stopped almost


2425
1:45:26,21 --> 1:45:28,23
immediately.


2426
1:45:28,23 --> 1:45:31,19
But it turns out that my Load
Generator is running in


2427
1:45:31,19 --> 1:45:31,96
production.


2428
1:45:31,96 --> 1:45:34,19
And so it has access to
memcache, which means it has


2429
1:45:34,19 --> 1:45:36,81
access to the rate limit.


2430
1:45:36,81 --> 1:45:38,76
It has access to my
rate limit token.


2431
1:45:38,76 --> 1:45:42,9
And I can go and reset it
as part of my load test.


2432
1:45:42,9 --> 1:45:44,71
So the load test is sitting
there DMing.


2433
1:45:44,71 --> 1:45:46,95
And meanwhile, it's also
talking to memcache


2434
1:45:46,95 --> 1:45:47,92
saying, that guy?


2435
1:45:47,92 --> 1:45:49,49
No, we're going to zero
out his rate limit


2436
1:45:49,49 --> 1:45:51,42
again all the time.


2437
1:45:51,42 --> 1:45:54,12
Over and over and over
again quite rapidly.


2438
1:45:54,12 --> 1:45:56,41
And I mentioned that I want to
make sure we don't drop these


2439
1:45:56,41 --> 1:45:56,91
on the floor.


2440
1:45:56,91 --> 1:45:59,32
Our customer was using our
streaming API, which


2441
1:45:59,32 --> 1:46:1,49
internally we call Hosebird.


2442
1:46:1,49 --> 1:46:4,69
And so I wanted to make sure
that I was getting the same


2443
1:46:4,69 --> 1:46:6,5
data that they would be.


2444
1:46:6,5 --> 1:46:7,46
So I make a connection
to Hosebird.


2445
1:46:7,46 --> 1:46:9,54
So there's my connection
to memcache.


2446
1:46:9,54 --> 1:46:11,98
There's my connection
to Hosebird.


2447
1:46:11,98 --> 1:46:14,6
I highlighted the connect to
Hosebird code, because it's


2448
1:46:14,6 --> 1:46:16,7
not that interesting.


2449
1:46:16,7 --> 1:46:18,31
And then here's my load test.


2450
1:46:18,31 --> 1:46:21,42
So I need to pick a particular
host to hit.


2451
1:46:21,42 --> 1:46:23,6
I need to decide what I'm going
to send, so I have a


2452
1:46:23,6 --> 1:46:26,97
vote randomizer function
that I'm going to call.


2453
1:46:26,97 --> 1:46:28,81
I need to set up the request.


2454
1:46:28,81 --> 1:46:30,36
I'm going to make a
URI out of that.


2455
1:46:30,36 --> 1:46:32,96
I'm going to set the OAuth
header with all the right


2456
1:46:32,96 --> 1:46:34,93
correct authentication codes.


2457
1:46:34,93 --> 1:46:38,37
And I'm going to make a Iago
slash Parrot request with all


2458
1:46:38,37 --> 1:46:39,3
of those parameters.


2459
1:46:39,3 --> 1:46:42,58
And then I'm going to map that
onto my request, call my


2460
1:46:42,58 --> 1:46:45,27
service, which is that
second line up there.


2461
1:46:45,27 --> 1:46:49,87
And when the response comes
back, I'm going to decode it


2462
1:46:49,87 --> 1:46:52,52
and check to make sure that I
haven't exceeded my DM limits.


2463
1:46:52,52 --> 1:46:54,57
And if so, reset them.


2464
1:46:54,57 --> 1:46:58,31
And then I'm going to look and
see if I got a decent response


2465
1:46:58,31 --> 1:47:1,23
back, meaning it's some HTTP
response as opposed to an


2466
1:47:1,23 --> 1:47:3,41
exception that I got
on the wire.


2467
1:47:3,41 --> 1:47:5,78
Then I'm going to read that DM,
and I'm going to do some


2468
1:47:5,78 --> 1:47:8,68
check for missing
DMs at the end.


2469
1:47:8,68 --> 1:47:11,61
It's very simple logic.


2470
1:47:11,61 --> 1:47:13,5
It turns out that this logic
actually had a bug.


2471
1:47:13,5 --> 1:47:15,96
It's kind of funny,
I think, anyway.


2472
1:47:15,96 --> 1:47:17,28
You'll see.


2473
1:47:17,28 --> 1:47:21,8
So the way I wrote it originally
was all right, I'm


2474
1:47:21,8 --> 1:47:23,27
going to send a message.


2475
1:47:23,27 --> 1:47:27,11
And when you send a DM or
anything on Twitter and when


2476
1:47:27,11 --> 1:47:28,9
you create something,
you get back an ID.


2477
1:47:28,9 --> 1:47:30,86
So I'm going to get back the
ID in the response, and I'm


2478
1:47:30,86 --> 1:47:33,73
going to be waiting over here
for the stream to give me a DM


2479
1:47:33,73 --> 1:47:35,94
with that ID.


2480
1:47:35,94 --> 1:47:38,78
And I found out that we were
dropping tons and tons of DMs


2481
1:47:38,78 --> 1:47:39,9
on the floor.


2482
1:47:39,9 --> 1:47:40,22
This is horrible.


2483
1:47:40,22 --> 1:47:41,13
It's not working at all.


2484
1:47:41,13 --> 1:47:42,59
What's the problem?


2485
1:47:42,59 --> 1:47:45,65
It turns out that Hosebird was
delivering the DM before I


2486
1:47:45,65 --> 1:47:47,13
actually got the
response back.


2487
1:47:47,13 --> 1:47:50,83
So our streaming API is fast
enough that it will send the


2488
1:47:50,83 --> 1:47:53,86
DM down before you even
know what the ID was.


2489
1:47:53,86 --> 1:47:58,8
And so I had to create DMs that
have unique text in them


2490
1:47:58,8 --> 1:47:59,97
just so that I could
match them up.


2491
1:47:59,97 --> 1:48:1,49
Because I was going to get them
on the streaming side


2492
1:48:1,49 --> 1:48:2,69
before I got the response.


2493
1:48:2,69 --> 1:48:5,0
It's an awesome bug.


2494
1:48:5,0 --> 1:48:7,68
So that's all the code.


2495
1:48:7,68 --> 1:48:8,35
That's it.


2496
1:48:8,35 --> 1:48:10,55
That's how you test DMs.


2497
1:48:10,55 --> 1:48:15,77
So what do I want you to
take away from this?


2498
1:48:15,77 --> 1:48:19,26
So clearly, most of
you, some of you--


2499
1:48:19,26 --> 1:48:20,68
I don't know how many people
from Google are here.


2500
1:48:20,68 --> 1:48:23,12
Google clearly deals in more
scale than we do, as does


2501
1:48:23,12 --> 1:48:24,84
Facebook and a number
of other sites.


2502
1:48:24,84 --> 1:48:28,4
But in general, most of the
world doesn't handle the


2503
1:48:28,4 --> 1:48:31,58
amount of test load that
we have at Twitter.


2504
1:48:31,58 --> 1:48:36,26
Just to give you an example,
when I went into this, one of


2505
1:48:36,26 --> 1:48:38,76
the things that I wanted to be
able to do was to be able to


2506
1:48:38,76 --> 1:48:40,9
generate a lot of load.


2507
1:48:40,9 --> 1:48:42,8
I had run into scalability
problems with JMeter and


2508
1:48:42,8 --> 1:48:47,7
systems like where they have
very simple request response


2509
1:48:47,7 --> 1:48:49,41
patterns, meaning give
me a counter.


2510
1:48:49,41 --> 1:48:49,71
Great.


2511
1:48:49,71 --> 1:48:50,38
I got a counter back.


2512
1:48:50,38 --> 1:48:52,67
And you can be very
fast at that.


2513
1:48:52,67 --> 1:48:56,73
And 40,000 QPS was a lot
for JMeter to handle.


2514
1:48:56,73 --> 1:49:0,5
And I knew that Twitter handled
more than that when I


2515
1:49:0,5 --> 1:49:1,9
came to the company.


2516
1:49:1,9 --> 1:49:2,96
So I wanted something that
could scale really well.


2517
1:49:2,96 --> 1:49:6,18
And I had in my head that oh,
100,000 RPS would be cool.


2518
1:49:6,18 --> 1:49:7,51
That would be awesome.


2519
1:49:7,51 --> 1:49:10,2
And one day, somebody needed
that much, and we were able to


2520
1:49:10,2 --> 1:49:11,46
do it, and it was no big deal.


2521
1:49:11,46 --> 1:49:12,82
And then somebody else
came along and they


2522
1:49:12,82 --> 1:49:14,39
wanted 500,000 QPS.


2523
1:49:14,39 --> 1:49:16,35
And I was like, ooh, wow,
that's a large number.


2524
1:49:16,35 --> 1:49:17,64
OK, let's see.


2525
1:49:17,64 --> 1:49:19,42
I had to tune a couple things.


2526
1:49:19,42 --> 1:49:20,33
And then we did that.


2527
1:49:20,33 --> 1:49:22,37
And then I haven't
touched the code,


2528
1:49:22,37 --> 1:49:25,7
honestly, in like six months.


2529
1:49:25,7 --> 1:49:29,97
And a month ago, I was idly
sitting lunchtime


2530
1:49:29,97 --> 1:49:32,44
conversation, and I
hear behind me two


2531
1:49:32,44 --> 1:49:33,93
million QPS we tested.


2532
1:49:33,93 --> 1:49:34,765
And I turn around.


2533
1:49:34,765 --> 1:49:35,72
I'm like what?


2534
1:49:35,72 --> 1:49:36,18
Two million?


2535
1:49:36,18 --> 1:49:37,8
Who?


2536
1:49:37,8 --> 1:49:38,13
What?


2537
1:49:38,13 --> 1:49:39,0
Really?


2538
1:49:39,0 --> 1:49:40,19
I was like, you didn't do
that with our stuff.


2539
1:49:40,19 --> 1:49:42,26
So how did you generate
two million QPS?


2540
1:49:42,26 --> 1:49:42,8
That's awesome.


2541
1:49:42,8 --> 1:49:44,12
I want to know what did that.


2542
1:49:44,12 --> 1:49:47,2
Turns out you can generate
two million QPS.


2543
1:49:47,2 --> 1:49:51,42
That is almost an afterthought
versus everything else that


2544
1:49:51,42 --> 1:49:54,31
you get to do with this.


2545
1:49:54,31 --> 1:49:58,76
So pretty interesting as far
as Twitter's problems go.


2546
1:49:58,76 --> 1:50:4,41
It turns out that you probably
all should want your engineers


2547
1:50:4,41 --> 1:50:5,67
to be writing their
own load tests


2548
1:50:5,67 --> 1:50:7,78
instead of doing it yourself.


2549
1:50:7,78 --> 1:50:10,91
And you should also clearly
want your load test to be


2550
1:50:10,91 --> 1:50:12,76
accurate and model
the real world.


2551
1:50:12,76 --> 1:50:15,32



2552
1:50:15,32 --> 1:50:15,92
There you go.


2553
1:50:15,92 --> 1:50:19,2
I have all of one minute
for questions.


2554
1:50:19,2 --> 1:50:22,456
And I'll be available
for lunch.


2555
1:50:22,456 --> 1:50:29,866
[APPLAUSE]


2556
1:50:29,866 --> 1:50:30,58
TONY VOELLM: Great.


2557
1:50:30,58 --> 1:50:32,3
Thank you, James.


2558
1:50:32,3 --> 1:50:34,85
I got my takeaways
again this time.


2559
1:50:34,85 --> 1:50:37,68
One is I learned you are a
optimism and not a pessimist.


2560
1:50:37,68 --> 1:50:39,99
All your for loops had
starts but no ends.


2561
1:50:39,99 --> 1:50:40,67
JAMES WALDROP: Yep.


2562
1:50:40,67 --> 1:50:40,86
Thanks.


2563
1:50:40,86 --> 1:50:42,166
[LAUGHTER]


2564
1:50:42,166 --> 1:50:43,48
TONY VOELLM: And I
also learned I


2565
1:50:43,48 --> 1:50:44,77
have to go learn Scala.


2566
1:50:44,77 --> 1:50:48,27
And somehow, somebody slipped in
like a next generation list


2567
1:50:48,27 --> 1:50:49,75
somewhere in the world.


2568
1:50:49,75 --> 1:50:50,97
And so Scala is it.


2569
1:50:50,97 --> 1:50:53,1
I also know Foursquare
does Scala.


2570
1:50:53,1 --> 1:50:55,5
So it's growing in popularity.


2571
1:50:55,5 --> 1:50:56,95
We're going to take a break
here in a minute.


2572
1:50:56,95 --> 1:50:59,24
I think we have time for
one question if we want


2573
1:50:59,24 --> 1:50:59,86
to go to the mic's.


2574
1:50:59,86 --> 1:51:2,92
So if you have a question,
go to the mic.


2575
1:51:2,92 --> 1:51:5,14
Otherwise, we'll take one
off the Moderator.


2576
1:51:5,14 --> 1:51:6,4
Then we're going to
take a break.


2577
1:51:6,4 --> 1:51:11,56
Then we're going come back
here exactly at 11:30.


2578
1:51:11,56 --> 1:51:14,29
And we're going to go into the
next set of presentations that


2579
1:51:14,29 --> 1:51:17,32
will be done by Mozilla.


2580
1:51:17,32 --> 1:51:20,35
And right before this question,
two things.


2581
1:51:20,35 --> 1:51:23,27
Some people have been asking if
the slides will be posted.


2582
1:51:23,27 --> 1:51:25,72
Yes, they will be posted.


2583
1:51:25,72 --> 1:51:28,89
And so will the video and the
content and all these


2584
1:51:28,89 --> 1:51:31,71
questions and everything
after the talks.


2585
1:51:31,71 --> 1:51:33,43
So they will definitely
be out there.


2586
1:51:33,43 --> 1:51:35,97
And number two, there's a lot
of people standing up in the


2587
1:51:35,97 --> 1:51:37,69
back of the room, just some
to stretch your legs.


2588
1:51:37,69 --> 1:51:39,9
But there's also people that
would like a seat.


2589
1:51:39,9 --> 1:51:41,49
So when you come back from the
break, kind of squish into the


2590
1:51:41,49 --> 1:51:43,49
middle as much as you can.


2591
1:51:43,49 --> 1:51:45,21
So with that, we'll
go to a question.


2592
1:51:45,21 --> 1:51:46,19
JAMES WALDROP: I like
the top one.


2593
1:51:46,19 --> 1:51:48,99
TONY VOELLM: All right, so
here's the first question.


2594
1:51:48,99 --> 1:51:53,54
It says, does Iago allow clients
in languages other


2595
1:51:53,54 --> 1:51:54,23
than Scala?


2596
1:51:54,23 --> 1:51:57,48
In other words, can developers
port their clients in other


2597
1:51:57,48 --> 1:51:59,7
languages to write performance
tests?


2598
1:51:59,7 --> 1:52:0,69
JAMES WALDROP: Yeah.


2599
1:52:0,69 --> 1:52:1,45
Sorry.


2600
1:52:1,45 --> 1:52:3,13
Can you hear me?


2601
1:52:3,13 --> 1:52:7,17
So Scala is a JVM language,
which means that those


2602
1:52:7,17 --> 1:52:10,6
libraries are available to any
other JVM language, which


2603
1:52:10,6 --> 1:52:15,18
means that as long as you have
code written for the JVM--


2604
1:52:15,18 --> 1:52:16,77
and that can include things
like Jython or


2605
1:52:16,77 --> 1:52:18,57
JRuby for that matter.


2606
1:52:18,57 --> 1:52:22,72
So really, anything that you
write on the Java stack for,


2607
1:52:22,72 --> 1:52:25,87
you can use Iago.


2608
1:52:25,87 --> 1:52:26,4
Cool.


2609
1:52:26,4 --> 1:52:26,76
Thanks.


2610
1:52:26,76 --> 1:52:27,832
TONY VOELLM: All right, with
that, let's go ahead


2611
1:52:27,832 --> 1:52:28,57
and take our break.


2612
1:52:28,57 --> 1:52:31,505
And we will be back at 11:30.


2613
1:52:31,505 --> 1:52:33,828
[APPLAUSE]


2614
1:52:33,828 --> 2:20:3,315
[MUSIC PLAYING]


2615
2:20:3,315 --> 2:20:4,58
TONY VOELLM: Hello.


2616
2:20:4,58 --> 2:20:7,75
Hello, welcome back.


2617
2:20:7,75 --> 2:20:10,32
True to word, here, we're
going to start.


2618
2:20:10,32 --> 2:20:14,18
As a reminder, please do squish
in as you can to make


2619
2:20:14,18 --> 2:20:14,93
room for others.


2620
2:20:14,93 --> 2:20:18,1
So if you can sort of move to
the center to leave that


2621
2:20:18,1 --> 2:20:19,98
space, that'll be great.


2622
2:20:19,98 --> 2:20:22,73
If you are interested in the
topic tables, we're going to


2623
2:20:22,73 --> 2:20:24,72
be selecting the topic
tables for lunch


2624
2:20:24,72 --> 2:20:26,42
here in a few minutes.


2625
2:20:26,42 --> 2:20:31,46
You can go to g.co/gtac2013 and
you can find a link to the


2626
2:20:31,46 --> 2:20:35,52
moderator to go and figure out
what topics you want to vote


2627
2:20:35,52 --> 2:20:37,72
up or vote down, or even
suggest a new topic.


2628
2:20:37,72 --> 2:20:41,9
So pleased go do that right
now if you can.


2629
2:20:41,9 --> 2:20:48,58
And up next here we have
David Burns and Malini


2630
2:20:48,58 --> 2:20:50,38
from Mozilla here.


2631
2:20:50,38 --> 2:20:54,8
They're going to talk about how
do you test a Mobile OS?


2632
2:20:54,8 --> 2:20:58,92
And a little fact about Malini
here, she told me that her dog


2633
2:20:58,92 --> 2:21:2,12
is named after a test
subject in Portal.


2634
2:21:2,12 --> 2:21:6,99
So you can always go ask her
about this from that.


2635
2:21:6,99 --> 2:21:8,99
So with that, I'll let
them kick it off.


2636
2:21:8,99 --> 2:21:10,469
Thank you.


2637
2:21:10,469 --> 2:21:12,934
MALINI DAS: Thank you.


2638
2:21:12,934 --> 2:21:17,38
[APPLAUSE]


2639
2:21:17,38 --> 2:21:19,28
MALINI DAS: So can you
all hear me OK?


2640
2:21:19,28 --> 2:21:19,55
Yeah?


2641
2:21:19,55 --> 2:21:20,11
Awesome.


2642
2:21:20,11 --> 2:21:22,81
So I'm Malini Das and
this is David Burns.


2643
2:21:22,81 --> 2:21:26,39
And we work on automation
frameworks over at Mozilla.


2644
2:21:26,39 --> 2:21:29,34
And we're here today to give
you a rundown of the recent


2645
2:21:29,34 --> 2:21:32,37
challenges that Mozilla has been
facing while automating a


2646
2:21:32,37 --> 2:21:34,17
new Mobile OS.


2647
2:21:34,17 --> 2:21:36,98
So how do you test
a Mobile OS?


2648
2:21:36,98 --> 2:21:38,83
That's the question that first
came into our heads when we


2649
2:21:38,83 --> 2:21:42,33
were tasked with supporting
this new platform.


2650
2:21:42,33 --> 2:21:44,89
And we knew that answering this
question wasn't going to


2651
2:21:44,89 --> 2:21:48,24
be as easy as just googling for
an answer or just winging


2652
2:21:48,24 --> 2:21:49,69
it as we went along.


2653
2:21:49,69 --> 2:21:52,5
There's a depth of problems
that need solving.


2654
2:21:52,5 --> 2:21:57,59
And solving them in a good and
long lasting way would save us


2655
2:21:57,59 --> 2:21:58,75
lots of pain in the future.


2656
2:21:58,75 --> 2:22:1,77
So today David and I are going
to talk to you about how we


2657
2:22:1,77 --> 2:22:5,1
solved this complex problem and
share with you the pain


2658
2:22:5,1 --> 2:22:8,21
points and the victories
we had along the way.


2659
2:22:8,21 --> 2:22:11,24
So let's see here-- great.


2660
2:22:11,24 --> 2:22:14,15
So what Mobile OS am
I talking about?


2661
2:22:14,15 --> 2:22:16,41
As some of you might know,
Mozilla has been working on


2662
2:22:16,41 --> 2:22:18,3
something called Firefox OS.


2663
2:22:18,3 --> 2:22:23,3
And this is an open web
accessible device that's built


2664
2:22:23,3 --> 2:22:25,82
on top of what we know best
which is the browser.


2665
2:22:25,82 --> 2:22:28,58
So we're using Gecko, which is
our web rendering engine, to


2666
2:22:28,58 --> 2:22:31,2
drive the phone itself, allowing
all the applications


2667
2:22:31,2 --> 2:22:33,67
running on our phone to
be written in CSS,


2668
2:22:33,67 --> 2:22:36,25
JavaScript, and HTML5.


2669
2:22:36,25 --> 2:22:38,27
So now you might be wondering
why would we


2670
2:22:38,27 --> 2:22:40,1
want that in a phone.


2671
2:22:40,1 --> 2:22:42,7
Well, we've seen a recent trend
towards web technologies


2672
2:22:42,7 --> 2:22:45,6
in the mobile environment.


2673
2:22:45,6 --> 2:22:47,77
So around 60% of the apps right
now in Google Play and


2674
2:22:47,77 --> 2:22:50,18
the app store have at least
one part of the app


2675
2:22:50,18 --> 2:22:51,49
that's a web view.


2676
2:22:51,49 --> 2:22:54,14
So what this means is that on
top of your operating system


2677
2:22:54,14 --> 2:22:57,12
that needs to run your native
applications, you also need to


2678
2:22:57,12 --> 2:23:0,62
have a web rendering engine just
to show this web view.


2679
2:23:0,62 --> 2:23:2,82
And this trend towards web views
isn't going to go away


2680
2:23:2,82 --> 2:23:3,97
any time soon.


2681
2:23:3,97 --> 2:23:7,16
We're seeing a prevalence of
frameworks like PhoneGap which


2682
2:23:7,16 --> 2:23:9,5
allow you to write an
application once using web


2683
2:23:9,5 --> 2:23:12,4
technologies and deploy to
multiple mobile platforms


2684
2:23:12,4 --> 2:23:13,86
instantaneously.


2685
2:23:13,86 --> 2:23:16,65
So what's the problem here?


2686
2:23:16,65 --> 2:23:20,92
The problem is that these
operating systems are doing


2687
2:23:20,92 --> 2:23:21,69
extra work.


2688
2:23:21,69 --> 2:23:24,84
So not only are they running
the applications, but they


2689
2:23:24,84 --> 2:23:27,67
also need to run a web rendering
engine just to show


2690
2:23:27,67 --> 2:23:29,5
you parts of this application.


2691
2:23:29,5 --> 2:23:32,28
So is there a way to remove
this extra work?


2692
2:23:32,28 --> 2:23:33,86
That's the goal of Firefox OS.


2693
2:23:33,86 --> 2:23:38,4
What we want to do is unite the
concerns of the OS and the


2694
2:23:38,4 --> 2:23:41,11
browser so your phone
is doing less work.


2695
2:23:41,11 --> 2:23:44,43
And what we want to do is
optimize it so well that we


2696
2:23:44,43 --> 2:23:46,38
can run on low end devices.


2697
2:23:46,38 --> 2:23:48,93
So we get this benefit that, by
optimizing our browser, we


2698
2:23:48,93 --> 2:23:50,35
get to optimize our phone.


2699
2:23:50,35 --> 2:23:53,31
And by targeting low end
devices, we get to put this


2700
2:23:53,31 --> 2:23:56,56
phone out to emerging markets
and put it in hands of people


2701
2:23:56,56 --> 2:23:58,94
who may not have a smartphone
before or may not have had


2702
2:23:58,94 --> 2:24:1,59
access to the internet before.


2703
2:24:1,59 --> 2:24:3,99
So what this means is
we now have to make


2704
2:24:3,99 --> 2:24:6,13
our browser a phone.


2705
2:24:6,13 --> 2:24:9,2
And what do we need
to do for that?


2706
2:24:9,2 --> 2:24:12,15
That means that our browser
has to do things like send


2707
2:24:12,15 --> 2:24:13,96
SMSes and make phone calls.


2708
2:24:13,96 --> 2:24:15,65
And on top of that, it has
to act like a browser.


2709
2:24:15,65 --> 2:24:18,8
So it has to render web pages.


2710
2:24:18,8 --> 2:24:20,2
And that gave us, the automation
and tools team, the


2711
2:24:20,2 --> 2:24:22,78
task of figuring out how we can
instrument and test all


2712
2:24:22,78 --> 2:24:26,31
these new features
in this platform.


2713
2:24:26,31 --> 2:24:29,33
So what exactly should
we test?


2714
2:24:29,33 --> 2:24:31,92
Since Firefox OS is essentially
a flavor of


2715
2:24:31,92 --> 2:24:34,3
Firefox but on the phone,
we want to test


2716
2:24:34,3 --> 2:24:35,68
all the same parts.


2717
2:24:35,68 --> 2:24:38,97
So this means that we want to
test things like rendering.


2718
2:24:38,97 --> 2:24:42,82
Now, rendering essentially means
how the web page looks


2719
2:24:42,82 --> 2:24:44,23
like once it's loaded.


2720
2:24:44,23 --> 2:24:47,68
And the way that we test it is
that we let the web page load,


2721
2:24:47,68 --> 2:24:50,91
and we compare the data with
either a reference image or


2722
2:24:50,91 --> 2:24:52,96
reference data to make
sure that they match.


2723
2:24:52,96 --> 2:24:55,39
If they don't match, then we're
not giving new mobile


2724
2:24:55,39 --> 2:24:59,4
users an experience of the
mobile web that they deserve.


2725
2:24:59,4 --> 2:25:1,34
We don't want to regress in
any way in rendering.


2726
2:25:1,34 --> 2:25:3,92



2727
2:25:3,92 --> 2:25:7,39
Another shared concern that we
have with browsers is that we


2728
2:25:7,39 --> 2:25:9,99
want to make sure that we
have a performant phone.


2729
2:25:9,99 --> 2:25:11,96
So we need to check
performance.


2730
2:25:11,96 --> 2:25:14,13
If our phone takes too long to
execute anything, then no


2731
2:25:14,13 --> 2:25:17,6
one's going to want
to use this phone.


2732
2:25:17,6 --> 2:25:20,36
So this means that we need to
test performance for simple


2733
2:25:20,36 --> 2:25:22,26
things like loading
applications.


2734
2:25:22,26 --> 2:25:24,95
But we also want to do stress
tests, so that we can make


2735
2:25:24,95 --> 2:25:28,99
sure that we don't provide a
degraded experience over time


2736
2:25:28,99 --> 2:25:33,3
or that we can catch memory
leaks and all that fun stuff.


2737
2:25:33,3 --> 2:25:36,5
But now on top of these concerns
that we have with our


2738
2:25:36,5 --> 2:25:39,11
browser, we have new concerns
since we're a smartphone.


2739
2:25:39,11 --> 2:25:41,56
We now have to worry about
application, unit and


2740
2:25:41,56 --> 2:25:43,17
integration tests.


2741
2:25:43,17 --> 2:25:47,73
So smartphones have a number of
base applications, like the


2742
2:25:47,73 --> 2:25:49,38
calendar or the dialer.


2743
2:25:49,38 --> 2:25:51,38
And you want to make sure that
these applications work before


2744
2:25:51,38 --> 2:25:53,38
you send out this
phone to people.


2745
2:25:53,38 --> 2:25:56,37
So to do that, you want to
answer questions like, does my


2746
2:25:56,37 --> 2:25:57,52
application work?


2747
2:25:57,52 --> 2:25:59,87
Do the functional parts of
this application work?


2748
2:25:59,87 --> 2:26:1,88
Does this application work
with the system app.


2749
2:26:1,88 --> 2:26:3,57
Does it work while other
applications are running in


2750
2:26:3,57 --> 2:26:4,89
the background?


2751
2:26:4,89 --> 2:26:8,6
Now this is important for us
so that we can test our own


2752
2:26:8,6 --> 2:26:9,88
base applications.


2753
2:26:9,88 --> 2:26:13,5
But we also want to give this
test for a framework to third


2754
2:26:13,5 --> 2:26:15,81
party developers so that when
they write their apps, they


2755
2:26:15,81 --> 2:26:17,9
can have the confidence that
it'll work in this new


2756
2:26:17,9 --> 2:26:20,43
environment.


2757
2:26:20,43 --> 2:26:23,77
So Firefox OS is not just going
to run on any desktop.


2758
2:26:23,77 --> 2:26:25,11
It's going to run on phones.


2759
2:26:25,11 --> 2:26:26,8
So now we have to worry
about testing the


2760
2:26:26,8 --> 2:26:28,35
phone environment itself.


2761
2:26:28,35 --> 2:26:31,1
This means things like gathering
hardware metrics.


2762
2:26:31,1 --> 2:26:35,7
So one of the hardware metrics
that we want to gather is


2763
2:26:35,7 --> 2:26:36,28
things like boot time.


2764
2:26:36,28 --> 2:26:39,74
So how long it takes the phone
from an off state to go into a


2765
2:26:39,74 --> 2:26:41,33
usable state.


2766
2:26:41,33 --> 2:26:43,1
I'm sure we'll had phones at
some point where you could


2767
2:26:43,1 --> 2:26:45,19
press the button to turn it
on, and it's just not


2768
2:26:45,19 --> 2:26:45,75
responding.


2769
2:26:45,75 --> 2:26:47,5
So you go and you
make a coffee.


2770
2:26:47,5 --> 2:26:49,44
And you come back, and you
still see a boot screen.


2771
2:26:49,44 --> 2:26:52,32
That behavior is not acceptable
for new users.


2772
2:26:52,32 --> 2:26:54,39
It might be OK for early
adopters types.


2773
2:26:54,39 --> 2:26:56,39
But we're going to be giving
the phone to people who may


2774
2:26:56,39 --> 2:26:57,86
never have had a phone before.


2775
2:26:57,86 --> 2:27:0,96
And we want to give them a good
optimized experience.


2776
2:27:0,96 --> 2:27:3,36
So as we develop this phone, we
want to make sure that we


2777
2:27:3,36 --> 2:27:5,74
can gather data like boot
time and make sure


2778
2:27:5,74 --> 2:27:7,77
that we don't regress.


2779
2:27:7,77 --> 2:27:9,75
Another important thing that
we need to worry about now


2780
2:27:9,75 --> 2:27:12,34
that we're running on a phone
is hardware metrics as the


2781
2:27:12,34 --> 2:27:13,14
phone is running.


2782
2:27:13,14 --> 2:27:15,62
So things like battery life.


2783
2:27:15,62 --> 2:27:17,69
Back when we all had feature
phones, you could turn our


2784
2:27:17,69 --> 2:27:20,5
phone, on it would run for
a week without having to


2785
2:27:20,5 --> 2:27:21,69
recharge it.


2786
2:27:21,69 --> 2:27:23,78
But now with our energy guzzling
smartphones, we're


2787
2:27:23,78 --> 2:27:25,91
lucky to get two days
off a single charge.


2788
2:27:25,91 --> 2:27:29,21
So we want to be able to make
sure that as we progress with


2789
2:27:29,21 --> 2:27:32,67
our phone and as we build it
out, we maintain a good


2790
2:27:32,67 --> 2:27:36,1
battery life and other hardware
metrics like this.


2791
2:27:36,1 --> 2:27:39,13
Now one of our most important
and interesting new test


2792
2:27:39,13 --> 2:27:41,4
concerns is telephony.


2793
2:27:41,4 --> 2:27:43,54
So the smartphone has to be able
to do things like send a


2794
2:27:43,54 --> 2:27:47,46
text message and check your
network provider and make an


2795
2:27:47,46 --> 2:27:48,89
actual phone call.


2796
2:27:48,89 --> 2:27:51,9
And if you can't do this
reliably, then it's nothing


2797
2:27:51,9 --> 2:27:53,77
more than a frustrating
portable computer.


2798
2:27:53,77 --> 2:27:56,6
So we're going have to figure
out how we can actually solve


2799
2:27:56,6 --> 2:27:58,98
for testing telephony.


2800
2:27:58,98 --> 2:28:3,12
So now that we know what we want
to test in general, how


2801
2:28:3,12 --> 2:28:4,4
do we go about doing that?


2802
2:28:4,4 --> 2:28:7,96
Do we have any tech lying around
that can help us run


2803
2:28:7,96 --> 2:28:9,92
tests with these concerns?


2804
2:28:9,92 --> 2:28:14,49
Well, since Firefox OS is
similar to Firefox, then we


2805
2:28:14,49 --> 2:28:17,6
can use the tests that we run
against Firefox against it.


2806
2:28:17,6 --> 2:28:19,52
We have many existing frameworks
for Firefox.


2807
2:28:19,52 --> 2:28:22,15
But none of them tackle all of
the issues that we need to


2808
2:28:22,15 --> 2:28:23,32
tackle here.


2809
2:28:23,32 --> 2:28:25,25
We have things for rendering the
performance, but we don't


2810
2:28:25,25 --> 2:28:26,68
have things for telephony.


2811
2:28:26,68 --> 2:28:29,97
We don't have a way of
communicating to multiple


2812
2:28:29,97 --> 2:28:32,18
instances at the same time,
because we never had to deal


2813
2:28:32,18 --> 2:28:34,42
with cross-device
communication.


2814
2:28:34,42 --> 2:28:36,37
So what all this pointed
out to was that we


2815
2:28:36,37 --> 2:28:37,99
needed a new framework.


2816
2:28:37,99 --> 2:28:41,32
And us being good engineers,
we were wondering, wait.


2817
2:28:41,32 --> 2:28:43,74
We shouldn't just let this
be a band-aid solution.


2818
2:28:43,74 --> 2:28:46,26
We have the opportunity to build
a framework that can


2819
2:28:46,26 --> 2:28:48,6
answer questions not only
for now, but can


2820
2:28:48,6 --> 2:28:49,44
build for the future.


2821
2:28:49,44 --> 2:28:52,33
So that any future framework
that we build can leverage the


2822
2:28:52,33 --> 2:28:54,22
work that we're doing now.


2823
2:28:54,22 --> 2:28:57,52
So now that we figured out, OK,
we need a new framework,


2824
2:28:57,52 --> 2:29:0,15
what exactly should it solve?


2825
2:29:0,15 --> 2:29:3,96
So this framework has to support
our existing test


2826
2:29:3,96 --> 2:29:4,82
frameworks.


2827
2:29:4,82 --> 2:29:7,45
So Mozilla has hundreds of
thousands of tests running


2828
2:29:7,45 --> 2:29:8,73
against Firefox.


2829
2:29:8,73 --> 2:29:11,1
And we want to be able to
seamlessly run them against


2830
2:29:11,1 --> 2:29:12,4
Firefox OS.


2831
2:29:12,4 --> 2:29:14,62
It makes no sense to go off and
make your own framework


2832
2:29:14,62 --> 2:29:16,6
and then rewrite
all the tests.


2833
2:29:16,6 --> 2:29:19,4
That's just madness and
unnecessary work.


2834
2:29:19,4 --> 2:29:21,58
So the ideal framework will be
able to uplift all these


2835
2:29:21,58 --> 2:29:24,5
frameworks into Firefox OS.


2836
2:29:24,5 --> 2:29:27,46
The next requirement is that
it should be the foundation


2837
2:29:27,46 --> 2:29:28,93
for future frameworks.


2838
2:29:28,93 --> 2:29:33,2
What this means is that to run
any tests on the phone, we


2839
2:29:33,2 --> 2:29:34,77
need to be able to communicate
with their own.


2840
2:29:34,77 --> 2:29:37,36
So the test runner has to
talk to the test device.


2841
2:29:37,36 --> 2:29:40,14
And this is the core driving
mechanism behind all of our


2842
2:29:40,14 --> 2:29:41,17
frameworks.


2843
2:29:41,17 --> 2:29:43,34
And any future framework will
need to solve for this


2844
2:29:43,34 --> 2:29:44,49
communication.


2845
2:29:44,49 --> 2:29:46,67
So our framework should be
able to provide this core


2846
2:29:46,67 --> 2:29:48,11
pipework that's reusable across


2847
2:29:48,11 --> 2:29:50,86
frameworks today and tomorrow.


2848
2:29:50,86 --> 2:29:53,83
And the last requirement is that
it should be reusable for


2849
2:29:53,83 --> 2:29:55,32
any Gecko environment.


2850
2:29:55,32 --> 2:29:57,95
So what that means is that
whatever we create today


2851
2:29:57,95 --> 2:30:0,52
should work on Firefox for
Android, Firefox for desktop,


2852
2:30:0,52 --> 2:30:4,35
and Firefox OS and any Gecko
product in the future.


2853
2:30:4,35 --> 2:30:10,46
This'll help us write one test
framework once and then run


2854
2:30:10,46 --> 2:30:13,75
them in any other environment
later.


2855
2:30:13,75 --> 2:30:18,68
So let's get to the gritty
details of these requirements.


2856
2:30:18,68 --> 2:30:20,98
So in order to uplift some of
our existing frameworks, what


2857
2:30:20,98 --> 2:30:22,86
do we need to do?


2858
2:30:22,86 --> 2:30:26,53
Well, our existing frameworks
currently rely on Firefox


2859
2:30:26,53 --> 2:30:27,88
add-ons to run.


2860
2:30:27,88 --> 2:30:32,1
They use add-ons so that they
have access to the privileged


2861
2:30:32,1 --> 2:30:35,2
space of your test
environment.


2862
2:30:35,2 --> 2:30:39,67
So they execute code against the
Chrome of the environment.


2863
2:30:39,67 --> 2:30:42,25
And this is fine for a desktop,
because it has the


2864
2:30:42,25 --> 2:30:44,78
ability to run Firefox
add-ons.


2865
2:30:44,78 --> 2:30:47,39
But in the beginning days of
Firefox OS, we didn't have the


2866
2:30:47,39 --> 2:30:49,47
ability to run add-ons.


2867
2:30:49,47 --> 2:30:49,63
we.


2868
2:30:49,63 --> 2:30:53,31
First started thinking about
test solutions about four


2869
2:30:53,31 --> 2:30:54,99
months after the project
was announced.


2870
2:30:54,99 --> 2:30:56,95
So we had very little
to work with.


2871
2:30:56,95 --> 2:30:58,74
We didn't know what direction
the product will


2872
2:30:58,74 --> 2:30:59,57
eventually go in.


2873
2:30:59,57 --> 2:31:2,4
But all we knew is that we're
going to be building this on


2874
2:31:2,4 --> 2:31:3,8
top of Gecko.


2875
2:31:3,8 --> 2:31:8,22
So while we didn't have the
ability to easily uplift these


2876
2:31:8,22 --> 2:31:11,4
frameworks using add-ons, that
means that we have to somehow


2877
2:31:11,4 --> 2:31:14,72
integrate our framework
with Gecko itself.


2878
2:31:14,72 --> 2:31:16,5
This was actually an
opportunity, because instead


2879
2:31:16,5 --> 2:31:18,96
of running as an add-on, we now
get to integrate directly


2880
2:31:18,96 --> 2:31:21,32
into the engine, and we would
get a performance boost.


2881
2:31:21,32 --> 2:31:25,27
So whatever we select as our
framework, we had to make sure


2882
2:31:25,27 --> 2:31:27,85
that we integrate the key parts
for every framework so


2883
2:31:27,85 --> 2:31:32,22
that they'll be uplifted easily
without any problems.


2884
2:31:32,22 --> 2:31:35,82
Another consideration that we
needed to take into account is


2885
2:31:35,82 --> 2:31:37,47
that we're running on phones.


2886
2:31:37,47 --> 2:31:39,87
And we don't want to assume that
the phone will always be


2887
2:31:39,87 --> 2:31:41,87
connected to computer
via a USB.


2888
2:31:41,87 --> 2:31:44,5
We want to stick them in data
centers and somehow talk to


2889
2:31:44,5 --> 2:31:45,93
them over the network.


2890
2:31:45,93 --> 2:31:50,3
So whatever framework we have,
we want it to be able to work


2891
2:31:50,3 --> 2:31:52,77
in a networked environment
so that we can remotely


2892
2:31:52,77 --> 2:31:56,23
communicate with
other devices.


2893
2:31:56,23 --> 2:31:58,97
And the last but extremely
important consideration is


2894
2:31:58,97 --> 2:32:1,4
what can we actually open
up on the phone?


2895
2:32:1,4 --> 2:32:3,4
So we don't want to just
test web views.


2896
2:32:3,4 --> 2:32:5,38
We want to be able to test
things like setting the


2897
2:32:5,38 --> 2:32:7,8
battery and check if the web
view has actually received


2898
2:32:7,8 --> 2:32:9,3
this new information.


2899
2:32:9,3 --> 2:32:12,17
We want to be able to get as
much control of the of device


2900
2:32:12,17 --> 2:32:14,8
as possible from the get go.


2901
2:32:14,8 --> 2:32:17,48
So what can we actually
control.


2902
2:32:17,48 --> 2:32:21,17
So what this all boils down to
is we need a reusable and easy


2903
2:32:21,17 --> 2:32:24,88
way to control different phones
and to control multiple


2904
2:32:24,88 --> 2:32:26,94
devices at the same time.


2905
2:32:26,94 --> 2:32:30,2
And all of this should be done
in an easy and reusable manner


2906
2:32:30,2 --> 2:32:32,3
across frameworks.


2907
2:32:32,3 --> 2:32:34,33
We want to drive the phone
at all layers.


2908
2:32:34,33 --> 2:32:36,54
And we want to have privileges
across the device.


2909
2:32:36,54 --> 2:32:39,64
So what that means is that I
want to be able to change file


2910
2:32:39,64 --> 2:32:41,72
permissions, but I also want to
be able to do things like


2911
2:32:41,72 --> 2:32:44,3
change app permissions.


2912
2:32:44,3 --> 2:32:46,75
So the solution that we came up
with is a framework that we


2913
2:32:46,75 --> 2:32:49,42
called Marionette, which is
essentially WebDriver meets


2914
2:32:49,42 --> 2:32:51,79
Firefox OS.


2915
2:32:51,79 --> 2:32:54,6
So why WebDriver?


2916
2:32:54,6 --> 2:32:57,98
Well, the phone itself
is a web device.


2917
2:32:57,98 --> 2:33:1,92
So WebDriver was written so that
you can manipulate user


2918
2:33:1,92 --> 2:33:3,78
views from a user perspective.


2919
2:33:3,78 --> 2:33:9,54
So you can test web pages in an
easy and supported matter.


2920
2:33:9,54 --> 2:33:11,33
The great thing about WebDriver
is that it's the


2921
2:33:11,33 --> 2:33:12,68
protocol behind Selenium.


2922
2:33:12,68 --> 2:33:18,17
So by implementing WebDriver, we
get to uplift our existing


2923
2:33:18,17 --> 2:33:19,99
Selenium tests for free.


2924
2:33:19,99 --> 2:33:22,97
And it's something that's
already familiar to testers.


2925
2:33:22,97 --> 2:33:25,81
On top of that, WebDriver is
being proposed as the W3C


2926
2:33:25,81 --> 2:33:27,61
standard for browser
automation.


2927
2:33:27,61 --> 2:33:30,78
So by implementing WebDriver, we
essentially get to kill two


2928
2:33:30,78 --> 2:33:31,7
birds with one stone.


2929
2:33:31,7 --> 2:33:35,27
Because we can implement open
web standards and also solve


2930
2:33:35,27 --> 2:33:37,97
our testing needs.


2931
2:33:37,97 --> 2:33:40,2
Another great thing about
WebDriver is that it solves


2932
2:33:40,2 --> 2:33:43,4
our remote access problem
for free.


2933
2:33:43,4 --> 2:33:46,19
It's already built in with the
idea of local and remote ends.


2934
2:33:46,19 --> 2:33:49,46
So you can communicate and
create a session, a WebDriver


2935
2:33:49,46 --> 2:33:52,765
session with one device, and
then also have another session


2936
2:33:52,765 --> 2:33:55,22
with another device within
the same test.


2937
2:33:55,22 --> 2:33:56,88
So this will allow us
to do things like


2938
2:33:56,88 --> 2:34:0,29
cross-device telephony.


2939
2:34:0,29 --> 2:34:5,6
And the other consideration is
how will this help us with our


2940
2:34:5,6 --> 2:34:7,26
uplifting frameworks problem?


2941
2:34:7,26 --> 2:34:9,91
Well, WebDriver has this
extremely helpful method


2942
2:34:9,91 --> 2:34:11,52
called Execute Script.


2943
2:34:11,52 --> 2:34:14,18
And what Execute Script does
is that-- yeah, you


2944
2:34:14,18 --> 2:34:15,345
know what it does.


2945
2:34:15,345 --> 2:34:16,22
It's totally hacky.


2946
2:34:16,22 --> 2:34:17,63
But it's awesome, because
it works exactly


2947
2:34:17,63 --> 2:34:18,88
what we need to do.


2948
2:34:18,88 --> 2:34:21,78
What it does is that it lets
you execute any arbitrary


2949
2:34:21,78 --> 2:34:27,7
JavaScript that you want in the
current application space.


2950
2:34:27,7 --> 2:34:28,86
And that's exactly what
Firefox add-ons


2951
2:34:28,86 --> 2:34:29,73
were trying to do.


2952
2:34:29,73 --> 2:34:34,54
We use them only to execute
code on the device itself.


2953
2:34:34,54 --> 2:34:37,58
But as I mentioned before, we
needed to execute code in


2954
2:34:37,58 --> 2:34:38,54
privileged space.


2955
2:34:38,54 --> 2:34:39,97
That is the Chrome.


2956
2:34:39,97 --> 2:34:42,9
And WebDriver only cares
about content, so


2957
2:34:42,9 --> 2:34:43,4
what the user sees.


2958
2:34:43,4 --> 2:34:47,61
So what we ended up doing is
we didn't end up making


2959
2:34:47,61 --> 2:34:48,72
WebDriver itself.


2960
2:34:48,72 --> 2:34:50,57
We ended up doing WebDriver
plus plus.


2961
2:34:50,57 --> 2:34:53,25
So we added a few extra
things to it.


2962
2:34:53,25 --> 2:34:56,75
So we needed to access
privileged space.


2963
2:34:56,75 --> 2:34:59,66
So we added a new method
called Set Context.


2964
2:34:59,66 --> 2:35:2,6
And what Set Context does is
that it allows you to set the


2965
2:35:2,6 --> 2:35:6,44
current executing context of
your Selenium commands.


2966
2:35:6,44 --> 2:35:8,28
So you can do things like,
I'm going to set


2967
2:35:8,28 --> 2:35:9,53
the context to content.


2968
2:35:9,53 --> 2:35:11,42
I'm going to navigate
to a web page.


2969
2:35:11,42 --> 2:35:14,53
I'm going to check what
privileges this web page has.


2970
2:35:14,53 --> 2:35:16,73
Then I'm going to set the
context to Chrome, change the


2971
2:35:16,73 --> 2:35:19,79
application permissions, and
then go back into the content


2972
2:35:19,79 --> 2:35:23,24
and check if my application has
actually respected these


2973
2:35:23,24 --> 2:35:25,5
permission changes.


2974
2:35:25,5 --> 2:35:28,7
So this helps us write extremely
robust tests.


2975
2:35:28,7 --> 2:35:30,8
But it also helps us uplift
these frameworks for free,


2976
2:35:30,8 --> 2:35:34,13
because now they can easily
execute whatever JavaScript


2977
2:35:34,13 --> 2:35:37,66
they want against the Chrome.


2978
2:35:37,66 --> 2:35:41,75
Another key difference that our
WebDriver implementation


2979
2:35:41,75 --> 2:35:44,6
has is that the current
WebDriver implementation


2980
2:35:44,6 --> 2:35:48,59
doesn't have a full specked
out area on gestures.


2981
2:35:48,59 --> 2:35:50,42
And we're a phone.


2982
2:35:50,42 --> 2:35:51,52
And we have touch screens.


2983
2:35:51,52 --> 2:35:53,84
So that means that we want to
automate user input, which is


2984
2:35:53,84 --> 2:35:55,9
multi-finger gestures.


2985
2:35:55,9 --> 2:35:58,12
So just to get our own work
off the ground, we started


2986
2:35:58,12 --> 2:36:1,17
working on the WebDriver
specification for gestures.


2987
2:36:1,17 --> 2:36:4,87
And what this means is that we
added a bunch of gesture


2988
2:36:4,87 --> 2:36:8,9
commands into our
implementation.


2989
2:36:8,9 --> 2:36:11,94
But the general way that we
solved it is that we added the


2990
2:36:11,94 --> 2:36:15,4
ability for you to create any
gesture you want by using


2991
2:36:15,4 --> 2:36:18,55
chains of action primitives.


2992
2:36:18,55 --> 2:36:21,35
That is, I can change one finger
to do press, move and


2993
2:36:21,35 --> 2:36:24,98
release, but the other finger
can just press and release.


2994
2:36:24,98 --> 2:36:27,45
And then you can change these
things together to create any


2995
2:36:27,45 --> 2:36:29,63
gesture you need.


2996
2:36:29,63 --> 2:36:32,32
And the third difference that
this implementation of


2997
2:36:32,32 --> 2:36:35,26
WebDriver has to other ones in
Firefox is that it's built


2998
2:36:35,26 --> 2:36:37,6
directly into Gecko.


2999
2:36:37,6 --> 2:36:38,86
And that gave us a huge
performance boost, because


3000
2:36:38,86 --> 2:36:42,16
you're no longer running as
some secondary concern.


3001
2:36:42,16 --> 2:36:43,9
You're a primary concern.


3002
2:36:43,9 --> 2:36:46,66
So to explain the gritty details
of its implementation


3003
2:36:46,66 --> 2:36:47,362
is David Burns.


3004
2:36:47,362 --> 2:36:48,612
Here you go.


3005
2:36:48,612 --> 2:36:54,225



3006
2:36:54,225 --> 2:36:57,0
DAVID BURNS: So how
does it all work?


3007
2:36:57,0 --> 2:37:0,7
As Malini said, Marionette gets
kicked off every time


3008
2:37:0,7 --> 2:37:2,6
Gecko starts up.


3009
2:37:2,6 --> 2:37:5,1
And so Gecko starts up every
time the browser starts up.


3010
2:37:5,1 --> 2:37:8,7
And we have this really nice
server sitting there waiting


3011
2:37:8,7 --> 2:37:13,51
for us to now accept commands
and execute them.


3012
2:37:13,51 --> 2:37:18,57
And because it's essentially
just executing JavaScript, and


3013
2:37:18,57 --> 2:37:24,85
large portions of Firefox is
written in JavaScript, we can


3014
2:37:24,85 --> 2:37:25,93
now call pretty much anything.


3015
2:37:25,93 --> 2:37:29,98
We can go all the way, as Malini
said, from the browser


3016
2:37:29,98 --> 2:37:34,94
Chrome, which is where all the
nice security areas are, down


3017
2:37:34,94 --> 2:37:38,36
to the very insecure parts
which is a web page.


3018
2:37:38,36 --> 2:37:41,1
And we can execute anything
in between.


3019
2:37:41,1 --> 2:37:46,63
So now we're essentially
starting to drive a phone, an


3020
2:37:46,63 --> 2:37:48,88
operating system,
with WebDriver.


3021
2:37:48,88 --> 2:37:52,88
A standards-based automation
API just driving


3022
2:37:52,88 --> 2:37:54,36
an operating system.


3023
2:37:54,36 --> 2:37:57,88
It pretty much doesn't get
any cooler than that.


3024
2:37:57,88 --> 2:38:0,44
So I'm going to now split
out into kind


3025
2:38:0,44 --> 2:38:1,87
of how we did things.


3026
2:38:1,87 --> 2:38:3,9
We've done a number of things
slightly different to the way


3027
2:38:3,9 --> 2:38:6,28
the WebDriver project
does things.


3028
2:38:6,28 --> 2:38:11,46
And it's mainly because it's
what fits better with us.


3029
2:38:11,46 --> 2:38:15,96
So we essentially have a dummy
clients, which just kind of


3030
2:38:15,96 --> 2:38:20,93
sends arbitrary commands
over to the device.


3031
2:38:20,93 --> 2:38:24,77
The WebDriver project kind
of does things with HTTP.


3032
2:38:24,77 --> 2:38:28,28
Its protocol is kind
of RESTish.


3033
2:38:28,28 --> 2:38:31,85
It's not proper REST, but
it's close enough.


3034
2:38:31,85 --> 2:38:35,88
And it delivers a nice JSON
payload into a browser.


3035
2:38:35,88 --> 2:38:37,99
The browser then knows
what to do with it.


3036
2:38:37,99 --> 2:38:40,78



3037
2:38:40,78 --> 2:38:45,32
And because we're doing things
with JSON packets and we're


3038
2:38:45,32 --> 2:38:48,6
doing wall sockets into the
device, we only allow one


3039
2:38:48,6 --> 2:38:50,6
connection.


3040
2:38:50,6 --> 2:38:54,58
And the reason why we're doing
it with pure TCP is because


3041
2:38:54,58 --> 2:38:57,13
we're trying to utilize some of
the other technologies that


3042
2:38:57,13 --> 2:38:58,69
are going into Gecko
at the moment,


3043
2:38:58,69 --> 2:39:0,21
like the remote debugger.


3044
2:39:0,21 --> 2:39:1,905
We're using a similar
technology.


3045
2:39:1,905 --> 2:39:5,76
But I'll get back to that
in the server parts.


3046
2:39:5,76 --> 2:39:10,42
So I'll kind of show you how,
from a simple point of view,


3047
2:39:10,42 --> 2:39:14,25
I'm just going to use
the terminal.


3048
2:39:14,25 --> 2:39:19,17
We can easily just kind of
Telnet into the device.


3049
2:39:19,17 --> 2:39:21,15
I don't know if anyone
can see that.


3050
2:39:21,15 --> 2:39:27,485



3051
2:39:27,485 --> 2:39:29,94
I'll leave it on the
screen for a while.


3052
2:39:29,94 --> 2:39:35,38
So we can easily Telnet in.


3053
2:39:35,38 --> 2:39:41,59
It shows kind of a nice echo
response from a Telnet server.


3054
2:39:41,59 --> 2:39:43,938
Can we have the computer.


3055
2:39:43,938 --> 2:39:45,965
Ah, there we are.


3056
2:39:45,965 --> 2:39:52,57
So we get a nice echo response
from a device.


3057
2:39:52,57 --> 2:39:56,46
The echo's just coming
from the phone.


3058
2:39:56,46 --> 2:39:58,9
So we can see what it's doing.


3059
2:39:58,9 --> 2:40:2,56



3060
2:40:2,56 --> 2:40:3,81
We can go back to the slides.


3061
2:40:3,81 --> 2:40:11,21



3062
2:40:11,21 --> 2:40:14,34
So now we've got a nice
mechanism into the phone.


3063
2:40:14,34 --> 2:40:18,84



3064
2:40:18,84 --> 2:40:21,96
The server's kind of the
really nice part.


3065
2:40:21,96 --> 2:40:25,41
It's the nuts and bolts that
kind of drives Marionette and


3066
2:40:25,41 --> 2:40:28,98
kind of gives us all the in's
into the device and into the


3067
2:40:28,98 --> 2:40:32,42
browser to be able
to control it.


3068
2:40:32,42 --> 2:40:35,25
The mechanism we're using
is what we've called the


3069
2:40:35,25 --> 2:40:38,24
JavaScript transport layer.


3070
2:40:38,24 --> 2:40:43,38
It's just kind of raw TCP
into the browser.


3071
2:40:43,38 --> 2:40:47,56
But we now can send JSON
payloads through it.


3072
2:40:47,56 --> 2:40:50,97
I just got a few little extra
bits and pieces added to it,


3073
2:40:50,97 --> 2:40:53,9
which aren't too important
at the moment.


3074
2:40:53,9 --> 2:40:56,52
But it gives us this
mechanism.


3075
2:40:56,52 --> 2:40:59,78
It's being used at the moment by
the remote debugger, which


3076
2:40:59,78 --> 2:41:1,71
is part of Firefox.


3077
2:41:1,71 --> 2:41:5,39
So like if you have an Android
device with Firefox for


3078
2:41:5,39 --> 2:41:10,52
Android, you can kind of connect
your phone to a host


3079
2:41:10,52 --> 2:41:13,24
computer and then debug
from Firefox


3080
2:41:13,24 --> 2:41:14,45
straight on to the device.


3081
2:41:14,45 --> 2:41:16,0
It's the same technology
as that.


3082
2:41:16,0 --> 2:41:18,65
We just kind of now are using
it for automation.


3083
2:41:18,65 --> 2:41:25,85
We've created our own actor,
because it's a actor


3084
2:41:25,85 --> 2:41:27,93
relationship in it.


3085
2:41:27,93 --> 2:41:30,47
And the actor then receives
all the commands that are


3086
2:41:30,47 --> 2:41:32,15
coming through.


3087
2:41:32,15 --> 2:41:35,59
It kind of breaks down what's
in the JSON payload and then


3088
2:41:35,59 --> 2:41:40,2
kind of decides where
it needs to go.


3089
2:41:40,2 --> 2:41:43,28
Normally it goes through
to a listener.


3090
2:41:43,28 --> 2:41:45,68
And a listener attaches itself
to all the content that's


3091
2:41:45,68 --> 2:41:47,39
happening on the page.


3092
2:41:47,39 --> 2:41:51,29
So like if you have multiple
frames, a listener gets


3093
2:41:51,29 --> 2:41:54,44
attached to each frame so that
when we switch from frame to


3094
2:41:54,44 --> 2:41:58,25
frame, we just can carry
on executing.


3095
2:41:58,25 --> 2:42:2,87



3096
2:42:2,87 --> 2:42:5,4
So where are we using it?


3097
2:42:5,4 --> 2:42:9,52
We're currently using it
on devices, emulators.


3098
2:42:9,52 --> 2:42:13,5
We've got a special build
of Firefox for


3099
2:42:13,5 --> 2:42:16,47
desktop called B2G desktop.


3100
2:42:16,47 --> 2:42:20,75
It's kind of got a number of
all the things that we need


3101
2:42:20,75 --> 2:42:24,32
for B2G, minus hardware
things.


3102
2:42:24,32 --> 2:42:28,12
And we're using it on Firefox.


3103
2:42:28,12 --> 2:42:31,765
Marionette is now a tier
one testing frameworks.


3104
2:42:31,765 --> 2:42:35,42
So that kind of means that
withing Mozilla, if you push


3105
2:42:35,42 --> 2:42:38,76
something into our repository
and it breaks a Marionette


3106
2:42:38,76 --> 2:42:40,666
test, it will be backed
out, and you kind


3107
2:42:40,666 --> 2:42:43,8
of need to fix it.


3108
2:42:43,8 --> 2:42:49,69
This is kind of how we
view our test things.


3109
2:42:49,69 --> 2:42:51,81
I know it's probably not going
to be to viewable.


3110
2:42:51,81 --> 2:42:58,35
But kind of on the left is
commits grouped by pushes into


3111
2:42:58,35 --> 2:42:59,63
a repository.


3112
2:42:59,63 --> 2:43:2,2
On the right, I've limited
the UI to only show


3113
2:43:2,2 --> 2:43:4,32
the Marionette tests.


3114
2:43:4,32 --> 2:43:6,12
That shows all the
Marionette tests.


3115
2:43:6,12 --> 2:43:9,54
So Marionette, and then
hopefully by proxy, Selenium


3116
2:43:9,54 --> 2:43:12,5
is now part of the Mozilla
kind of waterfall.


3117
2:43:12,5 --> 2:43:16,88
So every push that goes into
Gecko now tests Marionette.


3118
2:43:16,88 --> 2:43:19,55
It tests like the core
parts of Marionette.


3119
2:43:19,55 --> 2:43:21,85
And then goes off and tests all
the different parts that


3120
2:43:21,85 --> 2:43:23,42
it needs to.


3121
2:43:23,42 --> 2:43:26,97
And then in the sense of what's
to the left of the


3122
2:43:26,97 --> 2:43:29,89
Marionette part kind of shows
all the different platforms


3123
2:43:29,89 --> 2:43:30,85
that we're running on.


3124
2:43:30,85 --> 2:43:31,91
So we've got Linux.


3125
2:43:31,91 --> 2:43:32,76
We got Windows.


3126
2:43:32,76 --> 2:43:35,52
We got mobile devices.


3127
2:43:35,52 --> 2:43:37,45
So we always know that


3128
2:43:37,45 --> 2:43:39,31
Marionette's going to be there.


3129
2:43:39,31 --> 2:43:42,54
And it's become so core to
the way we do things.


3130
2:43:42,54 --> 2:43:46,98



3131
2:43:46,98 --> 2:43:48,78
So how's it used?


3132
2:43:48,78 --> 2:43:53,13
It's being retrofitted into a
number of our test feeds.


3133
2:43:53,13 --> 2:43:54,58
As Malini said, we've
got hundreds of


3134
2:43:54,58 --> 2:43:55,62
thousands of tests.


3135
2:43:55,62 --> 2:44:0,23
And we need to test that
things are working.


3136
2:44:0,23 --> 2:44:5,83
Because, essentially, Firefox
OS is a browser on a device,


3137
2:44:5,83 --> 2:44:9,64
we need to make sure that how
people manipulate the dom is


3138
2:44:9,64 --> 2:44:10,89
still working properly.


3139
2:44:10,89 --> 2:44:14,87
How people are rendering CSS
is still working properly.


3140
2:44:14,87 --> 2:44:18,9
Our reference tests are
kind of important.


3141
2:44:18,9 --> 2:44:21,77
And we need to make sure that
JavaScript and all these other


3142
2:44:21,77 --> 2:44:25,16
little bits and pieces that are
core to the way Firefox


3143
2:44:25,16 --> 2:44:27,89
works still works
on the device.


3144
2:44:27,89 --> 2:44:30,36
Except we can't use the testing
frameworks before.


3145
2:44:30,36 --> 2:44:32,7
We just need to kind of make
sure the tests work.


3146
2:44:32,7 --> 2:44:35,35



3147
2:44:35,35 --> 2:44:36,65
And we are also starting
to go into


3148
2:44:36,65 --> 2:44:39,45
[INAUDIBLE], so telephony.


3149
2:44:39,45 --> 2:44:43,77
It's kind of important for a
mobile operating system to be


3150
2:44:43,77 --> 2:44:45,54
able to make telephone calls.


3151
2:44:45,54 --> 2:44:48,9
Internet is all great and all
that, but people like to use


3152
2:44:48,9 --> 2:44:51,143
phones to make phone calls
for some silly reason.


3153
2:44:51,143 --> 2:44:56,2



3154
2:44:56,2 --> 2:45:0,68
And then we've got this
interesting part.


3155
2:45:0,68 --> 2:45:5,17
A mobile device has got multiple
parts to it that we


3156
2:45:5,17 --> 2:45:7,98
need to make sure that
we can access.


3157
2:45:7,98 --> 2:45:10,61
So the browser needs
to access these.


3158
2:45:10,61 --> 2:45:13,16
And then from an automation and
testing point of view, we


3159
2:45:13,16 --> 2:45:16,63
need to be able to instrument
them and test them.


3160
2:45:16,63 --> 2:45:19,18
So there's different parts.


3161
2:45:19,18 --> 2:45:20,21
There's GPS.


3162
2:45:20,21 --> 2:45:20,97
There's Bluetooth.


3163
2:45:20,97 --> 2:45:23,85
There's USB.


3164
2:45:23,85 --> 2:45:26,2
There's all these different
parts of the system-- cameras,


3165
2:45:26,2 --> 2:45:27,21
things like that.


3166
2:45:27,21 --> 2:45:30,99
And browsers needs to be able
to speak to the hardware.


3167
2:45:30,99 --> 2:45:33,17
The hardware goes, well,
here's all the


3168
2:45:33,17 --> 2:45:34,46
inputs that you want.


3169
2:45:34,46 --> 2:45:36,79
And then we go from there.


3170
2:45:36,79 --> 2:45:39,36
And we need to test
all of this.


3171
2:45:39,36 --> 2:45:45,98
So I'm going to show you a quick
test on the computer.


3172
2:45:45,98 --> 2:45:48,82
So it's going to run
an emulator.


3173
2:45:48,82 --> 2:45:52,4



3174
2:45:52,4 --> 2:45:55,71
Emulators, just by nature,
are kind of slow.


3175
2:45:55,71 --> 2:45:57,8
What this is going to do is
this is going to run a


3176
2:45:57,8 --> 2:45:59,89
geolocation test.


3177
2:45:59,89 --> 2:46:1,42
It's starts with the emulator.


3178
2:46:1,42 --> 2:46:4,55
It's going to set a number of
different bits of information


3179
2:46:4,55 --> 2:46:6,96
in the background to the
emulator, then check it.


3180
2:46:6,96 --> 2:46:10,29



3181
2:46:10,29 --> 2:46:12,175
Make sure your emulator style--
it's very slow.


3182
2:46:12,175 --> 2:46:17,54



3183
2:46:17,54 --> 2:46:20,29
Runs everything.


3184
2:46:20,29 --> 2:46:23,51
Hooray, and all our
tests pass.


3185
2:46:23,51 --> 2:46:26,59
But you can see it sets
information, and then it's


3186
2:46:26,59 --> 2:46:30,42
retrieved information, checked
everything's working.


3187
2:46:30,42 --> 2:46:31,67
Back to slides please.


3188
2:46:31,67 --> 2:46:37,38



3189
2:46:37,38 --> 2:46:42,29
And then we also need to make
sure that the UI is working.


3190
2:46:42,29 --> 2:46:47,85
People need to make sure that
they've got a functioning


3191
2:46:47,85 --> 2:46:51,66
device that if they go to make
a phone call, if they go to


3192
2:46:51,66 --> 2:46:55,3
set an alarm, they go to do all
these things, those key


3193
2:46:55,3 --> 2:46:58,55
parts of the system are working
as they expect.


3194
2:46:58,55 --> 2:47:2,88
They're working in
a certain manner.


3195
2:47:2,88 --> 2:47:7,6
But it's not just making sure
that Mozilla can make sure


3196
2:47:7,6 --> 2:47:10,6
that the UI's working
properly.


3197
2:47:10,6 --> 2:47:14,79
OEMs who make the devices and
are going to be flashing them,


3198
2:47:14,79 --> 2:47:17,56
they're kind of stripped on
making sure that things work.


3199
2:47:17,56 --> 2:47:21,5
Because it's kind of their name
that's on the hardware


3200
2:47:21,5 --> 2:47:22,48
when it goes out to people.


3201
2:47:22,48 --> 2:47:27,28
So they want it to be of
a certain quality.


3202
2:47:27,28 --> 2:47:32,6
And for those who've worked with
iOS and with Android and


3203
2:47:32,6 --> 2:47:36,5
have tried to automate the UI
and then kind of gone gray or


3204
2:47:36,5 --> 2:47:40,43
gone bald, because you pulled
your hair out, we need to make


3205
2:47:40,43 --> 2:47:43,92
sure that we give third party
developers who want to make


3206
2:47:43,92 --> 2:47:47,58
apps a nice way to automate
the UI, if they need to.


3207
2:47:47,58 --> 2:47:51,99
Or if they just need to execute
different bits of code


3208
2:47:51,99 --> 2:47:54,44
as they see fit, we
give them that.


3209
2:47:54,44 --> 2:47:58,74
Because if you give them a nice
testing infrastructure,


3210
2:47:58,74 --> 2:48:2,11
you have a nice ecosystem
that third party


3211
2:48:2,11 --> 2:48:2,91
people want to come.


3212
2:48:2,91 --> 2:48:5,7
People want to build apps
because they can prove that


3213
2:48:5,7 --> 2:48:8,75
there app is of a
high quality.


3214
2:48:8,75 --> 2:48:11,4
So I'm going to kind
of show you a test


3215
2:48:11,4 --> 2:48:12,29
running on a device.


3216
2:48:12,29 --> 2:48:14,73



3217
2:48:14,73 --> 2:48:16,64
If we can put it on
this, please.


3218
2:48:16,64 --> 2:48:21,68



3219
2:48:21,68 --> 2:48:22,93
This is where I hope it works.


3220
2:48:22,93 --> 2:48:25,97



3221
2:48:25,97 --> 2:48:27,25
If it works, that'll be fine.


3222
2:48:27,25 --> 2:48:44,1



3223
2:48:44,1 --> 2:48:45,77
The demigods have struck.


3224
2:48:45,77 --> 2:48:46,662
MALINI DAS: There we go.


3225
2:48:46,662 --> 2:48:48,0
DAVID BURNS: No, that's me.


3226
2:48:48,0 --> 2:48:52,93



3227
2:48:52,93 --> 2:48:56,642
Let me show you how quickly
the phone resets.


3228
2:48:56,642 --> 2:48:58,499
[LAUGHTER]


3229
2:48:58,499 --> 2:49:16,247



3230
2:49:16,247 --> 2:49:23,19
DAVID BURNS: While that loads,
I'll get everything ready.


3231
2:49:23,19 --> 2:49:26,8



3232
2:49:26,8 --> 2:49:28,12
Sorry for the technical delay.


3233
2:49:28,12 --> 2:49:37,78



3234
2:49:37,78 --> 2:49:41,32
All right, take two.


3235
2:49:41,32 --> 2:49:42,57
Uh oh.


3236
2:49:42,57 --> 2:49:46,88



3237
2:49:46,88 --> 2:49:48,13
Come on.


3238
2:49:48,13 --> 2:49:51,63



3239
2:49:51,63 --> 2:49:52,88
OK.


3240
2:49:52,88 --> 2:49:58,91



3241
2:49:58,91 --> 2:50:0,16
Oh, that's why.


3242
2:50:0,16 --> 2:50:9,45



3243
2:50:9,45 --> 2:50:10,9
That look like it?


3244
2:50:10,9 --> 2:50:15,55



3245
2:50:15,55 --> 2:50:16,53
Maybe not.


3246
2:50:16,53 --> 2:50:17,2
Oh, yes.


3247
2:50:17,2 --> 2:50:18,4
All right.


3248
2:50:18,4 --> 2:50:24,55
So we try and reset the phone
between tests where possible,


3249
2:50:24,55 --> 2:50:28,5
because some parts we can't
kind of clear out.


3250
2:50:28,5 --> 2:50:33,65
So what it's doing is it's just
going to set an alarm a


3251
2:50:33,65 --> 2:50:37,11
few times and then make sure
everything's working.


3252
2:50:37,11 --> 2:50:40,22



3253
2:50:40,22 --> 2:50:42,476
And I've broken it?


3254
2:50:42,476 --> 2:50:48,12



3255
2:50:48,12 --> 2:50:50,315
Yeah, this was working earlier.


3256
2:50:50,315 --> 2:50:50,73
Oh well.


3257
2:50:50,73 --> 2:50:50,85
[LAUGHTER]


3258
2:50:50,85 --> 2:50:53,0
MALINI DAS: I swear it totally
was working earlier, right


3259
2:50:53,0 --> 2:50:53,99
before the talk.


3260
2:50:53,99 --> 2:50:56,86
DAVID BURNS: Yeah, OK, we'll
just kind of skip the


3261
2:50:56,86 --> 2:50:59,2
technical difficulties, and
we'll go back to slides.


3262
2:50:59,2 --> 2:51:2,6



3263
2:51:2,6 --> 2:51:5,94
So where we've been.


3264
2:51:5,94 --> 2:51:7,97
A lot of our testing
infrastructure we kind of had


3265
2:51:7,97 --> 2:51:9,28
to be building on
the fly as well.


3266
2:51:9,28 --> 2:51:13,7



3267
2:51:13,7 --> 2:51:16,2
Because as Malini said, we kind
of were late to the game.


3268
2:51:16,2 --> 2:51:18,88
We were invited late
to the game.


3269
2:51:18,88 --> 2:51:21,94
But we've had to play catch
up very quickly.


3270
2:51:21,94 --> 2:51:26,41
So we had done Jenkins just
running in the cloud, running


3271
2:51:26,41 --> 2:51:28,9
our unit tests, our
web API tests.


3272
2:51:28,9 --> 2:51:31,93
So kind of this hardware
part tests.


3273
2:51:31,93 --> 2:51:34,67
And then we were running
then against emulators.


3274
2:51:34,67 --> 2:51:38,9
Luckily, when were at this
stage, we didn't have hundreds


3275
2:51:38,9 --> 2:51:41,6
of engineers working
on Firefox OS.


3276
2:51:41,6 --> 2:51:42,96
But then things changed.


3277
2:51:42,96 --> 2:51:45,4
And we started getting more
engineers than we needed.


3278
2:51:45,4 --> 2:51:47,99
And more of the system
started being built.


3279
2:51:47,99 --> 2:51:52,1
And we needed to start running
our unit tests, our web API


3280
2:51:52,1 --> 2:51:54,64
tests and UI tests.


3281
2:51:54,64 --> 2:51:56,4
Because we need to make
sure that all the


3282
2:51:56,4 --> 2:51:58,67
functionality is working.


3283
2:51:58,67 --> 2:52:3,69
[INAUDIBLE], which is the code
name for the UI needs to be


3284
2:52:3,69 --> 2:52:5,91
working at a certain level.


3285
2:52:5,91 --> 2:52:8,79
And we're running these on
emulators and we're running


3286
2:52:8,79 --> 2:52:10,32
them on PandaBoards.


3287
2:52:10,32 --> 2:52:13,2
For those that don't know, a
PandaBoard is just a Android


3288
2:52:13,2 --> 2:52:14,556
development board.


3289
2:52:14,556 --> 2:52:17,66
It allows us to do
some neat things.


3290
2:52:17,66 --> 2:52:21,51
It's essentially just a Nexus
S without a screen, and kind


3291
2:52:21,51 --> 2:52:22,54
of looks like a [INAUDIBLE]


3292
2:52:22,54 --> 2:52:25,67
or raspberry pie.


3293
2:52:25,67 --> 2:52:28,82
And then we went from there and
we started actually also


3294
2:52:28,82 --> 2:52:30,75
testing on real devices.


3295
2:52:30,75 --> 2:52:35,3
So we've got some devices that
our OEM said was going to be


3296
2:52:35,3 --> 2:52:39,876
over some ilk, and we started
testing against those.


3297
2:52:39,876 --> 2:52:42,705
And soon we're going to be
testing against the devices


3298
2:52:42,705 --> 2:52:44,77
that we're gonna also be sending
out to the public.


3299
2:52:44,77 --> 2:52:47,88



3300
2:52:47,88 --> 2:52:54,13
This is what a rack of
PandaBoards looks like.


3301
2:52:54,13 --> 2:52:57,58
There's a number in there--


3302
2:52:57,58 --> 2:52:59,9
this is a unit that was
designed by our IT


3303
2:52:59,9 --> 2:53:1,64
department--


3304
2:53:1,64 --> 2:53:4,16
and it's a number
of PandaBoards.


3305
2:53:4,16 --> 2:53:7,26
They've all got ethernet,
they've all got power.


3306
2:53:7,26 --> 2:53:11,58
And what happens is, whenever
a test is ready,


3307
2:53:11,58 --> 2:53:14,58
we flash the device.


3308
2:53:14,58 --> 2:53:17,34
It's got an SD card on it that
we can change, because SD


3309
2:53:17,34 --> 2:53:20,71
cards only have a certain
lifespan.


3310
2:53:20,71 --> 2:53:22,38
We can swap out.


3311
2:53:22,38 --> 2:53:26,52
It flashes the SD card, then
we run our tests and we go


3312
2:53:26,52 --> 2:53:27,81
from there.


3313
2:53:27,81 --> 2:53:31,98
One of the things mentioned
earlier is that we also suffer


3314
2:53:31,98 --> 2:53:34,5
greatly from flaky tests.


3315
2:53:34,5 --> 2:53:37,42
Mobile is one of those places
where you're going to get a


3316
2:53:37,42 --> 2:53:38,65
lot of flaky tests.


3317
2:53:38,65 --> 2:53:41,17
And a lot of it also comes
down to hardware.


3318
2:53:41,17 --> 2:53:45,43
So one of the nice things about
the Panda set up is


3319
2:53:45,43 --> 2:53:51,2
we've got a framework called
Mozpool and in our pool we've


3320
2:53:51,2 --> 2:53:54,87
got lifeguards who check
how things are going.


3321
2:53:54,87 --> 2:53:57,75
If they notice that a certain
board has an increase in


3322
2:53:57,75 --> 2:54:0,99
failures, it starts taking that
board out of commission,


3323
2:54:0,99 --> 2:54:2,67
kind of let someone know.


3324
2:54:2,67 --> 2:54:6,19
And then we can just hot-swap
the device.


3325
2:54:6,19 --> 2:54:8,85
Because this is just in a data
center, so our IT department


3326
2:54:8,85 --> 2:54:10,55
can go there, swap it
out and carry on.


3327
2:54:10,55 --> 2:54:16,31



3328
2:54:16,31 --> 2:54:18,93
The other part of our test
infrastructure is making sure


3329
2:54:18,93 --> 2:54:22,15
that we can do stress tests
against the device.


3330
2:54:22,15 --> 2:54:24,52



3331
2:54:24,52 --> 2:54:27,23
Just running and running and
running and running tests,


3332
2:54:27,23 --> 2:54:29,77
because people don't
really switch off


3333
2:54:29,77 --> 2:54:31,2
their phones nowadays.


3334
2:54:31,2 --> 2:54:33,8
They go to bed with
them on, wake up


3335
2:54:33,8 --> 2:54:35,15
and it's still running.


3336
2:54:35,15 --> 2:54:39,93
And that's the major use case
that people are going to be


3337
2:54:39,93 --> 2:54:42,41
using and we need to make sure
that the device doesn't become


3338
2:54:42,41 --> 2:54:44,54
sluggish over time, it
doesn't crash all the


3339
2:54:44,54 --> 2:54:45,94
time, things like that.


3340
2:54:45,94 --> 2:54:49,33
We need to do all these
really weird and


3341
2:54:49,33 --> 2:54:51,36
wonderful stress tests.


3342
2:54:51,36 --> 2:54:55,99
We started doing fuzzing over
it with a tool called


3343
2:54:55,99 --> 2:54:56,63
Orangutan--


3344
2:54:56,63 --> 2:55:0,4
which was written by Will
who's in our team--


3345
2:55:0,4 --> 2:55:3,79
which just does gestures on the
device at a very low level


3346
2:55:3,79 --> 2:55:5,37
and then sees what survives.


3347
2:55:5,37 --> 2:55:8,6



3348
2:55:8,6 --> 2:55:10,14
And we've started doing
performance


3349
2:55:10,14 --> 2:55:12,12
test against devices.


3350
2:55:12,12 --> 2:55:14,84
One of the important things that
people wanted to be able


3351
2:55:14,84 --> 2:55:16,77
to do is play games.


3352
2:55:16,77 --> 2:55:19,49
Most people play games on
smart phones these days.


3353
2:55:19,49 --> 2:55:23,7
So we want to make sure that if
you're playing a game, that


3354
2:55:23,7 --> 2:55:26,645
you're getting a high
enough frame rate.


3355
2:55:26,645 --> 2:55:30,98
We want to aim for that 60
frames a second so we can make


3356
2:55:30,98 --> 2:55:34,96
sure that it is not jerky, it's
not anything like that.


3357
2:55:34,96 --> 2:55:38,66
There's no jank, which is where
you try scrolling, it


3358
2:55:38,66 --> 2:55:40,355
stops for a bit and carries
on scrolling.


3359
2:55:40,355 --> 2:55:43,75
We want to make sure that those
things aren't there.


3360
2:55:43,75 --> 2:55:48,44
And these types of tests mean
that we can make sure that


3361
2:55:48,44 --> 2:55:52,96
when we deliver this device to
people, to OEMs, and when


3362
2:55:52,96 --> 2:55:56,0
third party people want to
start using it, they have


3363
2:55:56,0 --> 2:55:59,5
their confidence in
what we've done.


3364
2:55:59,5 --> 2:56:4,43



3365
2:56:4,43 --> 2:56:6,8
And that's it really.


3366
2:56:6,8 --> 2:56:11,24
It's been a huge learning
experience for our team.


3367
2:56:11,24 --> 2:56:13,94
We've learned some number of
weird and wonderful things


3368
2:56:13,94 --> 2:56:16,33
along the way, and we've tried
to solve a number of problems.


3369
2:56:16,33 --> 2:56:19,18
And hopefully we've shared
it up with you all.


3370
2:56:19,18 --> 2:56:19,56
Thanks.


3371
2:56:19,56 --> 2:56:20,25
TONY VOELLM: Great.


3372
2:56:20,25 --> 2:56:22,49
Great, thank you David
and Malini.


3373
2:56:22,49 --> 2:56:27,19
[APPLAUSE]


3374
2:56:27,19 --> 2:56:29,22
TONY VOELLM: That
was fantastic.


3375
2:56:29,22 --> 2:56:30,84
Actually I really loved
that last picture


3376
2:56:30,84 --> 2:56:32,85
there with the racks.


3377
2:56:32,85 --> 2:56:35,82
I also learned the danger of
calling APIs rest APIs,


3378
2:56:35,82 --> 2:56:39,3
because sometimes your devices
just take a rest.


3379
2:56:39,3 --> 2:56:41,58
[LAUGHTER]


3380
2:56:41,58 --> 2:56:43,7
TONY VOELLM: So with that, if
you would like to ask a


3381
2:56:43,7 --> 2:56:45,27
question, there's a mic
in the back there


3382
2:56:45,27 --> 2:56:46,93
and a mic over there.


3383
2:56:46,93 --> 2:56:49,795
Feel free to grab the mic if
you want to ask a question.


3384
2:56:49,795 --> 2:56:52,27
And in the meantime, we'll
grab one off of


3385
2:56:52,27 --> 2:56:54,36
the moderator here.


3386
2:56:54,36 --> 2:56:56,86
So first question up.


3387
2:56:56,86 --> 2:57:1,67
How do you automate recovery for
devices that fall off USB


3388
2:57:1,67 --> 2:57:4,77
or get wedged outright
during testing?


3389
2:57:4,77 --> 2:57:6,24
MALINI DAS: Do you
want to take it?


3390
2:57:6,24 --> 2:57:6,91
OK, well it depends
on the device.


3391
2:57:6,91 --> 2:57:10,14
So we have the PandaBoards which
you can power cycle.


3392
2:57:10,14 --> 2:57:12,35
And we don't use USB
for them, we


3393
2:57:12,35 --> 2:57:14,72
communicate over the network.


3394
2:57:14,72 --> 2:57:16,22
Wedge outright during testing?


3395
2:57:16,22 --> 2:57:17,45
I don't really understand
what that means,


3396
2:57:17,45 --> 2:57:18,62
but perhaps you do.


3397
2:57:18,62 --> 2:57:19,32
[LAUGHS]


3398
2:57:19,32 --> 2:57:23,82
But for other devices, we have
to power cycle them.


3399
2:57:23,82 --> 2:57:28,89
We have some tests run directly
against our phones,


3400
2:57:28,89 --> 2:57:31,57
and we have to currently
manually reboot them.


3401
2:57:31,57 --> 2:57:34,13
But we have someone working on a
solution for that right now,


3402
2:57:34,13 --> 2:57:37,11
because manually rebooting
them is just not


3403
2:57:37,11 --> 2:57:38,145
sustainable at all.


3404
2:57:38,145 --> 2:57:41,77
DAVID BURNS: Yeah, we ask our
manager to go-- because we've


3405
2:57:41,77 --> 2:57:44,86
got a big Faraday cage in our
Mountain View office-- and


3406
2:57:44,86 --> 2:57:47,18
every so often we just ask our
manager to go work in there


3407
2:57:47,18 --> 2:57:49,22
for the day and just power cycle
whenever we need them.


3408
2:57:49,22 --> 2:57:52,1
MALINI DAS: Yeah, so
that'll be solved.


3409
2:57:52,1 --> 2:57:53,76
TONY VOELLM: You've found
a use for your manager.


3410
2:57:53,76 --> 2:57:54,27
Perfect.


3411
2:57:54,27 --> 2:57:54,65
All right.


3412
2:57:54,65 --> 2:57:56,42
Looks like we had
some questions.


3413
2:57:56,42 --> 2:57:58,76
I think you were up first,
so ask away.


3414
2:57:58,76 --> 2:58:0,65
AUDIENCE: Sure.


3415
2:58:0,65 --> 2:58:3,96
You touched on UI performance
testing at the end there.


3416
2:58:3,96 --> 2:58:7,555
But what tools do you use to
actually validate the UI


3417
2:58:7,555 --> 2:58:8,0
performance?


3418
2:58:8,0 --> 2:58:10,13
Do you have some kind of video
recording or people who are


3419
2:58:10,13 --> 2:58:10,96
watching it?


3420
2:58:10,96 --> 2:58:11,73
MALINI DAS: Yeah.


3421
2:58:11,73 --> 2:58:14,3
So we have this tool called
Eideticker, and what that does


3422
2:58:14,3 --> 2:58:18,5
is that it's just a camera
that's focused on the screen.


3423
2:58:18,5 --> 2:58:22,57
And it captures it and checks
that the data is moving


3424
2:58:22,57 --> 2:58:24,64
actually at 60 frames
per second.


3425
2:58:24,64 --> 2:58:28,11
So we have two ways of capturing
that video data.


3426
2:58:28,11 --> 2:58:33,3
One is to plug it in a video
out cable directly to the


3427
2:58:33,3 --> 2:58:36,71
phone and send it directly to
our computer and analyze HTMI


3428
2:58:36,71 --> 2:58:38,56
output directly.


3429
2:58:38,56 --> 2:58:40,28
And the other way-- which is
what we're experimenting with


3430
2:58:40,28 --> 2:58:42,54
right now-- is with high
speed cameras.


3431
2:58:42,54 --> 2:58:45,29
And we're just making sure that
each of the frames are


3432
2:58:45,29 --> 2:58:46,95
changing at the rate
at which we expect.


3433
2:58:46,95 --> 2:58:48,45
AUDIENCE: Cool, thanks.


3434
2:58:48,45 --> 2:58:51,83
TONY VOELLM: So following to
that, so as you're sort of


3435
2:58:51,83 --> 2:58:55,53
swiping or moving, one thing is
the frame rate, but how do


3436
2:58:55,53 --> 2:58:59,196
you actually know the animation
is happening?


3437
2:58:59,196 --> 2:59:1,48
DAVID BURNS: I don't know
about the animation.


3438
2:59:1,48 --> 2:59:4,67
But when it comes to swiping,
one of the key things that


3439
2:59:4,67 --> 2:59:8,92
brought us to doing this type of
testing was when we rewrote


3440
2:59:8,92 --> 2:59:11,11
a lot of the Firefox for
Android stuff, when you


3441
2:59:11,11 --> 2:59:12,81
scrolled, we were getting
a lot of checkerboarding


3442
2:59:12,81 --> 2:59:19,23
happening, because the drawing
wasn't happening fast enough.


3443
2:59:19,23 --> 2:59:21,78
So we created a framework.


3444
2:59:21,78 --> 2:59:22,72
Well, I say we.


3445
2:59:22,72 --> 2:59:26,58
Will Lachance, he's on our team,
he created a framework


3446
2:59:26,58 --> 2:59:31,19
called Eideticker, and that
just watches for these


3447
2:59:31,19 --> 2:59:35,6
checkerboarding and then
works through that.


3448
2:59:35,6 --> 2:59:39,66
He created Orangutan, which
instruments Android and tells


3449
2:59:39,66 --> 2:59:41,94
it how to scroll and
things like that.


3450
2:59:41,94 --> 2:59:45,7
So it's allowed us to test
against other browsers so we


3451
2:59:45,7 --> 2:59:47,72
could see how well we
checkerboarded.


3452
2:59:47,72 --> 2:59:50,11
Well, we don't want to
checkerboard, but how other


3453
2:59:50,11 --> 2:59:52,868
browsers were handling
the same website.


3454
2:59:52,868 --> 2:59:54,5
TONY VOELLM: Great.


3455
2:59:54,5 --> 2:59:54,69
Second up?


3456
2:59:54,69 --> 2:59:56,11
I think you were up.


3457
2:59:56,11 --> 2:59:58,16
And if you want, you can say
your name and where you're


3458
2:59:58,16 --> 2:59:59,63
from and then ask
your question.


3459
2:59:59,63 --> 3:0:0,7
If you just want to ask,
that's fine too.


3460
3:0:0,7 --> 3:0:3,74
AUDIENCE: Hi, I'm Daniel from
SNAP Interactive, and my


3461
3:0:3,74 --> 3:0:7,7
question goes to security.


3462
3:0:7,7 --> 3:0:9,84
Obviously, Marionette is a
really great thing that allows


3463
3:0:9,84 --> 3:0:11,81
you to drive everything
about the phone.


3464
3:0:11,81 --> 3:0:15,62
But what if someone were able
to get access to that and do


3465
3:0:15,62 --> 3:0:17,38
those kinds of things to your
phone that you don't


3466
3:0:17,38 --> 3:0:18,9
want them to do?


3467
3:0:18,9 --> 3:0:20,705
How do you prevent something
like that from happening?


3468
3:0:20,705 --> 3:0:24,27
DAVID BURNS: At the moment,
Marionette is only available


3469
3:0:24,27 --> 3:0:25,68
in engineering builds.


3470
3:0:25,68 --> 3:0:31,57
So you have to build
it into Firefox OS.


3471
3:0:31,57 --> 3:0:36,87
We're working with our security
team to work out a


3472
3:0:36,87 --> 3:0:39,83
nice way for developers to be
able to have Marionette.


3473
3:0:39,83 --> 3:0:44,76
So you just go in, buy a phone
from your local phone company,


3474
3:0:44,76 --> 3:0:48,81
and then start working
with it.


3475
3:0:48,81 --> 3:0:52,63
Because yes, security is one
of our biggest concerns.


3476
3:0:52,63 --> 3:0:56,17
Privacy as well, because people
might be doing internet


3477
3:0:56,17 --> 3:0:59,13
banking on things like this, and
we want to make sure that


3478
3:0:59,13 --> 3:1:2,6
they feel secure that they
can do all these things.


3479
3:1:2,6 --> 3:1:5,62
But also that if a developer
goes and buys it, they can


3480
3:1:5,62 --> 3:1:6,47
start working with it.


3481
3:1:6,47 --> 3:1:11,26
So we've got a number of ideas,
especially for desktop,


3482
3:1:11,26 --> 3:1:13,1
how to sort the desktop
problem.


3483
3:1:13,1 --> 3:1:15,56
The mobile problem at the
moment, it's just don't put


3484
3:1:15,56 --> 3:1:16,37
Marionette on there.


3485
3:1:16,37 --> 3:1:20,14
And then, as and when we can
solve that problem, it'll


3486
3:1:20,14 --> 3:1:22,856
start slowly being
put back in.


3487
3:1:22,856 --> 3:1:23,58
AUDIENCE: Thank you.


3488
3:1:23,58 --> 3:1:25,11
TONY VOELLM: Great, thank you.


3489
3:1:25,11 --> 3:1:27,58
And another question
over here please.


3490
3:1:27,58 --> 3:1:28,55
AUDIENCE: Yeah, hi.


3491
3:1:28,55 --> 3:1:29,87
I'm Jonathan from Salsa Labs.


3492
3:1:29,87 --> 3:1:35,26
And if I recall correctly, you
guys said that you in your


3493
3:1:35,26 --> 3:1:38,69
WebDriver Plus protocol,
you speak JSON over


3494
3:1:38,69 --> 3:1:41,56
TCP, rather than HTTP.


3495
3:1:41,56 --> 3:1:46,25
So I'm wondering whether I, as
a potential Firefox OS app


3496
3:1:46,25 --> 3:1:50,34
developer, can use standard
Selenium client libraries that


3497
3:1:50,34 --> 3:1:52,84
already exist to speak to
Marionette or whether I have


3498
3:1:52,84 --> 3:1:54,75
to base it off of something
you guys have written?


3499
3:1:54,75 --> 3:2:1,47
DAVID BURNS: So our Marionette
client library is 90% the same


3500
3:2:1,47 --> 3:2:2,89
as the Selenium library.


3501
3:2:2,89 --> 3:2:5,93



3502
3:2:5,93 --> 3:2:8,67
Ideally when we get to a certain
place, what's going to


3503
3:2:8,67 --> 3:2:13,59
happen is WebDriver's got an
idea of the commands that it's


3504
3:2:13,59 --> 3:2:15,89
got and then it's got
a command executor.


3505
3:2:15,89 --> 3:2:18,22
And what we want to try to do is
just switch in the command


3506
3:2:18,22 --> 3:2:21,94
executor for Firefox only and
then it just knows to speak


3507
3:2:21,94 --> 3:2:23,77
through that and then works.


3508
3:2:23,77 --> 3:2:24,73
AUDIENCE: Thanks.


3509
3:2:24,73 --> 3:2:27,13
AUDIENCE: [INAUDIBLE]


3510
3:2:27,13 --> 3:2:29,53
HTTP and JSON [INAUDIBLE]?


3511
3:2:29,53 --> 3:2:35,12
DAVID BURNS: And the spec also
says that we have to do HTTP.


3512
3:2:35,12 --> 3:2:39,85
We've already got a shim that
people can use, but my gut


3513
3:2:39,85 --> 3:2:42,5
feeling is that the Selenium
project is probably going to


3514
3:2:42,5 --> 3:2:47,73
be using straight into it, and
then if you're not one of the


3515
3:2:47,73 --> 3:2:51,6
languages that the Selenium
project manages itself, you'll


3516
3:2:51,6 --> 3:2:52,52
probably go through the shim.


3517
3:2:52,52 --> 3:2:56,4
So we're still going to have
that and it just essentially


3518
3:2:56,4 --> 3:2:59,99
takes the HTTP, maps it down to
a RTCP connection and goes


3519
3:2:59,99 --> 3:3:1,44
from there.


3520
3:3:1,44 --> 3:3:3,9
TONY VOELLM: So let me take a
question from the moderator so


3521
3:3:3,9 --> 3:3:6,84
those that are watching live and
remotely also get to ask


3522
3:3:6,84 --> 3:3:8,9
some questions here.


3523
3:3:8,9 --> 3:3:10,45



3524
3:3:10,45 --> 3:3:12,91
I can throw this one over
to Malini, I guess.


3525
3:3:12,91 --> 3:3:17,54
Do you prefer to run your
automated tests on real


3526
3:3:17,54 --> 3:3:18,81
devices or emulators?


3527
3:3:18,81 --> 3:3:21,1
MALINI DAS: Well ideally,
we'd like to run


3528
3:3:21,1 --> 3:3:21,96
devices all the time.


3529
3:3:21,96 --> 3:3:24,37
But we haven't solved the
infrastructure problem of how


3530
3:3:24,37 --> 3:3:26,39
do we power cycle
these devices?


3531
3:3:26,39 --> 3:3:28,23
And devices are very finicky.


3532
3:3:28,23 --> 3:3:31,49
Emulators have been incredibly
reliable as a way of testing.


3533
3:3:31,49 --> 3:3:33,24
So we've been running
all of our tests.


3534
3:3:33,24 --> 3:3:36,66
Any time you commit code to
Mozilla, we run our tests


3535
3:3:36,66 --> 3:3:40,22
against emulators just because
they're easy to put up in VMs.


3536
3:3:40,22 --> 3:3:42,83
It's a very easy platform
for us to use.


3537
3:3:42,83 --> 3:3:45,16
And it's actually fairly
representative of the


3538
3:3:45,16 --> 3:3:46,65
environment that you're
running in.


3539
3:3:46,65 --> 3:3:49,86
So for most cases, emulators do
just fine, but we do want


3540
3:3:49,86 --> 3:3:52,364
to build out more
device testing.


3541
3:3:52,364 --> 3:3:54,86
TONY VOELLM: OK, and
last question.


3542
3:3:54,86 --> 3:3:56,3
And then I'll do some
announcements


3543
3:3:56,3 --> 3:3:56,79
right after this question.


3544
3:3:56,79 --> 3:3:58,44
So please, from the
audience again.


3545
3:3:58,44 --> 3:3:59,62
AUDIENCE: This is Quam.


3546
3:3:59,62 --> 3:4:1,74
I'm from Android Test
Engineering.


3547
3:4:1,74 --> 3:4:6,63
So from a mobile OS testing
perspective, I think there's a


3548
3:4:6,63 --> 3:4:9,95
lot of stack between what you're
offering to the app


3549
3:4:9,95 --> 3:4:14,17
developer down to maybe the
kernel or the driver level.


3550
3:4:14,17 --> 3:4:18,66
How do you solve the problem of
poking layers in between?


3551
3:4:18,66 --> 3:4:23,15
Because from the presentation,
a lot of the cases I've seen


3552
3:4:23,15 --> 3:4:28,812
are mostly integration level
or functional testing.


3553
3:4:28,812 --> 3:4:30,49
How do you poke levels
in between?


3554
3:4:30,49 --> 3:4:36,48
And also, in related to the
question you just answered,


3555
3:4:36,48 --> 3:4:41,2
there are device specific
characteristics or [INAUDIBLE]


3556
3:4:41,2 --> 3:4:42,75
or problems.


3557
3:4:42,75 --> 3:4:45,535
When you test mostly
on emulator, how do


3558
3:4:45,535 --> 3:4:46,785
you solve the problem?


3559
3:4:46,785 --> 3:4:49,761



3560
3:4:49,761 --> 3:4:51,24
MALINI DAS: For the first
question, would you


3561
3:4:51,24 --> 3:4:52,3
like to take that?


3562
3:4:52,3 --> 3:4:52,446
I'll take the emulator one.


3563
3:4:52,446 --> 3:4:53,3
DAVID BURNS: OK.


3564
3:4:53,3 --> 3:4:57,79
So for the first one, one of
things Malini mentioned during


3565
3:4:57,79 --> 3:5:0,44
the talk was that we can set
context and we can switch


3566
3:5:0,44 --> 3:5:3,17
between different contexts
within the browser.


3567
3:5:3,17 --> 3:5:7,23
So 90% of the time, what
app developers


3568
3:5:7,23 --> 3:5:7,83
are going to be using--


3569
3:5:7,83 --> 3:5:10,77
well, actually probably
app developers are


3570
3:5:10,77 --> 3:5:12,99
going to use it 99.9%.


3571
3:5:12,99 --> 3:5:14,87
They're going to be running
everything in the content


3572
3:5:14,87 --> 3:5:18,83
layer, which is just your
average web page.


3573
3:5:18,83 --> 3:5:23,35
For what we're doing, we have
frameworks like what we call


3574
3:5:23,35 --> 3:5:23,71
[INAUDIBLE]


3575
3:5:23,71 --> 3:5:25,32
Test and things like that.


3576
3:5:25,32 --> 3:5:30,53
And what that does is that will
speak through JavaScript


3577
3:5:30,53 --> 3:5:36,3
into the Chrome layer and then
the best use case I can think


3578
3:5:36,3 --> 3:5:38,41
of as to how we test the dom.


3579
3:5:38,41 --> 3:5:40,28
A lot of the dom stuff will be
happening and that will be


3580
3:5:40,28 --> 3:5:43,8
happening in privileged space,
kind of then pushes out to the


3581
3:5:43,8 --> 3:5:44,67
content space.


3582
3:5:44,67 --> 3:5:47,13
And we need to make sure that
when it manipulates it in a


3583
3:5:47,13 --> 3:5:50,0
certain way, that we can then
instrument it that way.


3584
3:5:50,0 --> 3:5:54,31
So we can sit in the dom like
in the Chrome space, the


3585
3:5:54,31 --> 3:5:58,64
browser Chrome, and then just
see what it's doing, ask it


3586
3:5:58,64 --> 3:6:1,26
questions, and then get
information back.


3587
3:6:1,26 --> 3:6:1,6
We have--


3588
3:6:1,6 --> 3:6:4,49
TONY VOELLM: And with that,
Malini, you have 10 seconds,


3589
3:6:4,49 --> 3:6:6,78
and then you two can
chat at lunch.


3590
3:6:6,78 --> 3:6:7,452
DAVID BURNS: Yeah.


3591
3:6:7,452 --> 3:6:8,1
TONY VOELLM: So you
get 10 seonds.


3592
3:6:8,1 --> 3:6:8,475
MALINI DAS: Sure.


3593
3:6:8,475 --> 3:6:12,88
So for device specific
flakiness, on the emulator we


3594
3:6:12,88 --> 3:6:16,52
are able to distribute to other
people in our community


3595
3:6:16,52 --> 3:6:19,8
so that they can use it and
test and make sure that it


3596
3:6:19,8 --> 3:6:20,48
works in this environment.


3597
3:6:20,48 --> 3:6:23,0
If it fails, then it's
really up to them to


3598
3:6:23,0 --> 3:6:24,83
fix those flaky problems.


3599
3:6:24,83 --> 3:6:27,995
But when it comes to device
specific problems, you have to


3600
3:6:27,995 --> 3:6:30,23
have the device on
hand to fix, to


3601
3:6:30,23 --> 3:6:32,21
resolve these flaky issues.


3602
3:6:32,21 --> 3:6:33,33
And that's another problem.


3603
3:6:33,33 --> 3:6:35,96
But that's why we rely on
emulators so heavily as well.


3604
3:6:35,96 --> 3:6:37,5
TONY VOELLM: All right,
thank you.


3605
3:6:37,5 --> 3:6:39,2
So we're going to break
for lunch here.


3606
3:6:39,2 --> 3:6:41,16
I have two quick
announcements.


3607
3:6:41,16 --> 3:6:43,42
If you wanted to do the topic
tables, they're going to be


3608
3:6:43,42 --> 3:6:44,8
out in the lobby.


3609
3:6:44,8 --> 3:6:46,2
We have these conference rooms,
by the way, the whole


3610
3:6:46,2 --> 3:6:46,71
conference.


3611
3:6:46,71 --> 3:6:48,56
There's four of them
out there.


3612
3:6:48,56 --> 3:6:50,62
If during any of the other
sessions you need to take a


3613
3:6:50,62 --> 3:6:53,147
break, you need to get some work
done, you're free to sit


3614
3:6:53,147 --> 3:6:56,21
in the four conference rooms
that are out there.


3615
3:6:56,21 --> 3:6:58,9
Right now though, they have some
signs posted outside as


3616
3:6:58,9 --> 3:7:0,81
to what the topics are
for each room.


3617
3:7:0,81 --> 3:7:4,6
So you can grab food and then
figure out the topic.


3618
3:7:4,6 --> 3:7:7,2
If you have any dietary
restrictions, you need a


3619
3:7:7,2 --> 3:7:10,76
kosher meal, something without
dairy, or something like that,


3620
3:7:10,76 --> 3:7:15,9
the people from our great food
service are here in the back.


3621
3:7:15,9 --> 3:7:16,766
And you can just ask one of
them to help you out and


3622
3:7:16,766 --> 3:7:18,5
they'll get you a
special meal.


3623
3:7:18,5 --> 3:7:22,34
And with that, we're going
to break until 1:15.


3624
3:7:22,34 --> 3:7:24,69
Lunch is from 12:15 to 1:00.


3625
3:7:24,69 --> 3:7:27,41
And then we're going to come
back right at 1:15, so please


3626
3:7:27,41 --> 3:7:31,38
in your seat by that time to
hear the next talk from


3627
3:7:31,38 --> 3:7:33,77
Expedia on mobile automation in


3628
3:7:33,77 --> 3:7:35,8
continuous delivery pipelines.


3629
3:7:35,8 --> 3:7:38,358
With that, thank you and
have a great break.


3630
3:7:38,358 --> 3:7:43,847
[APPLAUSE]


3631
3:7:43,847 --> 4:4:19,5
[MUSIC PLAYING]


3632
4:4:19,5 --> 4:4:19,88
TONY VOELLM: Hello.


3633
4:4:19,88 --> 4:4:22,33
Welcome back.


3634
4:4:22,33 --> 4:4:25,79
This is always one of the
toughest talks of the day.


3635
4:4:25,79 --> 4:4:27,28
It's right after lunch.


3636
4:4:27,28 --> 4:4:30,58
You're going to be
a little sleepy.


3637
4:4:30,58 --> 4:4:31,52
We could try some things.


3638
4:4:31,52 --> 4:4:33,28
We could maybe have this
elevator go up or down.


3639
4:4:33,28 --> 4:4:34,11
Maybe you'll wake up.


3640
4:4:34,11 --> 4:4:37,62
Truck could drive out here.


3641
4:4:37,62 --> 4:4:41,48
If everybody could squish to the
middle again just to leave


3642
4:4:41,48 --> 4:4:46,98
these easy access seats for
people to go and sit down.


3643
4:4:46,98 --> 4:4:49,11
And then if you need the
caffeine, it's still in the


3644
4:4:49,11 --> 4:4:53,0
back there so coffee, juice,
soda, you can also just run


3645
4:4:53,0 --> 4:4:54,98
laps back there if
you need to.


3646
4:4:54,98 --> 4:4:56,79
With that, I'm going to
go ahead and kick


3647
4:4:56,79 --> 4:4:58,48
off the next talk.


3648
4:4:58,48 --> 4:5:0,6
We're going to do a couple
things in the afternoon here.


3649
4:5:0,6 --> 4:5:4,93
So we have two full
length talks here.


3650
4:5:4,93 --> 4:5:7,58
Actually we have three full
length talks, and we're going


3651
4:5:7,58 --> 4:5:8,74
to have a series of
lightning talks.


3652
4:5:8,74 --> 4:5:10,4
And the lightning
talks are really


3653
4:5:10,4 --> 4:5:10,99
going to be like lightning.


3654
4:5:10,99 --> 4:5:13,7
They're going to be very fast.


3655
4:5:13,7 --> 4:5:16,51
And there's going to
be five in a row.


3656
4:5:16,51 --> 4:5:18,25
So with that, I'm going to
go ahead and kick off


3657
4:5:18,25 --> 4:5:19,39
the next talk here.


3658
4:5:19,39 --> 4:5:23,94
It is going to be Igor
Dorovskikh and Kaustubh


3659
4:5:23,94 --> 4:5:28,22
Gawande are going to go and talk
to us from Expedia about


3660
4:5:28,22 --> 4:5:32,185
mobile automation and the
continuous delivery pipeline.


3661
4:5:32,185 --> 4:5:36,585
And so with that, Welcome
up, guys.


3662
4:5:36,585 --> 4:5:37,835
IGOR DOROVSKIKH: Thank you.


3663
4:5:37,835 --> 4:5:41,4



3664
4:5:41,4 --> 4:5:43,26
KAUSTUBH GAWANDE: Just to
introduce ourselves, I'm Igor


3665
4:5:43,26 --> 4:5:44,93
and he's Kaustubh.


3666
4:5:44,93 --> 4:5:46,69
Oh, sorry I got that
messed up.


3667
4:5:46,69 --> 4:5:49,18
I'm just checking if you guys
are awake or already asleep


3668
4:5:49,18 --> 4:5:49,86
after lunch.


3669
4:5:49,86 --> 4:5:50,54
OK.


3670
4:5:50,54 --> 4:5:52,0
Good.


3671
4:5:52,0 --> 4:5:56,3
So let's jump right into it.


3672
4:5:56,3 --> 4:5:59,85
Before we get started, I
joined Expedia in 2004.


3673
4:5:59,85 --> 4:6:6,94
And how many of you have been
in a situation where the


3674
4:6:6,94 --> 4:6:9,34
number of automated
tasks is zero?


3675
4:6:9,34 --> 4:6:13,69



3676
4:6:13,69 --> 4:6:16,6
How many of you have had your
business or the product team


3677
4:6:16,6 --> 4:6:20,37
say you engineering team, you
just cannot ship fast enough.


3678
4:6:20,37 --> 4:6:22,74
You just cannot go
quickly enough.


3679
4:6:22,74 --> 4:6:24,65
How many?


3680
4:6:24,65 --> 4:6:26,36
OK, not bad.


3681
4:6:26,36 --> 4:6:27,27
OK, all right.


3682
4:6:27,27 --> 4:6:31,5
So what I'm here to talk about
is I heard the same thing for


3683
4:6:31,5 --> 4:6:32,47
many, many years.


3684
4:6:32,47 --> 4:6:35,84
And we're going to talk about
some of the things we have


3685
4:6:35,84 --> 4:6:38,65
done the last couple of videos
to try and address both of


3686
4:6:38,65 --> 4:6:40,38
those situations.


3687
4:6:40,38 --> 4:6:42,73
So if you're in that situation,
stay awake.


3688
4:6:42,73 --> 4:6:43,98
It will help.


3689
4:6:43,98 --> 4:6:46,87



3690
4:6:46,87 --> 4:6:48,57
let's get right into it.


3691
4:6:48,57 --> 4:6:52,15
Here's a graph of what
Expedia has done over


3692
4:6:52,15 --> 4:6:54,4
the last few years.


3693
4:6:54,4 --> 4:6:56,6
So the blue bar is the number
of hot fixes we


3694
4:6:56,6 --> 4:6:58,92
used to ship 2005.


3695
4:6:58,92 --> 4:7:0,92
And the green bar
is the number of


3696
4:7:0,92 --> 4:7:3,5
releases we used to ship.


3697
4:7:3,5 --> 4:7:6,16
And the number of the red is the
number of what we called


3698
4:7:6,16 --> 4:7:8,79
business AB tests, where a
business can try different


3699
4:7:8,79 --> 4:7:11,65
functionality on the site and
let the customers decide


3700
4:7:11,65 --> 4:7:13,22
what's right for them.


3701
4:7:13,22 --> 4:7:16,19
So in the web world, that's
where everything is going.


3702
4:7:16,19 --> 4:7:18,74
You ship fast, you try different
things, you let the


3703
4:7:18,74 --> 4:7:19,57
customers decide.


3704
4:7:19,57 --> 4:7:22,48
Don't assume you know what they
want or what they like.


3705
4:7:22,48 --> 4:7:23,97
And the last is my favorite.


3706
4:7:23,97 --> 4:7:27,82
The part where Expedia
stock rises up twice.


3707
4:7:27,82 --> 4:7:32,21
I wish the stock rises up 20
times versus the releases were


3708
4:7:32,21 --> 4:7:33,89
up only two times but
unfortunately that's going to


3709
4:7:33,89 --> 4:7:36,74
have to wait for awhile.


3710
4:7:36,74 --> 4:7:39,98
So this is the best [INAUDIBLE]
work on continuous


3711
4:7:39,98 --> 4:7:41,15
delivery can do for you.


3712
4:7:41,15 --> 4:7:45,36
it can help you ship faster,
more releases, and ultimately


3713
4:7:45,36 --> 4:7:48,37
make you rich.


3714
4:7:48,37 --> 4:7:50,75
So what does that tend
to look like?


3715
4:7:50,75 --> 4:7:53,65
I'm going to talk about test
automation some basics.


3716
4:7:53,65 --> 4:7:56,36
because we have a wide variety
of audience here and online


3717
4:7:56,36 --> 4:7:59,69
and so I want to make sure
we talk of the basics.


3718
4:7:59,69 --> 4:8:1,61
We'll show you what the
continuous delivery pipeline


3719
4:8:1,61 --> 4:8:3,76
of tests looks like for Expedia


3720
4:8:3,76 --> 4:8:4,72
specifically for our team.


3721
4:8:4,72 --> 4:8:8,29
We work on the Expedia front end
site so everything you see


3722
4:8:8,29 --> 4:8:11,46
on expedia.com or one of the
Expedia sites, it's our team


3723
4:8:11,46 --> 4:8:13,15
that's shipping that,
including mobile.


3724
4:8:13,15 --> 4:8:16,38
We do mobile web, mobile apps.


3725
4:8:16,38 --> 4:8:19,41
And so we'll talk about little
bit of the test methodology


3726
4:8:19,41 --> 4:8:21,735
and some of the unique things
we have done in


3727
4:8:21,735 --> 4:8:24,3
the last few years.


3728
4:8:24,3 --> 4:8:25,61
and then Igor's going
to talk about the


3729
4:8:25,61 --> 4:8:27,82
specific tools we use.


3730
4:8:27,82 --> 4:8:30,9
Almost everything we
use is open source,


3731
4:8:30,9 --> 4:8:33,24
so it's very cheap.


3732
4:8:33,24 --> 4:8:34,47
Free.


3733
4:8:34,47 --> 4:8:37,2
And then we'll talk about the
key benefits that we have


3734
4:8:37,2 --> 4:8:38,99
gotten as a test organization.


3735
4:8:38,99 --> 4:8:40,32
So specifics on what
benefits I have


3736
4:8:40,32 --> 4:8:43,63
constantly seen and measured.


3737
4:8:43,63 --> 4:8:46,8
So there's a lot of talk in
the industry about agile.


3738
4:8:46,8 --> 4:8:48,26
Continuous integration.


3739
4:8:48,26 --> 4:8:49,48
Continuous delivery.


3740
4:8:49,48 --> 4:8:50,6
Mostly [INAUDIBLE]


3741
4:8:50,6 --> 4:8:51,12
are falling.


3742
4:8:51,12 --> 4:8:52,51
There's a lot of talk DevOps.


3743
4:8:52,51 --> 4:8:54,74
There's a whole DevOps
movement going on.


3744
4:8:54,74 --> 4:8:57,99
So this is the best slide I've
found to explain what


3745
4:8:57,99 --> 4:8:59,405
continuous delivery
really means.


3746
4:8:59,405 --> 4:9:2,22



3747
4:9:2,22 --> 4:9:5,35
In 2006, Expedia was agile, but
we didn't really have a


3748
4:9:5,35 --> 4:9:7,27
continuous integration
system in place.


3749
4:9:7,27 --> 4:9:8,8
Well, then we fixed that.


3750
4:9:8,8 --> 4:9:11,4
2006 to 2009, we had continuous
integration in


3751
4:9:11,4 --> 4:9:14,43
place, didn't really have
continuous delivery in place.


3752
4:9:14,43 --> 4:9:16,8
So it's been a progression.


3753
4:9:16,8 --> 4:9:19,4
The last few years, we've been
focused on the continuous


3754
4:9:19,4 --> 4:9:20,54
delivery piece.


3755
4:9:20,54 --> 4:9:23,89
And my talk is going to
be focused on the--


3756
4:9:23,89 --> 4:9:28,83
and Igor's going to cover the
automation tools we're using--


3757
4:9:28,83 --> 4:9:30,77
the test automation piece
of continuous delivery.


3758
4:9:30,77 --> 4:9:34,96



3759
4:9:34,96 --> 4:9:37,22
So basics.


3760
4:9:37,22 --> 4:9:39,64
Most people know what a test
automation pyramid is.


3761
4:9:39,64 --> 4:9:42,35
What I'm here to tell you is
just one simple thing.


3762
4:9:42,35 --> 4:9:44,83
If you are serious about
continuous delivery, get your


3763
4:9:44,83 --> 4:9:47,15
test automation pyramid right.


3764
4:9:47,15 --> 4:9:50,43
It's super critical to getting
to continuous delivery.


3765
4:9:50,43 --> 4:9:52,8
Which means lots and lots,
thousands, hundreds of


3766
4:9:52,8 --> 4:9:54,6
thousands of unit tests.


3767
4:9:54,6 --> 4:9:57,27
A small number of integration
tests, and a very small number


3768
4:9:57,27 --> 4:10:0,32
of UI or end to end tests
as we call them.


3769
4:10:0,32 --> 4:10:1,98
It's super important.


3770
4:10:1,98 --> 4:10:4,26
I'll show you a good graph.


3771
4:10:4,26 --> 4:10:7,96
So just over the last year,
the green is obviously the


3772
4:10:7,96 --> 4:10:11,49
number of unit tests
that we evaluated.


3773
4:10:11,49 --> 4:10:13,95
Orange the medium or the
integration tests and the red


3774
4:10:13,95 --> 4:10:15,66
are the large tests.


3775
4:10:15,66 --> 4:10:16,66
For a long, long time,


3776
4:10:16,66 --> 4:10:18,72
Expedia's pyramid was inverted.


3777
4:10:18,72 --> 4:10:20,56
We were lot of [INAUDIBLE]


3778
4:10:20,56 --> 4:10:21,16
tests.


3779
4:10:21,16 --> 4:10:24,48
Some integration tests and
very few unit tests.


3780
4:10:24,48 --> 4:10:28,5
Man, it was so difficult for
a tester to catch bugs.


3781
4:10:28,5 --> 4:10:28,99
Only they like our
new automation.


3782
4:10:28,99 --> 4:10:30,7
It was crazy.


3783
4:10:30,7 --> 4:10:34,3
So this has been a huge part
of helping us get to


3784
4:10:34,3 --> 4:10:37,52
continuous delivery is get your
test pyramid correct.


3785
4:10:37,52 --> 4:10:39,59
Measured it and drive
it insanely.


3786
4:10:39,59 --> 4:10:42,92



3787
4:10:42,92 --> 4:10:44,8
Let's talk about the continuous


3788
4:10:44,8 --> 4:10:46,1
delivery pipeline itself.


3789
4:10:46,1 --> 4:10:47,32
What does the pipeline
look like?


3790
4:10:47,32 --> 4:10:51,34
Before a developer checks in any
piece of code, there are a


3791
4:10:51,34 --> 4:10:54,11
series of pre-commit tests that
they need to run and Ari


3792
4:10:54,11 --> 4:10:56,36
in the first talk referred
to this.


3793
4:10:56,36 --> 4:10:57,59
Most of these are unit tests.


3794
4:10:57,59 --> 4:10:59,74
They run in milliseconds and
you can run hundreds of


3795
4:10:59,74 --> 4:11:3,74
thousands of them very,
very quickly.


3796
4:11:3,74 --> 4:11:7,8
Once it's checked in, you have a
single branch, called trunk.


3797
4:11:7,8 --> 4:11:10,21
Again, the Google talk referred
to this as well--


3798
4:11:10,21 --> 4:11:12,47
single branch, all developers
are checking


3799
4:11:12,47 --> 4:11:14,91
in code in one place.


3800
4:11:14,91 --> 4:11:18,32
We run a couple of tests,
sets of tests.


3801
4:11:18,32 --> 4:11:21,2
for the mobile team, we use
JavaScript unit tests.


3802
4:11:21,2 --> 4:11:22,975
So there's open source
tool called Jasmine.


3803
4:11:22,975 --> 4:11:24,11
We use that.


3804
4:11:24,11 --> 4:11:25,33
There are plenty
of other tools.


3805
4:11:25,33 --> 4:11:27,4
You guys can pick
what you want.


3806
4:11:27,4 --> 4:11:30,1
And then we run a series
of trunk small tests.


3807
4:11:30,1 --> 4:11:31,44
What are these small tests?


3808
4:11:31,44 --> 4:11:35,29
These are basic happy path
functionality that a typical


3809
4:11:35,29 --> 4:11:36,79
Expedia user would do.


3810
4:11:36,79 --> 4:11:39,21
Search for a flight,
book a flight.


3811
4:11:39,21 --> 4:11:42,12
Search for a hotel, book
a hotel and so forth.


3812
4:11:42,12 --> 4:11:44,27
So we make sure the basic
functionality is working even


3813
4:11:44,27 --> 4:11:47,32
before the build gets promoted
to our live servers.


3814
4:11:47,32 --> 4:11:49,88



3815
4:11:49,88 --> 4:11:55,796
Assuming the previous tests
pass, it gets promoted to the


3816
4:11:55,796 --> 4:11:58,36
next stage where we run
a much broader set


3817
4:11:58,36 --> 4:11:59,73
of acceptance tests.


3818
4:11:59,73 --> 4:12:1,3
These are a little bit
more involved.


3819
4:12:1,3 --> 4:12:4,14
Search for a hotel, change the
dates, click on a few things,


3820
4:12:4,14 --> 4:12:7,51
make sure I like all the try
one, try two scenarios are


3821
4:12:7,51 --> 4:12:9,37
working, great.


3822
4:12:9,37 --> 4:12:14,34
Those are green, then deploy
to an environment


3823
4:12:14,34 --> 4:12:16,46
that is very special.


3824
4:12:16,46 --> 4:12:20,6
this test environment does not
have any live dependencies.


3825
4:12:20,6 --> 4:12:21,92
No live services downstream.


3826
4:12:21,92 --> 4:12:23,93
No live connections
to third parties.


3827
4:12:23,93 --> 4:12:27,45
one of the most interesting
problems Expedia has to solve


3828
4:12:27,45 --> 4:12:31,2
is we have live connections
to hundreds of airlines.


3829
4:12:31,2 --> 4:12:33,655
Global distribution systems
which is where the airline


3830
4:12:33,655 --> 4:12:34,79
fares get filed.


3831
4:12:34,79 --> 4:12:37,9
And you have to talk to them in
real time because airline


3832
4:12:37,9 --> 4:12:40,47
availability and prices can
change between seconds.


3833
4:12:40,47 --> 4:12:43,29
I'm sure lots of people here
have seen price changes all


3834
4:12:43,29 --> 4:12:44,36
the time, right?


3835
4:12:44,36 --> 4:12:48,28
And so we are dependent on third
party data in real time.


3836
4:12:48,28 --> 4:12:51,23
And imagine trying
to automate that.


3837
4:12:51,23 --> 4:12:54,5
One of the hardest
problems I think.


3838
4:12:54,5 --> 4:12:56,97
So what we do is we mask all
those dependencies and say we


3839
4:12:56,97 --> 4:12:58,44
want to focus on the UI only.


3840
4:12:58,44 --> 4:13:2,63
We are going to stub out, or
mark out all the dependencies,


3841
4:13:2,63 --> 4:13:5,99
so that whatever we are testing
only covers the UI and


3842
4:13:5,99 --> 4:13:7,85
we can find things fast.


3843
4:13:7,85 --> 4:13:10,16
The things that our devs
might have broken.


3844
4:13:10,16 --> 4:13:14,49
So we run those on the iPhone,
Android, and then we use


3845
4:13:14,49 --> 4:13:17,12
Chrome as basically
a base device.


3846
4:13:17,12 --> 4:13:20,49
It covers all the other devices
that are out there


3847
4:13:20,49 --> 4:13:27,48
that are slightly older, but
they're still in use in Asia


3848
4:13:27,48 --> 4:13:30,23
Pacific countries, and some of
the European countries and


3849
4:13:30,23 --> 4:13:31,16
things like that.


3850
4:13:31,16 --> 4:13:35,79
So we try to cover as many of
customer base as possible.


3851
4:13:35,79 --> 4:13:39,12
Keep in mind, none of the test
run unless the previous thing


3852
4:13:39,12 --> 4:13:41,72
has passed and is green.


3853
4:13:41,72 --> 4:13:42,81
All right.


3854
4:13:42,81 --> 4:13:44,36
Some simple rules around
the pipeline.


3855
4:13:44,36 --> 4:13:46,87



3856
4:13:46,87 --> 4:13:49,8
it has to be green
at all times.


3857
4:13:49,8 --> 4:13:51,16
There are hundreds of
check-ins coming in.


3858
4:13:51,16 --> 4:13:55,6
Not to the scale of Google,
but at least we have 400


3859
4:13:55,6 --> 4:13:59,51
developers checking in
every single day.


3860
4:13:59,51 --> 4:14:0,92
The changes conflict
with each other.


3861
4:14:0,92 --> 4:14:3,28
Things break.


3862
4:14:3,28 --> 4:14:6,49
So it's important that there's a
certain amount of discipline


3863
4:14:6,49 --> 4:14:8,38
keeping the pipeline
green at all times.


3864
4:14:8,38 --> 4:14:11,44
Otherwise, you cannot get
to continuous delivery.


3865
4:14:11,44 --> 4:14:15,12
If a build breaks, which can
happen, it auto-locks the


3866
4:14:15,12 --> 4:14:17,43
branch so no more check-ins
can get in.


3867
4:14:17,43 --> 4:14:21,56
Let's not pollute the code base
so that we can figure out


3868
4:14:21,56 --> 4:14:25,7
which seal has broken
the branch.


3869
4:14:25,7 --> 4:14:27,78
And then what we do
is we say, OK.


3870
4:14:27,78 --> 4:14:30,58
If the build is broken, we have
to be able to fix forward


3871
4:14:30,58 --> 4:14:33,71
in 10 minutes or less,
or else the CL is


3872
4:14:33,71 --> 4:14:36,61
going to get reverted.


3873
4:14:36,61 --> 4:14:40,8
It's a very, very low tolerance
for people keeping


3874
4:14:40,8 --> 4:14:41,5
the build broken, right?


3875
4:14:41,5 --> 4:14:45,29
And the reason we come back in
10 minutes is we flirted with


3876
4:14:45,29 --> 4:14:48,2
the idea of five minutes, 15
minutes and all that good


3877
4:14:48,2 --> 4:14:51,91
stuff and what we realized is
the simplest reason for a


3878
4:14:51,91 --> 4:14:56,0
build break is when devs
miss checking in a file


3879
4:14:56,0 --> 4:14:57,35
accidentally.


3880
4:14:57,35 --> 4:15:0,17
And it takes no more than five
or 10 minutes to get the file


3881
4:15:0,17 --> 4:15:4,19
back in and call it green.


3882
4:15:4,19 --> 4:15:6,86
There's the build control
where we rotate the


3883
4:15:6,86 --> 4:15:9,75
responsibility amongst different
team members,


3884
4:15:9,75 --> 4:15:13,81
Developers, testers, we actually
even have PMs do this


3885
4:15:13,81 --> 4:15:17,94
so that they understand
why it's important.


3886
4:15:17,94 --> 4:15:20,96
If a build is broken, their job
is to get it green in the


3887
4:15:20,96 --> 4:15:22,8
10 minute time frame.


3888
4:15:22,8 --> 4:15:26,59
And what we have found is
initially, it used to take us


3889
4:15:26,59 --> 4:15:30,1
five, six hours to actually get
builds where they need to


3890
4:15:30,1 --> 4:15:33,84
be, but now we're down to 10
minutes, 15 minutes intervals.


3891
4:15:33,84 --> 4:15:38,99
So we have seen some
good success there.


3892
4:15:38,99 --> 4:15:42,86
Let's talk about the oral
methodology that we use in


3893
4:15:42,86 --> 4:15:45,94
testing, and then Igor's going
to talk about the specific


3894
4:15:45,94 --> 4:15:48,46
tools we used to cover
each of these.


3895
4:15:48,46 --> 4:15:53,4
So Expedia's a very agile
company and customer the most


3896
4:15:53,4 --> 4:15:54,92
important thing to us.


3897
4:15:54,92 --> 4:15:59,14
I think there is no test better
than simulating exactly


3898
4:15:59,14 --> 4:16:0,51
what the user is doing.


3899
4:16:0,51 --> 4:16:3,23
And these VDD tools--


3900
4:16:3,23 --> 4:16:5,56
and Igor's going to talk about
a very specific tool that we


3901
4:16:5,56 --> 4:16:9,39
use- like to simulate exactly
the user actions.


3902
4:16:9,39 --> 4:16:13,74
And the best part about it is,
you can have PMs, product


3903
4:16:13,74 --> 4:16:15,15
managers, business teams
write them because


3904
4:16:15,15 --> 4:16:16,27
it's written in English.


3905
4:16:16,27 --> 4:16:19,27
You don't need any technical
degrees, you're don't need to


3906
4:16:19,27 --> 4:16:23,53
be a superstar SAT to write
the Cucumber scenarios.


3907
4:16:23,53 --> 4:16:28,14
Your test engineers, your PMs
can write them as well.


3908
4:16:28,14 --> 4:16:30,42
We use really the most for UI
and integration level of


3909
4:16:30,42 --> 4:16:34,15
testing because that's
more users scenarios.


3910
4:16:34,15 --> 4:16:37,13
At the code level, we really
strongly encourage our


3911
4:16:37,13 --> 4:16:38,49
developers to take
a [INAUDIBLE]


3912
4:16:38,49 --> 4:16:39,3
approach.


3913
4:16:39,3 --> 4:16:42,86
Write the test first, then write
your code, and your code


3914
4:16:42,86 --> 4:16:44,92
is not good until
the test passes.


3915
4:16:44,92 --> 4:16:47,23
We have had mixed success with
this, so we're still working


3916
4:16:47,23 --> 4:16:49,5
on getting it better.


3917
4:16:49,5 --> 4:16:51,77
Alright, you have all these
great tests in place now.


3918
4:16:51,77 --> 4:16:52,47
Fantastic.


3919
4:16:52,47 --> 4:16:53,57
What's next?


3920
4:16:53,57 --> 4:16:55,67
Let's take them, put them in
Jenkins which is the build


3921
4:16:55,67 --> 4:16:57,26
system that we use.


3922
4:16:57,26 --> 4:17:0,84
When you include them in Jenkins
you have to make two


3923
4:17:0,84 --> 4:17:2,41
key decisions.


3924
4:17:2,41 --> 4:17:5,21
What is the speed of the test
you are running, and how often


3925
4:17:5,21 --> 4:17:6,46
do you want to run them?


3926
4:17:6,46 --> 4:17:9,15



3927
4:17:9,15 --> 4:17:12,22
If they are really, really fast,
you can run them very


3928
4:17:12,22 --> 4:17:15,2
often, and ask for them every
single build, so you've got


3929
4:17:15,2 --> 4:17:17,26
lots of regression coverage.


3930
4:17:17,26 --> 4:17:20,38
If they are really slow like the
large test, or the UI or


3931
4:17:20,38 --> 4:17:23,4
the end to end test,
well guess what?


3932
4:17:23,4 --> 4:17:24,87
You are going to have to figure
out whether you want to


3933
4:17:24,87 --> 4:17:29,97
run them a few times a day, or
once a week or whatever.


3934
4:17:29,97 --> 4:17:32,58
And so again going back to Ari's
talk this morning, he


3935
4:17:32,58 --> 4:17:34,43
talked about the [INAUDIBLE]


3936
4:17:34,43 --> 4:17:35,55
of the problem.


3937
4:17:35,55 --> 4:17:39,53
This is why we choose to run
the large test only twelve


3938
4:17:39,53 --> 4:17:41,155
times a day. every two hours.


3939
4:17:41,155 --> 4:17:44,5
So they do not run as part
of every single build.


3940
4:17:44,5 --> 4:17:49,77
Just to go back, what that means
is what you see here are


3941
4:17:49,77 --> 4:17:54,0
all the regression test cases
that run except the large


3942
4:17:54,0 --> 4:17:56,4
tests that can take
hours to run.


3943
4:17:56,4 --> 4:17:58,59
Some of our tests take three,
four hours to run.


3944
4:17:58,59 --> 4:17:59,77
You can't put them
in the build.


3945
4:17:59,77 --> 4:18:1,42
You got to run them at
a certain frequency.


3946
4:18:1,42 --> 4:18:3,407
So we run them every
two hours.


3947
4:18:3,407 --> 4:18:7,52



3948
4:18:7,52 --> 4:18:9,44
All right, so you have
these tests.


3949
4:18:9,44 --> 4:18:10,86
They are in Jenkins.


3950
4:18:10,86 --> 4:18:13,2
But, again, what do you
with live decencies?


3951
4:18:13,2 --> 4:18:15,61
That's when you use mocking,
stubbing, remove them so that


3952
4:18:15,61 --> 4:18:18,83
you can focus on testing
your code, the stuff


3953
4:18:18,83 --> 4:18:20,8
that your dev changed.


3954
4:18:20,8 --> 4:18:22,5



3955
4:18:22,5 --> 4:18:24,82
Once you have this, you need
to have visibility.


3956
4:18:24,82 --> 4:18:28,51
People need to know what's going
on with your builds,


3957
4:18:28,51 --> 4:18:33,5
with your tests, so we use
some Jenkins plug-ins.


3958
4:18:33,5 --> 4:18:35,57
These are called built-in
test radiators.


3959
4:18:35,57 --> 4:18:36,91
We're going to show
you some examples.


3960
4:18:36,91 --> 4:18:40,53
And we also have a video of how
the process works in real


3961
4:18:40,53 --> 4:18:43,93
time a little bit later.


3962
4:18:43,93 --> 4:18:46,3
I have been in this situation
way too many times.


3963
4:18:46,3 --> 4:18:48,75
You have tests, they run, they
fail, and people ignore them.


3964
4:18:48,75 --> 4:18:49,89
They just don't care.


3965
4:18:49,89 --> 4:18:52,89
Or they just go whatever, I
mean, it's the tester's job to


3966
4:18:52,89 --> 4:18:55,73
go take a look at them, or the
automation engineer's job.


3967
4:18:55,73 --> 4:19:0,64
So again, discipline, in terms
of how quickly we react with


3968
4:19:0,64 --> 4:19:2,91
to failure, and how quickly
can we fix it.


3969
4:19:2,91 --> 4:19:6,41
Again, the video will highlight
how we have done it.


3970
4:19:6,41 --> 4:19:10,21
And hopefully, that will be
helpful for some of you guys.


3971
4:19:10,21 --> 4:19:11,3
So over to Igor.


3972
4:19:11,3 --> 4:19:13,47
He's going to going to talk
about specifically frameworks


3973
4:19:13,47 --> 4:19:16,83
we are using for mobile and how
it's integrated into the


3974
4:19:16,83 --> 4:19:18,55
whole Jenkins system.


3975
4:19:18,55 --> 4:19:18,84
IGOR DOROVSKIKH: Thank
you, Kaustubh.


3976
4:19:18,84 --> 4:19:20,53
I enjoyed the speech a lot.


3977
4:19:20,53 --> 4:19:24,8
I hope you continue
until the end.


3978
4:19:24,8 --> 4:19:26,13
But anyway, my name is Igor.


3979
4:19:26,13 --> 4:19:31,32
I'm test lead engineer at
Expedia for the past year.


3980
4:19:31,32 --> 4:19:34,88
So I was in mobile department,
like, the


3981
4:19:34,88 --> 4:19:36,8
second QA when I started.


3982
4:19:36,8 --> 4:19:40,43
And I had to basically solve
what kind of tools we have to


3983
4:19:40,43 --> 4:19:45,64
use, and how we can map the test
pyramid to fulfill all


3984
4:19:45,64 --> 4:19:49,0
the problems and solve all the
problems we had at that time.


3985
4:19:49,0 --> 4:19:54,74
So I'll try to go as fast
as we can because


3986
4:19:54,74 --> 4:19:56,21
we're limited on time.


3987
4:19:56,21 --> 4:20:0,15
There are other the talks in
this conference about the


3988
4:20:0,15 --> 4:20:2,93
specifics of some
of these tools.


3989
4:20:2,93 --> 4:20:5,89
But what I tried to focus
on how it fits into the


3990
4:20:5,89 --> 4:20:8,3
continuous delivery process.


3991
4:20:8,3 --> 4:20:10,25
So I'll start it with Jasmine.


3992
4:20:10,25 --> 4:20:14,39
So Jasmine is a J-Unit
task framework.


3993
4:20:14,39 --> 4:20:19,4
We use it to, basically, put it
in the top of the pyramid,


3994
4:20:19,4 --> 4:20:23,43
which is the functional
BDD kind of--


3995
4:20:23,43 --> 4:20:26,92
even though it says unit test,
I still think it's BDD


3996
4:20:26,92 --> 4:20:30,24
approach for testing
the JavaScript.


3997
4:20:30,24 --> 4:20:33,12
So in order to run the
JavaScript test in the


3998
4:20:33,12 --> 4:20:36,24
Jenkins, we use the Jasmine Gem,
which is a Ruby library,


3999
4:20:36,24 --> 4:20:42,16
with the CI reporter to generate
J-Unit XML reports


4000
4:20:42,16 --> 4:20:46,36
that helps us to draw graphs in
the Jenkins to see how we


4001
4:20:46,36 --> 4:20:49,49
progress over the time.


4002
4:20:49,49 --> 4:20:52,0
And the good thing about
Jasmine, it complements the


4003
4:20:52,0 --> 4:20:55,31
other UI functional test,
which our Selenium.


4004
4:20:55,31 --> 4:20:59,29
And in order to write the
Selenium test, we're using


4005
4:20:59,29 --> 4:21:4,17
Ruby as the main language and
Cucumber on top of it to write


4006
4:21:4,17 --> 4:21:5,58
our test in English.


4007
4:21:5,58 --> 4:21:9,37
Kastubh was mentioning that it's
important that the test


4008
4:21:9,37 --> 4:21:11,66
has to be written in a language
that everybody


4009
4:21:11,66 --> 4:21:18,24
understands, including project
managers, developers, and also


4010
4:21:18,24 --> 4:21:20,72
QAs, obviously, right?


4011
4:21:20,72 --> 4:21:23,69
Even product team is looking at
the test to see what kind


4012
4:21:23,69 --> 4:21:25,78
of coverage do we have.


4013
4:21:25,78 --> 4:21:27,92
Later, I will show you an
example of all Cucumber


4014
4:21:27,92 --> 4:21:30,17
scenarios, so you have a better
idea for those who have


4015
4:21:30,17 --> 4:21:31,93
never have we've seen
that before.


4016
4:21:31,93 --> 4:21:36,44
We also use Cucumber with
a Ruby to write our


4017
4:21:36,44 --> 4:21:40,87
integration-level test, which
is the API test for mobile


4018
4:21:40,87 --> 4:21:42,6
departments, specifically.


4019
4:21:42,6 --> 4:21:46,91
And we use a just regular HTTP
library with a JSON parser,


4020
4:21:46,91 --> 4:21:48,84
and it works very well for us.


4021
4:21:48,84 --> 4:21:52,36
Again, it's all written in
Cucumber in English.


4022
4:21:52,36 --> 4:21:55,81
But it fits in the middle
layer of the pyramid.


4023
4:21:55,81 --> 4:21:58,9
That's our kind of
integration test.


4024
4:21:58,9 --> 4:22:3,4
And for the lower level of
pyramid, we use the TestNG.


4025
4:22:3,4 --> 4:22:6,95
Before, we had the J-unit, but
the problem was, J-unit, it


4026
4:22:6,95 --> 4:22:9,17
was kind of hard to parallelize
all the tests.


4027
4:22:9,17 --> 4:22:11,63
And TestNG solved that
problem for us.


4028
4:22:11,63 --> 4:22:15,3
So we use TestNG as our,
primarily, unit test framework


4029
4:22:15,3 --> 4:22:21,38
to test our platform, which is
a back end platform for the


4030
4:22:21,38 --> 4:22:23,4
whole Expedia.


4031
4:22:23,4 --> 4:22:27,29
And as to Kastubh mentioned
earlier, it's important that


4032
4:22:27,29 --> 4:22:31,7
the test executes fast, so
we're not going to be


4033
4:22:31,7 --> 4:22:33,65
dependent on the live
environments.


4034
4:22:33,65 --> 4:22:37,53
And that's when EasyMock, we
use, it's a mocking solution


4035
4:22:37,53 --> 4:22:39,8
for our unit test.


4036
4:22:39,8 --> 4:22:44,8
And for the UI test, and as well
as the integration test,


4037
4:22:44,8 --> 4:22:46,48
we use our custom stubbing
solution.


4038
4:22:46,48 --> 4:22:49,92
So that helps to speed our
test execution in the


4039
4:22:49,92 --> 4:22:53,75
continuous integration
environment.


4040
4:22:53,75 --> 4:22:59,19
OK, so the previous slide was
actually mostly focusing on


4041
4:22:59,19 --> 4:23:4,56
the mobile web and mobile
web tools we use.


4042
4:23:4,56 --> 4:23:8,84
Here, you can see, we also do
the mobile apps as a part of


4043
4:23:8,84 --> 4:23:14,4
our team that we have to test
both on iOS clients and


4044
4:23:14,4 --> 4:23:15,2
Android clients.


4045
4:23:15,2 --> 4:23:20,35
So specifically for the
iOS, we use the Frank.


4046
4:23:20,35 --> 4:23:25,11
It was the first framework that
we started looking at


4047
4:23:25,11 --> 4:23:28,47
last year that was supporting
Cucumber.


4048
4:23:28,47 --> 4:23:31,6
Like I mentioned earlier, for
us, the BDD tool Cucumber was


4049
4:23:31,6 --> 4:23:35,14
the main focus, plus we can use
Ruby, that means we can


4050
4:23:35,14 --> 4:23:37,82
reuse a lot of our
test methodology.


4051
4:23:37,82 --> 4:23:41,7
That we established before,
even for native clients.


4052
4:23:41,7 --> 4:23:43,94
And that's why Frank felt, that
that category, at that


4053
4:23:43,94 --> 4:23:46,49
time, and we'll start
using that.


4054
4:23:46,49 --> 4:23:49,88
The only part that it I
cannot test with Frank


4055
4:23:49,88 --> 4:23:51,44
is the hybrid apps.


4056
4:23:51,44 --> 4:23:55,3
It doesn't support the web
views in your native


4057
4:23:55,3 --> 4:23:57,51
applications.


4058
4:23:57,51 --> 4:24:0,6
So for the Android, we using
Robotium currently.


4059
4:24:0,6 --> 4:24:3,12
But we're looking to Kalibash
because Kalibash is very


4060
4:24:3,12 --> 4:24:4,2
similar to Frank.


4061
4:24:4,2 --> 4:24:6,16
They're pretty much identical.


4062
4:24:6,16 --> 4:24:9,32
The Kalibash is basically,
that's what we're looking for


4063
4:24:9,32 --> 4:24:10,89
to transfer our test--


4064
4:24:10,89 --> 4:24:12,69
in the future migrate
all of them


4065
4:24:12,69 --> 4:24:14,3
from Robotium to Kalibash.


4066
4:24:14,3 --> 4:24:17,99
And we're start doing that by
already converting end to end


4067
4:24:17,99 --> 4:24:22,2
tests, functional tests
for Android.


4068
4:24:22,2 --> 4:24:26,63
And because we also have a
pipeline for the native apps


4069
4:24:26,63 --> 4:24:30,86
as well, just like for the
mobile web, we tried our


4070
4:24:30,86 --> 4:24:34,7
stubbing solution was
a tool called VCR.


4071
4:24:34,7 --> 4:24:37,32
And it's not a joke because,
like regular VCR, it records


4072
4:24:37,32 --> 4:24:39,91
live responses into the
cassettes, which you can


4073
4:24:39,91 --> 4:24:42,84
replay later, and this is
our stubbing solution.


4074
4:24:42,84 --> 4:24:43,69
It's open source.


4075
4:24:43,69 --> 4:24:48,6
You can find it easily, Google
it, it's a great tool for the


4076
4:24:48,6 --> 4:24:51,695
testing native apps if you
need stubbing solution.


4077
4:24:51,695 --> 4:24:56,27



4078
4:24:56,27 --> 4:25:0,28
OK, so you already probably know
this, guys, that we are


4079
4:25:0,28 --> 4:25:3,46
big fans of open source tools
at Expedia because they're


4080
4:25:3,46 --> 4:25:8,88
simply free, and a lot of people
contributing to them.


4081
4:25:8,88 --> 4:25:14,19
But unfortunately, all of
them has an issues.


4082
4:25:14,19 --> 4:25:19,17
So some of you using the
Selenium web driver, either on


4083
4:25:19,17 --> 4:25:24,7
iPhone, or desktop browser
like Chrome, Firefox, and


4084
4:25:24,7 --> 4:25:25,84
maybe on the Android.


4085
4:25:25,84 --> 4:25:28,85
But because we're mobile,
obviously, we're dealing with


4086
4:25:28,85 --> 4:25:30,37
the mobile clients.


4087
4:25:30,37 --> 4:25:34,38
So specifically, for the Android
Selenium web driver,


4088
4:25:34,38 --> 4:25:35,84
we've found an interesting
issue.


4089
4:25:35,84 --> 4:25:41,13
Whenever try to test HTTPS
pages, and there's an invalid


4090
4:25:41,13 --> 4:25:44,85
certificate on the alive test
environment, your driver will


4091
4:25:44,85 --> 4:25:46,39
basically get stuck.


4092
4:25:46,39 --> 4:25:50,56
You're going to get blank
page and that's it.


4093
4:25:50,56 --> 4:25:51,95
It's a failure.


4094
4:25:51,95 --> 4:25:56,68
So the work around was,
basically, generate the


4095
4:25:56,68 --> 4:26:0,69
certificate on the regular
Chrome browser and then import


4096
4:26:0,69 --> 4:26:3,64
it to the real device.


4097
4:26:3,64 --> 4:26:5,98
And it worked very well.


4098
4:26:5,98 --> 4:26:9,6
Another problem with the Android
Selenium web driver we


4099
4:26:9,6 --> 4:26:13,99
encountered was the drop down
boxes, or drop down options,


4100
4:26:13,99 --> 4:26:14,62
they call them.


4101
4:26:14,62 --> 4:26:17,96
So we couldn't solve the problem
because the Selenium


4102
4:26:17,96 --> 4:26:20,95
driver couldn't handle that.


4103
4:26:20,95 --> 4:26:24,65
So we use the Jquery as
the hacky solution.


4104
4:26:24,65 --> 4:26:27,52
And it works up to date.


4105
4:26:27,52 --> 4:26:31,49
So we use a SIM launcher, it's
a Ruby lightweight server, to


4106
4:26:31,49 --> 4:26:34,58
start our iOS simulator
before we start


4107
4:26:34,58 --> 4:26:36,35
executing Selenium tests.


4108
4:26:36,35 --> 4:26:40,3
And the problem was that that
particular framework didn't


4109
4:26:40,3 --> 4:26:44,0
have the flexibility to
rotate a simulator


4110
4:26:44,0 --> 4:26:46,27
while you do test execution.


4111
4:26:46,27 --> 4:26:50,26
So one of our engineers in
London actually wrote


4112
4:26:50,26 --> 4:26:52,88
AppleScript to add that
functionality.


4113
4:26:52,88 --> 4:26:59,6
So whenever we run our Selenium
test, we can rotate


4114
4:26:59,6 --> 4:27:2,78
simulator and see how our
responsive design will render


4115
4:27:2,78 --> 4:27:6,58
our mobile web application
in the web view.


4116
4:27:6,58 --> 4:27:9,89



4117
4:27:9,89 --> 4:27:13,29
So basically, those problems are
related, obviously, to the


4118
4:27:13,29 --> 4:27:16,24
Selenium web driver, both
on the AS and Android.


4119
4:27:16,24 --> 4:27:21,32
Now, on the Frank, which we use
to test our native app on


4120
4:27:21,32 --> 4:27:26,29
iOS client, we just couldn't
figure out how we're going to


4121
4:27:26,29 --> 4:27:29,75
collect the logs if the
application crashes.


4122
4:27:29,75 --> 4:27:33,85
So what we used is a third party
framework, Crashlytics,


4123
4:27:33,85 --> 4:27:35,31
which is not free,
but it's great.


4124
4:27:35,31 --> 4:27:36,86
It gives you a lot
of information.


4125
4:27:36,86 --> 4:27:38,54
It's probably the only framework
that's not free that


4126
4:27:38,54 --> 4:27:39,36
were using.


4127
4:27:39,36 --> 4:27:42,3
But it gives you great
information and logs.


4128
4:27:42,3 --> 4:27:42,73
AUDIENCE: It's free now.


4129
4:27:42,73 --> 4:27:43,7
IGOR DOROVSKIKH:
It's free now?


4130
4:27:43,7 --> 4:27:45,5
There we go.


4131
4:27:45,5 --> 4:27:46,9
Awesome.


4132
4:27:46,9 --> 4:27:50,64
So Crashlytics enables
us to get the logs--


4133
4:27:50,64 --> 4:27:51,8
crash logs--


4134
4:27:51,8 --> 4:27:55,8
as well as networking
data to analyze if


4135
4:27:55,8 --> 4:27:56,86
the application crashes.


4136
4:27:56,86 --> 4:27:59,48
And we also use the
[INAUDIBLE]


4137
4:27:59,48 --> 4:28:0,23
I put here.


4138
4:28:0,23 --> 4:28:6,38
It's basically, besides
debugging, we try to collect


4139
4:28:6,38 --> 4:28:7,57
analytic data.


4140
4:28:7,57 --> 4:28:8,62
We use [INAUDIBLE]


4141
4:28:8,62 --> 4:28:12,21
to change the configuration
application in the run time.


4142
4:28:12,21 --> 4:28:16,695
It helps also to do more like,
I would say, analytic logging


4143
4:28:16,695 --> 4:28:18,64
and testing in that matter.


4144
4:28:18,64 --> 4:28:21,2



4145
4:28:21,2 --> 4:28:23,9
And finally, I've
been mentioning


4146
4:28:23,9 --> 4:28:24,28
cucumber many times.


4147
4:28:24,28 --> 4:28:27,0
For those who haven't
seen that before.


4148
4:28:27,0 --> 4:28:30,75
This is the scenario, written in
[INAUDIBLE] language in the


4149
4:28:30,75 --> 4:28:34,77
Cucumber format, which is, if
you guys look at the screen,


4150
4:28:34,77 --> 4:28:37,11
it's very English-oriented,
readable.


4151
4:28:37,11 --> 4:28:38,56
It supports multiple
languages.


4152
4:28:38,56 --> 4:28:40,49
English is not the
only language.


4153
4:28:40,49 --> 4:28:44,9
The power of this is that you
write your test in the


4154
4:28:44,9 --> 4:28:50,3
business logic as your
acceptance criteria.


4155
4:28:50,3 --> 4:28:52,71
And then, all the
parameterization, all the


4156
4:28:52,71 --> 4:28:55,83
parameters you have to hard code
into your code like we


4157
4:28:55,83 --> 4:28:58,21
used to do with the unit
test frameworks.


4158
4:28:58,21 --> 4:28:59,12
Everything is here.


4159
4:28:59,12 --> 4:29:0,85
This is the text file, right?


4160
4:29:0,85 --> 4:29:4,35
And if you can look at this
specific scenario, where we


4161
4:29:4,35 --> 4:29:10,19
tried to test the hotel search
against multiple countries in


4162
4:29:10,19 --> 4:29:14,3
the Seattle area and make
sure the image is there.


4163
4:29:14,3 --> 4:29:16,28
If you want to just expand
the number of


4164
4:29:16,28 --> 4:29:17,32
countries you want to test--


4165
4:29:17,32 --> 4:29:19,13
I mean localization--


4166
4:29:19,13 --> 4:29:23,57
if you want to change the
Seattle to New York, that can


4167
4:29:23,57 --> 4:29:25,25
be done here.


4168
4:29:25,25 --> 4:29:30,25
It gives us a flexibility and
scalability, meaning that we


4169
4:29:30,25 --> 4:29:34,27
are flexible in terms of
changing tests on the fly


4170
4:29:34,27 --> 4:29:35,73
without looking at the code.


4171
4:29:35,73 --> 4:29:38,83
It can be done by nontechnical
people like project managers,


4172
4:29:38,83 --> 4:29:41,68
QAs, developers, at any time.


4173
4:29:41,68 --> 4:29:43,73
They call us Three
Amigos, right?


4174
4:29:43,73 --> 4:29:45,93
And another thing, it's
a live document.


4175
4:29:45,93 --> 4:29:49,55
It replaces the old test cases
and all tests widths.


4176
4:29:49,55 --> 4:29:52,12
So we do not, in Expedia mobile,
we do not have any


4177
4:29:52,12 --> 4:29:52,95
test cases.


4178
4:29:52,95 --> 4:29:54,84
We do not have test widths.


4179
4:29:54,84 --> 4:29:57,67
Cucumber, they call them
feature files,


4180
4:29:57,67 --> 4:29:58,92
are replacing those.


4181
4:29:58,92 --> 4:30:1,7



4182
4:30:1,7 --> 4:30:4,25
Can you guys start the video?


4183
4:30:4,25 --> 4:30:10,49
So right now this is the live
demo of how we execute our


4184
4:30:10,49 --> 4:30:12,69
mobile web test in parallel.


4185
4:30:12,69 --> 4:30:19,64
It's important run tests in
parallel for the speed of the


4186
4:30:19,64 --> 4:30:20,69
pipeline, right?


4187
4:30:20,69 --> 4:30:22,72
You want to get coverage
as fast as you can.


4188
4:30:22,72 --> 4:30:25,64
And this is a UI test,
which are slow.


4189
4:30:25,64 --> 4:30:26,75
They are the largest test.


4190
4:30:26,75 --> 4:30:28,52
They go end to end around.


4191
4:30:28,52 --> 4:30:29,84
And you want to execute
them on as


4192
4:30:29,84 --> 4:30:31,96
many clients as possible.


4193
4:30:31,96 --> 4:30:35,24
Here in the demo, you can see
there's both the iOS, iPhone


4194
4:30:35,24 --> 4:30:37,94
simulator and Android simulator
running exactly the


4195
4:30:37,94 --> 4:30:41,2
same test, but what you don't
see on this demo that it would


4196
4:30:41,2 --> 4:30:42,9
do in real lab, running
against real


4197
4:30:42,9 --> 4:30:47,24
devices on mobile web.


4198
4:30:47,24 --> 4:30:50,17
So this is a great example that
parallelization saves you


4199
4:30:50,17 --> 4:30:54,27
tons of time, which you will
need if you want to implement


4200
4:30:54,27 --> 4:30:57,742
the continuous integration into
your department, into


4201
4:30:57,742 --> 4:30:58,992
your company.


4202
4:30:58,992 --> 4:31:6,41



4203
4:31:6,41 --> 4:31:8,67
This is the sweetest part
of automation, when


4204
4:31:8,67 --> 4:31:9,92
you see this working.


4205
4:31:9,92 --> 4:31:47,43



4206
4:31:47,43 --> 4:31:51,3
I think it's a two
minute video.


4207
4:31:51,3 --> 4:31:53,42
AUDIENCE: How many times
have you [INAUDIBLE]?


4208
4:31:53,42 --> 4:31:54,67
IGOR DOROVSKIKH: Once.


4209
4:31:54,67 --> 4:31:56,45



4210
4:31:56,45 --> 4:31:58,71
Which is basically keep
the both tasks.


4211
4:31:58,71 --> 4:32:1,75
They are not starting all the
time at the same time.


4212
4:32:1,75 --> 4:32:3,48
The Jenkins control that.


4213
4:32:3,48 --> 4:32:6,74
So for the purpose of the demo,
we recorded both back to


4214
4:32:6,74 --> 4:32:9,62
back simulator started
at the same time.


4215
4:32:9,62 --> 4:32:11,65
But they could be, like,
delayed by-- depends


4216
4:32:11,65 --> 4:32:13,28
on the check in.


4217
4:32:13,28 --> 4:32:15,71
They are triggered
automatically.


4218
4:32:15,71 --> 4:32:17,97
OK, so let's go to
the next one.


4219
4:32:17,97 --> 4:32:21,31
OK, web build radiator is a
Jenkins plug-in that we're


4220
4:32:21,31 --> 4:32:25,7
using at Expedia to monitor the
health of the pipeline and


4221
4:32:25,7 --> 4:32:26,54
the real time.


4222
4:32:26,54 --> 4:32:29,82
This is the tool that helps
us, basically, to spot the


4223
4:32:29,82 --> 4:32:34,2
failure right away and to jump
on it and make sure the


4224
4:32:34,2 --> 4:32:36,41
developers fix it as
soon as possible.


4225
4:32:36,41 --> 4:32:38,36
Kastubh mentioned 10
minutes period.


4226
4:32:38,36 --> 4:32:39,41
It's very fast.


4227
4:32:39,41 --> 4:32:40,15
That's why visual


4228
4:32:40,15 --> 4:32:42,27
representation is very important.


4229
4:32:42,27 --> 4:32:44,68
I'm sure that probably most of
you have been in a situation


4230
4:32:44,68 --> 4:32:46,75
where you were running your
tests, and there's a fail


4231
4:32:46,75 --> 4:32:49,82
error, and nobody look at it
for a day, at least, right?


4232
4:32:49,82 --> 4:32:53,0
So these radiators are running
on big screen TVs around the


4233
4:32:53,0 --> 4:32:56,19
office, and you'll see the video
in a few minutes, where


4234
4:32:56,19 --> 4:32:59,7
you're going to see that how
it helps to visualize the


4235
4:32:59,7 --> 4:33:0,44
health of your pipeline.


4236
4:33:0,44 --> 4:33:1,74
It's really important.


4237
4:33:1,74 --> 4:33:5,189
And red call is basically a
representation of fail error,


4238
4:33:5,189 --> 4:33:8,99
which, you know, attract
attention right away if


4239
4:33:8,99 --> 4:33:12,11
there's one.


4240
4:33:12,11 --> 4:33:15,61
So this is the, we call
it web test radiator.


4241
4:33:15,61 --> 4:33:16,619
This is not a plug in.


4242
4:33:16,619 --> 4:33:20,14
It's just confluence page
where we are basically


4243
4:33:20,14 --> 4:33:24,41
representing the graphs from
different Jenkins jobs to see


4244
4:33:24,41 --> 4:33:26,84
overall picture of a product.


4245
4:33:26,84 --> 4:33:29,48
So this is the mobile website
that we are using currently


4246
4:33:29,48 --> 4:33:31,41
for the mobile hotels.


4247
4:33:31,41 --> 4:33:34,41
And you can see, on the left
side, the graph is much


4248
4:33:34,41 --> 4:33:36,82
greener than on the right side
it's because it runs against


4249
4:33:36,82 --> 4:33:39,15
stub data and mock data.


4250
4:33:39,15 --> 4:33:42,49
On the right side, the test is
running against the live


4251
4:33:42,49 --> 4:33:44,55
services, which is the
test environment.


4252
4:33:44,55 --> 4:33:47,46
This is live services, which
undergo the a lot of changes


4253
4:33:47,46 --> 4:33:51,48
during the day, and that's why
it's much more redder.


4254
4:33:51,48 --> 4:33:55,56
So when you are building a
pipeline, it's important to


4255
4:33:55,56 --> 4:33:59,4
have both and see what's
going on with live


4256
4:33:59,4 --> 4:34:0,37
services and stub data.


4257
4:34:0,37 --> 4:34:4,66



4258
4:34:4,66 --> 4:34:7,16
OK, let's play the
second video.


4259
4:34:7,16 --> 4:34:8,41
It's self-explanatory.


4260
4:34:8,41 --> 4:34:10,32



4261
4:34:10,32 --> 4:36:24,25
[MUSIC PLAYING]


4262
4:36:24,25 --> 4:36:27,41
IGOR DOROVKIKH: It helps after
lunch, right, to wake you up?


4263
4:36:27,41 --> 4:36:30,33
So, yes, this is exactly
what we do--


4264
4:36:30,33 --> 4:36:33,97
we're responsive to the failures
during execution.


4265
4:36:33,97 --> 4:36:34,849
You see what happened?


4266
4:36:34,849 --> 4:36:39,34
Developer checking stale code,
broke the test, QA look at it,


4267
4:36:39,34 --> 4:36:41,8
and it's not necessarily QA.


4268
4:36:41,8 --> 4:36:44,119
Sometimes the project manager,
even the director of the whole


4269
4:36:44,119 --> 4:36:46,61
team comes, say Igor, why
is the radiator is red.


4270
4:36:46,61 --> 4:36:48,599
So it's very important that
actually the whole team


4271
4:36:48,599 --> 4:36:50,27
participates in the process.


4272
4:36:50,27 --> 4:36:53,61
And if they spot the failure,
they react to it, fix it, and


4273
4:36:53,61 --> 4:36:54,86
it's green again.


4274
4:36:54,86 --> 4:36:57,99



4275
4:36:57,99 --> 4:37:0,6
And before I give my term back
to Kaustubh, I just want to


4276
4:37:0,6 --> 4:37:1,4
make two keynotes.


4277
4:37:1,4 --> 4:37:3,93
What I learned for the past
year, what's important in


4278
4:37:3,93 --> 4:37:7,349
order to be successful in
terms of embedded test


4279
4:37:7,349 --> 4:37:10,56
automation and continuous
delivery, is you always have


4280
4:37:10,56 --> 4:37:12,13
to plan ahead.


4281
4:37:12,13 --> 4:37:14,55
Always plan your testing,
either it's BDG tests,


4282
4:37:14,55 --> 4:37:17,13
functional test, or integration
test, at least a


4283
4:37:17,13 --> 4:37:19,52
week or two weeks before
you start a sprint.


4284
4:37:19,52 --> 4:37:20,759
Especially, if you are an agile


4285
4:37:20,759 --> 4:37:23,32
company, it's very important.


4286
4:37:23,32 --> 4:37:26,13
Besides that, it's very
important to understand what


4287
4:37:26,13 --> 4:37:29,45
kind of test you will put
into the pipeline.


4288
4:37:29,45 --> 4:37:30,7
Not all the tests go there.


4289
4:37:30,7 --> 4:37:32,3
Be very selective.


4290
4:37:32,3 --> 4:37:34,4
It cannot be large.


4291
4:37:34,4 --> 4:37:36,8
For those tests that you think
are the one that is a good


4292
4:37:36,8 --> 4:37:40,49
candidate for the automation for
the pipeline, always make


4293
4:37:40,49 --> 4:37:42,48
sure you consult with
developers.


4294
4:37:42,48 --> 4:37:44,21
Ask a second opinion.


4295
4:37:44,21 --> 4:37:47,27
Talk to the project managers if
it's good for the product.


4296
4:37:47,27 --> 4:37:51,74
And for those tests that will
be like for more like an


4297
4:37:51,74 --> 4:37:55,119
integration environment, or any
other live environments,


4298
4:37:55,119 --> 4:37:57,32
that will take longer time--


4299
4:37:57,32 --> 4:38:0,86
like large tests for two hours
or three hours of execution,


4300
4:38:0,86 --> 4:38:1,82
put them there.


4301
4:38:1,82 --> 4:38:3,509
Make sure you segregate,
right?


4302
4:38:3,509 --> 4:38:4,9
That's very important.


4303
4:38:4,9 --> 4:38:8,189
And now Kaustubh will
wrap it up.


4304
4:38:8,189 --> 4:38:10,849
KAUSTUBH GAWANDE: So just a
quick recap of some of the


4305
4:38:10,849 --> 4:38:12,759
benefits we have seen
from doing this.


4306
4:38:12,759 --> 4:38:15,52
This is just the last
couple of years.


4307
4:38:15,52 --> 4:38:18,71
We've increased our
Java release.


4308
4:38:18,71 --> 4:38:20,58
Content releases can
go out every day.


4309
4:38:20,58 --> 4:38:23,189
But Java releases is the hard
core changes that can break a


4310
4:38:23,189 --> 4:38:24,25
lot of things.


4311
4:38:24,25 --> 4:38:26,73
We've increased that
almost four times.


4312
4:38:26,73 --> 4:38:28,849
The typical regression, like I
said, you're checking a bug,


4313
4:38:28,849 --> 4:38:33,56
oftentimes, it takes a day to
find the bug, are day like fix


4314
4:38:33,56 --> 4:38:34,43
it on verify it--


4315
4:38:34,43 --> 4:38:36,75
well, with this new system, you
just saw, in a matter of


4316
4:38:36,75 --> 4:38:41,69
minutes, the code got checked
in, something broke, we


4317
4:38:41,69 --> 4:38:43,369
noticed it, we fixed it,
moved on, right?


4318
4:38:43,369 --> 4:38:46,619
So worst case scenario, when we
have massive breaks, maybe


4319
4:38:46,619 --> 4:38:50,25
four hours to fix the whole
thing end to end, but a lot of


4320
4:38:50,25 --> 4:38:54,99
the time it's been minutes that
we can get issues fixed.


4321
4:38:54,99 --> 4:38:57,55
We run 100s and 100s of stubbed
regression runs every


4322
4:38:57,55 --> 4:39:0,22
day that find all
kinds of issues.


4323
4:39:0,22 --> 4:39:2,63
And when you combine them with
regression you run with how


4324
4:39:2,63 --> 4:39:5,11
quickly did they get fixed, it
really enables you to do


4325
4:39:5,11 --> 4:39:6,72
continuous delivery.


4326
4:39:6,72 --> 4:39:9,81
Just from my team's standpoint,
the testing time


4327
4:39:9,81 --> 4:39:13,82
we have saved by doing this is
in the order magnitude of 40%.


4328
4:39:13,82 --> 4:39:17,61
So something that used to take
us five, six, seven days to


4329
4:39:17,61 --> 4:39:20,32
test and ship, we're doing
it like two days or less.


4330
4:39:20,32 --> 4:39:24,63
And that's helping us move
faster, get more agile, and,


4331
4:39:24,63 --> 4:39:26,869
obviously, the obvious one
is, the moment you have


4332
4:39:26,869 --> 4:39:29,84
automation, you can run it on
multiple devices in parallel.


4333
4:39:29,84 --> 4:39:32,32
So we have four times the device
coverage we have today


4334
4:39:32,32 --> 4:39:34,6
than what we had a year ago.


4335
4:39:34,6 --> 4:39:36,95
And as the number of devices in
the industry are scaling,


4336
4:39:36,95 --> 4:39:39,51
you really need a solution like
that that you can just


4337
4:39:39,51 --> 4:39:42,456
keeps scaling more
and more devices.


4338
4:39:42,456 --> 4:39:43,98
That's it, guys.


4339
4:39:43,98 --> 4:39:45,358
Questions?


4340
4:39:45,358 --> 4:39:51,455
[APPLAUSE]


4341
4:39:51,455 --> 4:39:53,526
TONY VOELLM: Great, Thank
you, thank you.


4342
4:39:53,526 --> 4:39:54,61
Yeah, I learn a lot.


4343
4:39:54,61 --> 4:39:56,98
All I need to do mobile testing
at Expedia is a


4344
4:39:56,98 --> 4:39:59,74
cucumber, a radiator, and
some Velcro to stick


4345
4:39:59,74 --> 4:40:0,46
my phones on a wall.


4346
4:40:0,46 --> 4:40:3,89
So thank you.


4347
4:40:3,89 --> 4:40:6,91
In all seriousness, if you have
questions, please do line


4348
4:40:6,91 --> 4:40:8,12
up at the mics.


4349
4:40:8,12 --> 4:40:11,14
I'll take some questions
off the moderator here.


4350
4:40:11,14 --> 4:40:14,78
And let's see, first
question up.


4351
4:40:14,78 --> 4:40:19,0
Did you find automated test in a
different language Ruby than


4352
4:40:19,0 --> 4:40:20,46
your application--


4353
4:40:20,46 --> 4:40:22,37
oh wow, this one is
hard to parse.


4354
4:40:22,37 --> 4:40:25,41
It says, did you find automated
tests in a different


4355
4:40:25,41 --> 4:40:28,61
language, Ruby, than your
application, limits


4356
4:40:28,61 --> 4:40:30,29
developers' collaboration
on tests.


4357
4:40:30,29 --> 4:40:31,61
KAUSTUBH GAWANDE:
I'll take that.


4358
4:40:31,61 --> 4:40:33,75
So we made a very a conscious
decision here.


4359
4:40:33,75 --> 4:40:35,66
Last year, when we were picking
Selenium, we knew we


4360
4:40:35,66 --> 4:40:38,33
could run it with either
Ruby or Java.


4361
4:40:38,33 --> 4:40:41,11
And we said we'll go with Ruby
although all our devs are


4362
4:40:41,11 --> 4:40:42,85
really good at Java.


4363
4:40:42,85 --> 4:40:45,33
In fact, it was the developers
who came and told us.


4364
4:40:45,33 --> 4:40:47,89
You know, Ruby's as a scripting
language works much,


4365
4:40:47,89 --> 4:40:51,5
much better for automated tests
as compared to Java,


4366
4:40:51,5 --> 4:40:53,41
which can be a lot heavier.


4367
4:40:53,41 --> 4:40:55,87
So it was in collaboration with
devs where we said, OK,


4368
4:40:55,87 --> 4:40:59,0
what is the right tool to use,
and we agreed on using Ruby.


4369
4:40:59,0 --> 4:41:0,73
Has it limited the
collaboration?


4370
4:41:0,73 --> 4:41:1,87
Absolutely not.


4371
4:41:1,87 --> 4:41:4,42
We have our devs writing Ruby
tests all the time.


4372
4:41:4,42 --> 4:41:8,11
I just got an email yesterday
saying a new dev that joined


4373
4:41:8,11 --> 4:41:10,69
checked in 75 new tests
that are now


4374
4:41:10,69 --> 4:41:11,9
running in the pipeline.


4375
4:41:11,9 --> 4:41:16,2
So I think the devs are actually
really part of the


4376
4:41:16,2 --> 4:41:17,49
solution here.


4377
4:41:17,49 --> 4:41:20,86
Collaborate with them and find
what tool is right for you.


4378
4:41:20,86 --> 4:41:21,34
TONY VOELLM: Thank you.


4379
4:41:21,34 --> 4:41:23,35
All right, so we have
two live questions.


4380
4:41:23,35 --> 4:41:25,33
So I think you got here first.


4381
4:41:25,33 --> 4:41:26,99
You can say your name,
your company, if you


4382
4:41:26,99 --> 4:41:28,4
want, and your question.


4383
4:41:28,4 --> 4:41:29,69
Any piece that you'd like.


4384
4:41:29,69 --> 4:41:32,32
AUDIENCE: Hi, I'm Chris McMann
with Wikipedia, the Wikimedia


4385
4:41:32,32 --> 4:41:33,25
Foundation.


4386
4:41:33,25 --> 4:41:37,45
I'd like to ask you about
enthusiasm for creating


4387
4:41:37,45 --> 4:41:39,0
feature files in Cucumber.


4388
4:41:39,0 --> 4:41:40,82
How do you build enthusiasm.


4389
4:41:40,82 --> 4:41:41,88
Do you have enthusiastic


4390
4:41:41,88 --> 4:41:44,9
contributors for your scenarios?


4391
4:41:44,9 --> 4:41:48,85
And how big of a backlog of
scenarios and feature files do


4392
4:41:48,85 --> 4:41:51,4
you keep at any given time?


4393
4:41:51,4 --> 4:41:53,51
IGOR DOROVSKIKH: So I'll
answer that question.


4394
4:41:53,51 --> 4:41:58,53
When I started, I was
the only enthusiast.


4395
4:41:58,53 --> 4:42:2,32
But I had full support
from developers.


4396
4:42:2,32 --> 4:42:6,12
And I think about that
as a living organism.


4397
4:42:6,12 --> 4:42:10,66
You have to infect everybody on
the team, like a parasite,


4398
4:42:10,66 --> 4:42:12,86
and make sure the people
all get the disease


4399
4:42:12,86 --> 4:42:14,37
of Cucumber, right?


4400
4:42:14,37 --> 4:42:17,24
And then what happened is,
a year later, right now,


4401
4:42:17,24 --> 4:42:19,51
everybody writing this, let me
give you a good example.


4402
4:42:19,51 --> 4:42:23,82
Project managers write an
acceptance criteria in the


4403
4:42:23,82 --> 4:42:25,95
Spring in the Cucumber format.


4404
4:42:25,95 --> 4:42:29,99
Then developers and QA pick this
up, massage it out, make


4405
4:42:29,99 --> 4:42:34,0
it look clean and nice, and
put Ruby logic into a page


4406
4:42:34,0 --> 4:42:38,12
object model, and all
tests become live.


4407
4:42:38,12 --> 4:42:42,84
So in my opinion, it's only
successful tool when everybody


4408
4:42:42,84 --> 4:42:43,6
is using it.


4409
4:42:43,6 --> 4:42:45,84
Everybody means everyone
on the team.


4410
4:42:45,84 --> 4:42:48,58
If it's only the QAs,
you will fail.


4411
4:42:48,58 --> 4:42:50,65
Does it answer your question?


4412
4:42:50,65 --> 4:42:53,295
AUDIENCE: Yeah, we can talk
about this some more.


4413
4:42:53,295 --> 4:42:54,66
I'm doing the same thing.


4414
4:42:54,66 --> 4:42:55,41
IGOR DOROVSKIKH: We will.


4415
4:42:55,41 --> 4:42:56,21
TONY VOELLM: The thing was--


4416
4:42:56,21 --> 4:42:57,38
let's take this offline
later--


4417
4:42:57,38 --> 4:42:57,81
IGOR DOROVSKIKH: Absolutely.


4418
4:42:57,81 --> 4:43:0,87
TONY VOELLM: Just so
it's on the mic.


4419
4:43:0,87 --> 4:43:3,1
There's one more like, OK the
live question sat down.


4420
4:43:3,1 --> 4:43:4,91
I guess they got their
questions answered.


4421
4:43:4,91 --> 4:43:7,8
We'll go to the moderator
here.


4422
4:43:7,8 --> 4:43:11,67
Does testing mobile web apps on
real devices find more bugs


4423
4:43:11,67 --> 4:43:15,66
in testing on a desktop browser
re-sized with fake


4424
4:43:15,66 --> 4:43:17,91
user agents?


4425
4:43:17,91 --> 4:43:20,22
IGOR DOROVSKIKH: Actually,
it's a good question.


4426
4:43:20,22 --> 4:43:22,63
Sometimes we have to test
in real browsers.


4427
4:43:22,63 --> 4:43:25,3
And a good example is
a Facebook connect.


4428
4:43:25,3 --> 4:43:28,95
So Facebook login feature for
Expedia, because of the


4429
4:43:28,95 --> 4:43:32,91
limitation of Android Selenium
web driver and iOS Selenium


4430
4:43:32,91 --> 4:43:38,66
web driver, we couldn't launched
the new window to


4431
4:43:38,66 --> 4:43:39,78
test that functionality.


4432
4:43:39,78 --> 4:43:43,22
So we used the Chrome with the
iPhone user agent where we


4433
4:43:43,22 --> 4:43:47,61
actually did some resizing to
test the responsive design and


4434
4:43:47,61 --> 4:43:50,3
also were able to launch
the new login


4435
4:43:50,3 --> 4:43:52,34
page for the Facebook.


4436
4:43:52,34 --> 4:43:55,62
So yes, actually, we tried to
use a lot of open source


4437
4:43:55,62 --> 4:43:59,27
tools, lately, just to solve
problems around the driver.


4438
4:43:59,27 --> 4:44:1,7
So wait for the APM talk.


4439
4:44:1,7 --> 4:44:4,19
KAUSTUBH GAWANDE: I think just
to quickly add, yes, I think


4440
4:44:4,19 --> 4:44:6,2
there's a place for both.


4441
4:44:6,2 --> 4:44:9,56
You want to use Chrome with
user agent strings.


4442
4:44:9,56 --> 4:44:10,94
But you also want to
use simulators


4443
4:44:10,94 --> 4:44:12,47
and also real devices.


4444
4:44:12,47 --> 4:44:13,75
There's no one size fits all.


4445
4:44:13,75 --> 4:44:15,9
You have to do all three because
they find different


4446
4:44:15,9 --> 4:44:16,64
types of bugs.


4447
4:44:16,64 --> 4:44:17,95
IGOR DOROVSKIKH: I agree.


4448
4:44:17,95 --> 4:44:18,96
TONY VOELLM: Great, thanks.


4449
4:44:18,96 --> 4:44:21,66
Yeah, so here's a hot question
that's been popping up further


4450
4:44:21,66 --> 4:44:23,89
and further on the
interest list.


4451
4:44:23,89 --> 4:44:28,73
It says, does testing mobile
apps, sorry, actually, it just


4452
4:44:28,73 --> 4:44:30,62
got itself to go down.


4453
4:44:30,62 --> 4:44:33,37
Was the UI demo run
with mocked data?


4454
4:44:33,37 --> 4:44:36,61
Is your deployment to prod
automatic, or is it gated with


4455
4:44:36,61 --> 4:44:38,31
manual intervention?


4456
4:44:38,31 --> 4:44:39,75
So how much automation
do you have?


4457
4:44:39,75 --> 4:44:41,92
And are you mocking
out your data.


4458
4:44:41,92 --> 4:44:44,346
KAUSTUBH GAWANDE: So the reason
why we focused the talk


4459
4:44:44,346 --> 4:44:46,61
on the test automation piece
is because we haven't fully


4460
4:44:46,61 --> 4:44:49,62
fleshed out of the continuous
deployment piece.


4461
4:44:49,62 --> 4:44:53,24
What I do know is that, you
know it used take us seven


4462
4:44:53,24 --> 4:44:57,84
days to do a manual test run all
the different languages.


4463
4:44:57,84 --> 4:44:59,17
Now it takes one day.


4464
4:44:59,17 --> 4:45:1,38
So there is manual intervention,
but it's like


4465
4:45:1,38 --> 4:45:3,22
significantly lower.


4466
4:45:3,22 --> 4:45:6,54
And one of the things that we
did was, we take screen shots


4467
4:45:6,54 --> 4:45:11,0
as the app runs, and we pushed
them automatically to our


4468
4:45:11,0 --> 4:45:13,84
localization team who are
the experts in the UI.


4469
4:45:13,84 --> 4:45:14,72
They look at that.


4470
4:45:14,72 --> 4:45:17,7
And we get feedback in
less than 24 hours.


4471
4:45:17,7 --> 4:45:20,2
So we are also using automation
to speed up those


4472
4:45:20,2 --> 4:45:22,23
local verification process.


4473
4:45:22,23 --> 4:45:23,5
TONY VOELLM: Nice.


4474
4:45:23,5 --> 4:45:24,87
OK, I think we have time for
one more question, so we'll


4475
4:45:24,87 --> 4:45:26,86
take the live question
over here.


4476
4:45:26,86 --> 4:45:28,38
AUDIENCE: Hi, my name
is [INAUDIBLE].


4477
4:45:28,38 --> 4:45:30,23
I work for ITA software
by Google.


4478
4:45:30,23 --> 4:45:33,16
Thank you for being such
a great customer.


4479
4:45:33,16 --> 4:45:37,325
I see that, in Cucumber, you
have project manager writing


4480
4:45:37,325 --> 4:45:38,94
the test definition--


4481
4:45:38,94 --> 4:45:40,83
well, the test objective
in free form at the


4482
4:45:40,83 --> 4:45:41,73
beginning of the test.


4483
4:45:41,73 --> 4:45:44,87
And then you have a test
engineer come and write the


4484
4:45:44,87 --> 4:45:47,4
test itself.


4485
4:45:47,4 --> 4:45:50,21
Over time, with such a large
body of tests, how do you


4486
4:45:50,21 --> 4:45:54,82
manage to see tests drifting
from the definition?


4487
4:45:54,82 --> 4:45:59,22
So we have an integration
plan.


4488
4:45:59,22 --> 4:46:1,19
And we keep that up to date.


4489
4:46:1,19 --> 4:46:6,32
Whenever a feature changes, part
of the job of the job of


4490
4:46:6,32 --> 4:46:8,78
the QA engineers is to go and
update the existing test out


4491
4:46:8,78 --> 4:46:11,17
of there, and also
deprecate tests.


4492
4:46:11,17 --> 4:46:13,39
We do internally go in there in
there and deprecate tests


4493
4:46:13,39 --> 4:46:15,4
that are no longer,
like, valid.


4494
4:46:15,4 --> 4:46:19,91
So the good thing is, you don't
to go to a document and


4495
4:46:19,91 --> 4:46:21,23
update the test plan now.


4496
4:46:21,23 --> 4:46:23,81
You're actually updating your
alive automation, right?


4497
4:46:23,81 --> 4:46:26,9
So which means that it's
going to get run.


4498
4:46:26,9 --> 4:46:27,63
If it sits there, you
have a choice.


4499
4:46:27,63 --> 4:46:31,84
Either it has to pass, or you
have to remove it so that you


4500
4:46:31,84 --> 4:46:34,3
know it's no longer applicable
to the feature.


4501
4:46:34,3 --> 4:46:36,56
So it's part of the spring
development process to going


4502
4:46:36,56 --> 4:46:37,575
and update that.


4503
4:46:37,575 --> 4:46:39,591
IGOR DOROVSKIKH: And we
use tagging for that.


4504
4:46:39,591 --> 4:46:40,33
It helps a lot.


4505
4:46:40,33 --> 4:46:41,87
We create different profiles.


4506
4:46:41,87 --> 4:46:43,62
KAUSTUBH GAWANDE: Yeah,
we have tags.


4507
4:46:43,62 --> 4:46:44,65
TONY VOELLM: Very nice.


4508
4:46:44,65 --> 4:46:45,79
So thank you, Kaustubh.


4509
4:46:45,79 --> 4:46:47,83
Thank you, Igor.


4510
4:46:47,83 --> 4:46:50,4
And if you guys want to
suggest a topic table


4511
4:46:50,4 --> 4:46:51,51
tomorrow, it's sounds
like Cucumber is


4512
4:46:51,51 --> 4:46:52,59
going to be a hot topic.


4513
4:46:52,59 --> 4:46:54,72
So thank you, thank
you, thank you.


4514
4:46:54,72 --> 4:47:8,3



4515
4:47:8,3 --> 4:47:11,57
So now we're going to go ahead
and enter into our series of


4516
4:47:11,57 --> 4:47:12,28
lightning talks.


4517
4:47:12,28 --> 4:47:16,67
Each one of these is going to be
15 minutes, including Q&A.


4518
4:47:16,67 --> 4:47:19,1
And so we're going to keep
these pretty fast paced.


4519
4:47:19,1 --> 4:47:22,25
First one up here is David
Rothlisberger.


4520
4:47:22,25 --> 4:47:24,74
And I'm going to start a rumor
that, like, he's related to


4521
4:47:24,74 --> 4:47:26,99
someone on the Pittsburgh
Steelers so he says he can get


4522
4:47:26,99 --> 4:47:30,11
everybody free tickets.


4523
4:47:30,11 --> 4:47:31,79
So with that, he is
from YouTube.


4524
4:47:31,79 --> 4:47:35,4
And he's going to talk about
automated set top box testing,


4525
4:47:35,4 --> 4:47:36,56
which will be fascinating.


4526
4:47:36,56 --> 4:47:37,46
DAVID ROTHLISBERGER:
Don't need that.


4527
4:47:37,46 --> 4:47:38,845
TONY VOELLM: OK.


4528
4:47:38,845 --> 4:47:40,363
DAVID ROTHLISBERGER: So it's
YouView, not YouTube.


4529
4:47:40,363 --> 4:47:41,74
TONY VOELLM: Oh, sorry,
oh, YouView.


4530
4:47:41,74 --> 4:47:43,85
[LAUGHTER]


4531
4:47:43,85 --> 4:47:47,61
DAVID ROTHLISBERGER: So if we
could have my laptop up on the


4532
4:47:47,61 --> 4:47:48,86
screens, please?


4533
4:47:48,86 --> 4:47:53,16



4534
4:47:53,16 --> 4:47:58,61
OK, so at YouView, in the UK,
we make set-top boxes.


4535
4:47:58,61 --> 4:48:3,12
And to test our set-top box we
have scripts running on a PC


4536
4:48:3,12 --> 4:48:5,18
sending infrared signals--


4537
4:48:5,18 --> 4:48:6,94
pretending to be human
user pressing


4538
4:48:6,94 --> 4:48:8,96
buttons are my control.


4539
4:48:8,96 --> 4:48:11,34
And we check the video output
from the set-top box using


4540
4:48:11,34 --> 4:48:13,86
video capture hardware and image
processing to ensure


4541
4:48:13,86 --> 4:48:16,78
that it's done the
right thing.


4542
4:48:16,78 --> 4:48:18,98
We have other many other types
of test as well, but this is


4543
4:48:18,98 --> 4:48:20,28
the most interesting
one to talk at a


4544
4:48:20,28 --> 4:48:22,85
conference like this.


4545
4:48:22,85 --> 4:48:25,79
So today, what I'm going to show
you is how you might go


4546
4:48:25,79 --> 4:48:27,545
about implementing
such a system.


4547
4:48:27,545 --> 4:48:31,73



4548
4:48:31,73 --> 4:48:35,72
The command line we're looking
at here runs GST Launch, which


4549
4:48:35,72 --> 4:48:37,82
is provided by GStreamer.


4550
4:48:37,82 --> 4:48:41,1
GStreamer is a set of libraries
and utilities for


4551
4:48:41,1 --> 4:48:43,1
handling audiovisual media.


4552
4:48:43,1 --> 4:48:46,87
If use Linux on your desktop,
your media player is likely to


4553
4:48:46,87 --> 4:48:49,51
be Totem, which is build on
GStreamer, just to give you


4554
4:48:49,51 --> 4:48:52,55
one example.


4555
4:48:52,55 --> 4:48:53,8
So let's run this.


4556
4:48:53,8 --> 4:48:59,13



4557
4:48:59,13 --> 4:49:3,73
GST takes as its command line
argument GStreamer pipeline.


4558
4:49:3,73 --> 4:49:7,15
So these exclamation marks here,
a GStreamer equivalent


4559
4:49:7,15 --> 4:49:9,51
to the shell's pipes.


4560
4:49:9,51 --> 4:49:14,2
So this pipeline has a video
test source element generating


4561
4:49:14,2 --> 4:49:16,71
a video streaming with
this test pattern.


4562
4:49:16,71 --> 4:49:19,9
And its output is piped to this
color space converter


4563
4:49:19,9 --> 4:49:22,42
element, which converts each
frame to a format understood


4564
4:49:22,42 --> 4:49:26,78
by the next element in the
pipeline, which is ximagesink.


4565
4:49:26,78 --> 4:49:29,37
A sink is an element that
consumes video.


4566
4:49:29,37 --> 4:49:39,3
And this particular one renders
out to an x11 display.


4567
4:49:39,3 --> 4:49:42,42
GStreamer ships with a ton
of different elements,


4568
4:49:42,42 --> 4:49:44,6
such as this one.


4569
4:49:44,6 --> 4:49:46,44
V4L stands for Video
for Linux.


4570
4:49:46,44 --> 4:49:48,68
It's an API for drivers.


4571
4:49:48,68 --> 4:49:53,23
And V4L 2 source supports any
device with Video Linux


4572
4:49:53,23 --> 4:49:55,61
drivers, such as my laptop's
webcam here.


4573
4:49:55,61 --> 4:49:58,915
Or it could also be a external
video capture device.


4574
4:49:58,915 --> 4:50:3,58



4575
4:50:3,58 --> 4:50:6,78
We can customize the behavior
of individual elements by


4576
4:50:6,78 --> 4:50:8,56
setting their properties.


4577
4:50:8,56 --> 4:50:13,76
So if I go back to video test
source, I can set its pattern


4578
4:50:13,76 --> 4:50:15,47
property here to something
different.


4579
4:50:15,47 --> 4:50:17,56
And we can see it's generating
a different video pattern.


4580
4:50:17,56 --> 4:50:23,17



4581
4:50:23,17 --> 4:50:24,88
Now here's where it
gets interesting.


4582
4:50:24,88 --> 4:50:27,43
I'm going to add this template
match element.


4583
4:50:27,43 --> 4:50:30,32
Template match is a thin wrapper
around an open source


4584
4:50:30,32 --> 4:50:33,15
image processing library
called Open CV.


4585
4:50:33,15 --> 4:50:35,54
The CV stands for
Computer Vision.


4586
4:50:35,54 --> 4:50:38,9
Open CV is originally
by Intel.


4587
4:50:38,9 --> 4:50:43,35
And Template Match takes
a path to an image.


4588
4:50:43,35 --> 4:50:44,85
And I'll show you what
image looks like.


4589
4:50:44,85 --> 4:50:48,28
It's this white circle on
a black background.


4590
4:50:48,28 --> 4:50:51,23
And when I run this, we can see
that template matche is


4591
4:50:51,23 --> 4:50:53,72
drawing a red border wherever
it finds a match


4592
4:50:53,72 --> 4:50:56,4
in the video stream.


4593
4:50:56,4 --> 4:50:59,81
Now the CPU overhead of the
image processing is


4594
4:50:59,81 --> 4:51:3,42
introducing a little bit of
jitter into the video stream,


4595
4:51:3,42 --> 4:51:4,63
which causes some time stamping


4596
4:51:4,63 --> 4:51:5,88
problems for the sink.


4597
4:51:5,88 --> 4:51:8,83



4598
4:51:8,83 --> 4:51:12,28
So just tell the sink to ignore
timing information in


4599
4:51:12,28 --> 4:51:15,19
the stream itself and just
display frames as soon as they


4600
4:51:15,19 --> 4:51:16,556
arrive, and it's a little
bit smoother.


4601
4:51:16,556 --> 4:51:28,31



4602
4:51:28,31 --> 4:51:31,37
Each element can post messages
to the GStreamer bus.


4603
4:51:31,37 --> 4:51:34,68
So I'll ask GST launch to
print those messages.


4604
4:51:34,68 --> 4:51:41,2



4605
4:51:41,2 --> 4:51:43,98
And here we can see that
template match has posted a


4606
4:51:43,98 --> 4:51:48,8
message for every frame that
it's processed showing us


4607
4:51:48,8 --> 4:51:51,318
whether or not it found a
match and the X and Y


4608
4:51:51,318 --> 4:51:54,59
coordinates of that match.


4609
4:51:54,59 --> 4:51:58,12
So I hope that you can see how
all these pieces fit together,


4610
4:51:58,12 --> 4:52:3,7
and how easy it is to develop
a better capture image


4611
4:52:3,7 --> 4:52:5,72
matching system of this type.


4612
4:52:5,72 --> 4:52:7,62
All these components are open
source, so we can really take


4613
4:52:7,62 --> 4:52:9,9
control of our test
infrastructure.


4614
4:52:9,9 --> 4:52:11,395
We're no longer beholden
to proprietary systems.


4615
4:52:11,395 --> 4:52:17,36



4616
4:52:17,36 --> 4:52:20,67
Now, I consult to a company
in the UK called YouView.


4617
4:52:20,67 --> 4:52:23,59
YouView is a joint venture by
the BBC and other major UK


4618
4:52:23,59 --> 4:52:25,8
broadcasters and ISPs.


4619
4:52:25,8 --> 4:52:28,46
And YouView makes
a set-top box.


4620
4:52:28,46 --> 4:52:31,91
To test the set-top box, we've
developed Stb-tester, and


4621
4:52:31,91 --> 4:52:32,58
we've open sourced.


4622
4:52:32,58 --> 4:52:34,535
So it's built from
these components


4623
4:52:34,535 --> 4:52:36,48
that I've just demoed.


4624
4:52:36,48 --> 4:52:39,11
So it supports any video capture
hardware with Video


4625
4:52:39,11 --> 4:52:45,1
Linux drivers, or, indeed, any
GStreamer source element.


4626
4:52:45,1 --> 4:52:47,41
And it uses GStreamer
python bindings.


4627
4:52:47,41 --> 4:52:51,26
It allows you to write your
test scripts in Python.


4628
4:52:51,26 --> 4:52:54,45
And they look like this.


4629
4:52:54,45 --> 4:52:57,45
Set-top box tester.press sends
an infrared signal.


4630
4:52:57,45 --> 4:53:0,2



4631
4:53:0,2 --> 4:53:2,91
Wait for match, searches for
the specified image, and


4632
4:53:2,91 --> 4:53:6,34
raises an exception if
it doesn't find it.


4633
4:53:6,34 --> 4:53:9,59
So this script navigates to
our network and internet


4634
4:53:9,59 --> 4:53:12,66
settings menu and we've
encapsulated that into a


4635
4:53:12,66 --> 4:53:13,9
separate Python functions
so it can be


4636
4:53:13,9 --> 4:53:16,18
reused across scripts.


4637
4:53:16,18 --> 4:53:19,5
Then we press down until
we find this image.


4638
4:53:19,5 --> 4:53:23,24
And I'll just ask my editor to
display those images online.


4639
4:53:23,24 --> 4:53:25,74
So I'll remind you, this
is just Python.


4640
4:53:25,74 --> 4:53:27,33
And those were just
string literals.


4641
4:53:27,33 --> 4:53:30,69
It's my editor that knows how to
display the images inline.


4642
4:53:30,69 --> 4:53:31,62
It's [INAUDIBLE]


4643
4:53:31,62 --> 4:53:34,38
before anyone asks.


4644
4:53:34,38 --> 4:53:38,593
So you press down until the
sub menu is selected.


4645
4:53:38,593 --> 4:53:40,2
We press OK.


4646
4:53:40,2 --> 4:53:44,32
Then we press right until this
automatic option is selected.


4647
4:53:44,32 --> 4:53:47,12
There we press down and we
assert that next button has


4648
4:53:47,12 --> 4:53:48,43
been highlighted.


4649
4:53:48,43 --> 4:53:51,35
We press OK, and within 30
seconds, we expect to find


4650
4:53:51,35 --> 4:53:53,69
this image.


4651
4:53:53,69 --> 4:53:55,77
So as you can see,
it's very simple.


4652
4:53:55,77 --> 4:53:57,59
It's very readable.


4653
4:53:57,59 --> 4:54:1,85
It's entirely procedural, and
it reads much like a manual


4654
4:54:1,85 --> 4:54:4,32
test script written
in English.


4655
4:54:4,32 --> 4:54:6,45
So non-programmers on the test
team have no trouble


4656
4:54:6,45 --> 4:54:9,57
understanding this, and relating
it to their own


4657
4:54:9,57 --> 4:54:14,62
requirements, test coverage,
matrices, and so forth.


4658
4:54:14,62 --> 4:54:17,44
But at the same time, it is
Python, so it's very powerful,


4659
4:54:17,44 --> 4:54:20,34
and you can do anything you
can imagine, really.


4660
4:54:20,34 --> 4:54:23,3
So I'll just show you a couple
of quick examples of other


4661
4:54:23,3 --> 4:54:24,28
stuff we've done.


4662
4:54:24,28 --> 4:54:26,91



4663
4:54:26,91 --> 4:54:29,51
This is a video I recorded
earlier of an Stb-tester


4664
4:54:29,51 --> 4:54:32,7
script that knows how to
navigate through this double


4665
4:54:32,7 --> 4:54:34,49
carousel of pairs.


4666
4:54:34,49 --> 4:54:37,57
So I've told it to
find BBC iPlayer.


4667
4:54:37,57 --> 4:54:41,85
And now that it's found it,
I've told it to find 4oD.


4668
4:54:41,85 --> 4:54:45,88
So again, the red rectangle is
showing us where Stb-tester


4669
4:54:45,88 --> 4:54:48,1
you test has found a match for
what it's looking for.


4670
4:54:48,1 --> 4:54:49,23
And now it's found 40D.


4671
4:54:49,23 --> 4:54:52,35
I've asked it find Demand 5.


4672
4:54:52,35 --> 4:54:55,89
So it's looking for this long
thin blue rectangle to


4673
4:54:55,89 --> 4:54:57,87
identify the current
selection.


4674
4:54:57,87 --> 4:55:1,7
It looks for an image of
unselected player to find


4675
4:55:1,7 --> 4:55:1,84
where it needs to go.


4676
4:55:1,84 --> 4:55:3,48
And it figures out what buttons
it needs to press to


4677
4:55:3,48 --> 4:55:6,43
accomplish that.


4678
4:55:6,43 --> 4:55:9,14
And I'll just play that again,
while I'll show you the source


4679
4:55:9,14 --> 4:55:11,2
code implementing that logic.


4680
4:55:11,2 --> 4:55:13,57
I won't go through it, but it's
just to show you that


4681
4:55:13,57 --> 4:55:14,32
it's fairly simple.


4682
4:55:14,32 --> 4:55:17,73
It's barely two pages of code.


4683
4:55:17,73 --> 4:55:21,47
And most of that is docstrings
and doctests.


4684
4:55:21,47 --> 4:55:23,3
Although I have removed
error handling.


4685
4:55:23,3 --> 4:55:26,135
But if you're interested in
seeing the full code, I've


4686
4:55:26,135 --> 4:55:30,25
posted it on stb-tester.com
as an example.


4687
4:55:30,25 --> 4:55:33,66
So essentially, your script
would just call Find Player,


4688
4:55:33,66 --> 4:55:36,94
pass in an image of the
unselected player to know what


4689
4:55:36,94 --> 4:55:39,34
it needs to find and an image of
the selected player to know


4690
4:55:39,34 --> 4:55:40,59
when it's got there.


4691
4:55:40,59 --> 4:55:42,752



4692
4:55:42,752 --> 4:55:44,81
Here's another example.


4693
4:55:44,81 --> 4:55:48,19
This State Machine is YouView's
setup wizard.


4694
4:55:48,19 --> 4:55:54,41
So each image in this diagram,
each node, represents a


4695
4:55:54,41 --> 4:55:57,14
possible state that
the UI can be in.


4696
4:55:57,14 --> 4:56:0,53
And each edge represents an
action that the user can do


4697
4:56:0,53 --> 4:56:3,29
from that given state.


4698
4:56:3,29 --> 4:56:6,56
This diagram's generated
entirely automatically from


4699
4:56:6,56 --> 4:56:12,13
some Python code we've written
to describe the Setup Wizard.


4700
4:56:12,13 --> 4:56:15,56
Each image you see is exactly
the same image that Stb-tester


4701
4:56:15,56 --> 4:56:18,31
tester uses to identify
that the UI is in


4702
4:56:18,31 --> 4:56:20,74
that particular state.


4703
4:56:20,74 --> 4:56:24,7
And each edge, each user action,
is a Python function


4704
4:56:24,7 --> 4:56:26,3
that carries out that action.


4705
4:56:26,3 --> 4:56:27,8
And you can click
on one of them.


4706
4:56:27,8 --> 4:56:29,53
And it shows you the source
code implementing that.


4707
4:56:29,53 --> 4:56:30,87
And that is all fully
hyperlinked.


4708
4:56:30,87 --> 4:56:33,4
So you can draw down as
deep as you like.


4709
4:56:33,4 --> 4:56:37,66



4710
4:56:37,66 --> 4:56:41,15
Non-programmers can still follow
the flow of each of


4711
4:56:41,15 --> 4:56:42,4
these functions here.


4712
4:56:42,4 --> 4:56:45,18



4713
4:56:45,18 --> 4:56:48,3
So you could write a test script
where you explicitly


4714
4:56:48,3 --> 4:56:51,11
call each of these actions in
the order you want them.


4715
4:56:51,11 --> 4:56:53,14
Or you could do something
smarter.


4716
4:56:53,14 --> 4:56:55,6
We do, after all, have
this representation


4717
4:56:55,6 --> 4:56:55,42
of the state machine.


4718
4:56:55,42 --> 4:57:0,3
She's it can randomly generate
random walk through it.


4719
4:57:0,3 --> 4:57:2,73
Or you could have a test script
that takes a given path


4720
4:57:2,73 --> 4:57:6,6
and just tries cutting the power
to set-top box at every


4721
4:57:6,6 --> 4:57:8,7
possible state, just to
see what happens.


4722
4:57:8,7 --> 4:57:9,39
You know, all this kind of
stuff that's incredibly


4723
4:57:9,39 --> 4:57:11,51
tedious to do manually,
especially for


4724
4:57:11,51 --> 4:57:12,94
each software release.


4725
4:57:12,94 --> 4:57:15,77



4726
4:57:15,77 --> 4:57:17,711
I'll show you the full
state machine there.


4727
4:57:17,711 --> 4:57:20,3



4728
4:57:20,3 --> 4:57:23,2
All done.


4729
4:57:23,2 --> 4:57:25,71
So if you look at this in a
certain light, it almost looks


4730
4:57:25,71 --> 4:57:30,52
like a wire-framey kind
of UX design document.


4731
4:57:30,52 --> 4:57:34,4
And really what we're aiming for
is fully machine-checkable


4732
4:57:34,4 --> 4:57:35,46
specifications.


4733
4:57:35,46 --> 4:57:38,86
And this is generated from
plain text files.


4734
4:57:38,86 --> 4:57:42,34
So it's version controllable,
all that good stuff that we're


4735
4:57:42,34 --> 4:57:45,835
used to for our code as
developers we can now have for


4736
4:57:45,835 --> 4:57:47,86
our specifications as well.


4737
4:57:47,86 --> 4:57:50,34
It's very exciting.


4738
4:57:50,34 --> 4:57:55,442
Before I quickly take some
questions, I'll just point out


4739
4:57:55,442 --> 4:58:1,9
that stb-tester.com has loads
of documentation.


4740
4:58:1,9 --> 4:58:3,746
We've got introductory material,
some videos, to help


4741
4:58:3,746 --> 4:58:5,65
you get started.


4742
4:58:5,65 --> 4:58:7,9
There's mailing lists, if you
have any questions, and we try


4743
4:58:7,9 --> 4:58:12,24
to do the development of it
as openly as possible.


4744
4:58:12,24 --> 4:58:13,719
So thank you for your time.


4745
4:58:13,719 --> 4:58:20,57
[APPLAUSE]


4746
4:58:20,57 --> 4:58:23,11
TONY VOELLM: Great,
thank you, David.


4747
4:58:23,11 --> 4:58:26,1
All right, we can go ahead and
pull up the moderator.


4748
4:58:26,1 --> 4:58:29,47
If you have questions, you
go to either side here.


4749
4:58:29,47 --> 4:58:32,99
In terms of asking questions--
that was very fascinating the


4750
4:58:32,99 --> 4:58:38,15
way you did the sort of image
matching and so forth.


4751
4:58:38,15 --> 4:58:40,792
I'll start off with a
question of my own--


4752
4:58:40,792 --> 4:58:46,6
how complicated does the image
logic have to be, or is it


4753
4:58:46,6 --> 4:58:48,67
just very pixel perfect in terms
of matching and looking


4754
4:58:48,67 --> 4:58:50,19
for elements.


4755
4:58:50,19 --> 4:58:53,48
DAVID ROTHLISBERGER: So as we
capture video directly from


4756
4:58:53,48 --> 4:58:55,99
the set-top box, we're not
going through cameras or


4757
4:58:55,99 --> 4:58:58,42
anything like that, we have
fairly high fidelity images,


4758
4:58:58,42 --> 4:59:2,94
but we do have video capture
hardware that does H364


4759
4:59:2,94 --> 4:59:5,78
encoding in the hardware,
so we do get some


4760
4:59:5,78 --> 4:59:7,69
artifacts from that.


4761
4:59:7,69 --> 4:59:11,6
So our image processing
algorithm does handle that.


4762
4:59:11,6 --> 4:59:13,85
And it's got a few knobs that
you can tune either globally


4763
4:59:13,85 --> 4:59:17,49
or for a specific image,
if you'd like.


4764
4:59:17,49 --> 4:59:18,98
TONY VOELLM: Very cool.


4765
4:59:18,98 --> 4:59:21,61
He also reinstalled my faith
in Emacs as being cool, the


4766
4:59:21,61 --> 4:59:24,52
fact that it will embed
the images for me.


4767
4:59:24,52 --> 4:59:27,3
OK, I'll take a question right
here off of the moderator.


4768
4:59:27,3 --> 4:59:33,15
It says, does having images and
test scripts cause flaky


4769
4:59:33,15 --> 4:59:37,15
tests when styles change.


4770
4:59:37,15 --> 4:59:38,84
DAVID ROTHLISBERGER: So I
wouldn't call it flaky tests.


4771
4:59:38,84 --> 4:59:41,7
I'd say that the tests start
failing predictably if the


4772
4:59:41,7 --> 4:59:43,24
style changes.


4773
4:59:43,24 --> 4:59:45,255
So yes is the answer
to that question.


4774
4:59:45,255 --> 4:59:48,1



4775
4:59:48,1 --> 4:59:50,95
As you've hopefully gathered
from some of my examples, most


4776
4:59:50,95 --> 4:59:54,44
of the actual image matching we
actually pull into library


4777
4:59:54,44 --> 4:59:58,21
functions which the test scripts
call themselves.


4778
4:59:58,21 --> 5:0:1,331
So very few test scripts
actually read like the one


4779
5:0:1,331 --> 5:0:3,47
full of images that I showed
at the beginning.


4780
5:0:3,47 --> 5:0:7,67
So it's just a matter of
changing the common functions,


4781
5:0:7,67 --> 5:0:8,68
or your scripts not working.


4782
5:0:8,68 --> 5:0:11,8
And you can do things like match
any of these images so


4783
5:0:11,8 --> 5:0:13,83
that your tests continue to work
across different software


4784
5:0:13,83 --> 5:0:17,16
releases if you need to still be
testing a version that's in


4785
5:0:17,16 --> 5:0:20,39
production that's got different
images than a


4786
5:0:20,39 --> 5:0:22,31
development version.


4787
5:0:22,31 --> 5:0:24,76
TONY VOELLM: Nice, clearly this
next question was written


4788
5:0:24,76 --> 5:0:27,24
by somebody who's done this.


4789
5:0:27,24 --> 5:0:29,97
It says, how do you manage the
image repository without


4790
5:0:29,97 --> 5:0:32,93
sucking the soul of some
poor test engineer?


4791
5:0:32,93 --> 5:0:39,5
[LAUGHTER]


4792
5:0:39,5 --> 5:0:41,4
DAVID ROTHLISBERGER: Well,
again, everyone seems to be


4793
5:0:41,4 --> 5:0:43,24
fixating on these images.


4794
5:0:43,24 --> 5:0:46,21
To be honest, the main problem
we've had is not with the


4795
5:0:46,21 --> 5:0:47,3
image repository.


4796
5:0:47,3 --> 5:0:50,23
It's with flaky video
capture hardware.


4797
5:0:50,23 --> 5:0:53,67
So I guess the answer to this
question would be much like


4798
5:0:53,67 --> 5:0:57,36
the previous one, where the
image repository is fairly


4799
5:0:57,36 --> 5:1:2,6
small compared to the number
of tests that use it.


4800
5:1:2,6 --> 5:1:8,0
And we also have a lot of
unit tests of our tests.


4801
5:1:8,0 --> 5:1:9,69
We've captured a lot
of screenshots.


4802
5:1:9,69 --> 5:1:12,4
And any time we want to make a
change to the image processing


4803
5:1:12,4 --> 5:1:14,69
algorithm, we run all those
unit tests against our


4804
5:1:14,69 --> 5:1:17,65
collection of previously
captured images to make sure


4805
5:1:17,65 --> 5:1:21,81
that everything continues
running properly.


4806
5:1:21,81 --> 5:1:24,3
TONY VOELLM: Great, is
this a live question?


4807
5:1:24,3 --> 5:1:24,39
AUDIENCE: Yeah.


4808
5:1:24,39 --> 5:1:25,24
TONY VOELLM: OK,
sure, go ahead.


4809
5:1:25,24 --> 5:1:26,79
We have time for
just one more.


4810
5:1:26,79 --> 5:1:29,51
AUDIENCE: So I was just
wondering if you used your


4811
5:1:29,51 --> 5:1:32,9
framework to measure
performance, let's say, such


4812
5:1:32,9 --> 5:1:34,72
as latency, if you click on
something, how long does it


4813
5:1:34,72 --> 5:1:37,86
take to go to the other view,
things like that.


4814
5:1:37,86 --> 5:1:42,32



4815
5:1:42,32 --> 5:1:44,81
DAVID ROTHLISBERGER: So when
we're doing the image


4816
5:1:44,81 --> 5:1:50,89
processing on a full sized,
720p, or whatever, full size


4817
5:1:50,89 --> 5:1:57,23
video stream, even with a fairly
powerful computer, we


4818
5:1:57,23 --> 5:1:59,46
do the image processing
in real time.


4819
5:1:59,46 --> 5:2:3,16
So what we do, generally, is
we just drop frames if we


4820
5:2:3,16 --> 5:2:4,37
can't process them.


4821
5:2:4,37 --> 5:2:7,76
But for testing performance,
we flick a


4822
5:2:7,76 --> 5:2:10,32
switch in the test script--


4823
5:2:10,32 --> 5:2:13,7



4824
5:2:13,7 --> 5:2:15,45
we use Python Context Manager
to have this apply just a


4825
5:2:15,45 --> 5:2:17,49
portion of the script--


4826
5:2:17,49 --> 5:2:23,12
where we cue up every single
frame, and then we can measure


4827
5:2:23,12 --> 5:2:25,5
things like that, like,
smoothness of


4828
5:2:25,5 --> 5:2:27,3
animations or latencies.


4829
5:2:27,3 --> 5:2:29,37
Latency is a bit difficult
because we've got to take into


4830
5:2:29,37 --> 5:2:32,2
account all the various
latencies in the system, the


4831
5:2:32,2 --> 5:2:35,45
video capture device, the
encoder, the infrared emitter,


4832
5:2:35,45 --> 5:2:36,7
and so on, and so on.


4833
5:2:36,7 --> 5:2:38,63
So we're working on it.


4834
5:2:38,63 --> 5:2:39,52
We're getting there.


4835
5:2:39,52 --> 5:2:41,94
TONY VOELLM: Great, and with
that, thank you, David.


4836
5:2:41,94 --> 5:2:42,3
DAVID ROTHLISBERGER:
Thank you, Danny.


4837
5:2:42,3 --> 5:2:43,2
TONY VOELLM: That was
very insightful.


4838
5:2:43,2 --> 5:2:44,15
DAVID ROTHLISBERGER: Cheers.


4839
5:2:44,15 --> 5:2:49,38
[APPLAUSE]


4840
5:2:49,38 --> 5:2:53,75
TONY VOELLM: So our next speaker
up is Ken Kania.


4841
5:2:53,75 --> 5:2:55,24
He is from Google.


4842
5:2:55,24 --> 5:2:58,31
And he's going to talk about
web driver for Chrome.


4843
5:2:58,31 --> 5:3:0,51
And so with that, have fun.


4844
5:3:0,51 --> 5:3:1,76
KEN KANIA: Thank you.


4845
5:3:1,76 --> 5:3:3,68



4846
5:3:3,68 --> 5:3:5,59
All right, so thanks Tony.


4847
5:3:5,59 --> 5:3:8,35
So to start off,
my name is Ken.


4848
5:3:8,35 --> 5:3:9,37
Just a little bit
of background--


4849
5:3:9,37 --> 5:3:12,97
I work on the Google Chrome
Testing team, particularly on


4850
5:3:12,97 --> 5:3:14,37
the browser side.


4851
5:3:14,37 --> 5:3:15,97
So a little bit of
background of how


4852
5:3:15,97 --> 5:3:17,26
Chrome testing is broken.


4853
5:3:17,26 --> 5:3:19,91
Just real quick, there's
the browser team.


4854
5:3:19,91 --> 5:3:21,51
Then there is kind of the
mobile team, then


4855
5:3:21,51 --> 5:3:22,36
there's the OS Team.


4856
5:3:22,36 --> 5:3:23,98
So I'm primarily on
the browser side.


4857
5:3:23,98 --> 5:3:29,24



4858
5:3:29,24 --> 5:3:32,52
OK, so basically, I'm going to
be talking today about a tool


4859
5:3:32,52 --> 5:3:35,91
that we have supported within
the Chrome team which is


4860
5:3:35,91 --> 5:3:38,75
called Chrome Driver, or also
called Web Driver for Chrome.


4861
5:3:38,75 --> 5:3:40,81
So you can see up here, it's
very simple problem.


4862
5:3:40,81 --> 5:3:42,18
Many of you are probably
familiar with it.


4863
5:3:42,18 --> 5:3:44,5
You may be even familiar
with the tool.


4864
5:3:44,5 --> 5:3:47,91
So we have, in Chrome, just
Chrome, over 300 million


4865
5:3:47,91 --> 5:3:48,45
active users.


4866
5:3:48,45 --> 5:3:52,22
This is pretty old data, but
at least that still holds


4867
5:3:52,22 --> 5:3:53,66
true, hopefully.


4868
5:3:53,66 --> 5:3:57,49
But so we have ever expanding
amount of platforms.


4869
5:3:57,49 --> 5:3:59,88
So of course, we just started
with Chrome, with Chrome for


4870
5:3:59,88 --> 5:4:4,15
Beta on Windows 2008, expanded
into other desktops, now Mac,


4871
5:4:4,15 --> 5:4:7,46
Linux, and then, more recently,
Chrome OS branched


4872
5:4:7,46 --> 5:4:9,66
out into Chrome OS, and then
now mobile, Chrome for


4873
5:4:9,66 --> 5:4:11,72
Android, and Chrome for iOS.


4874
5:4:11,72 --> 5:4:14,2
So the question, the basic
question, is, as a web app


4875
5:4:14,2 --> 5:4:18,0
developer, how can I go about
automatically verifying that


4876
5:4:18,0 --> 5:4:21,0
the critical functionality of my
app works across all these


4877
5:4:21,0 --> 5:4:22,38
different platforms?


4878
5:4:22,38 --> 5:4:24,59
So this is a pretty broad
question that you could look


4879
5:4:24,59 --> 5:4:26,0
at just in browsers
in general.


4880
5:4:26,0 --> 5:4:28,86
But today, this talk, I'm just
going to focus just on Chrome.


4881
5:4:28,86 --> 5:4:32,19
So within Chrome, how can I
verify my functionality, the


4882
5:4:32,19 --> 5:4:34,63
critical functionality that map
provides across all these


4883
5:4:34,63 --> 5:4:36,512
platforms automatically.


4884
5:4:36,512 --> 5:4:40,13
And so hopefully, during your
development process, you've


4885
5:4:40,13 --> 5:4:42,77
engaged in good unit testing.


4886
5:4:42,77 --> 5:4:44,87
Maybe if you're a really
diligent tester, you've also


4887
5:4:44,87 --> 5:4:48,34
done some sort of isolated
component testing.


4888
5:4:48,34 --> 5:4:50,15
But at the very end of the day,
you want to be able to


4889
5:4:50,15 --> 5:4:54,44
have some guarantee that what
the end user sees and what you


4890
5:4:54,44 --> 5:4:56,956
go through as an end user
is actually correct.


4891
5:4:56,956 --> 5:4:59,62



4892
5:4:59,62 --> 5:5:4,32
And basically, the solution to
this problem is Chrome Driver


4893
5:5:4,32 --> 5:5:5,78
so a little bit of background.


4894
5:5:5,78 --> 5:5:11,26
Chrome Driver follows the W3C
web driver working draft that


4895
5:5:11,26 --> 5:5:13,17
some of the Mozilla guys talked
about a little bit


4896
5:5:13,17 --> 5:5:15,43
earlier on this morning.


4897
5:5:15,43 --> 5:5:17,51
So because of that, it's
interoperable with all the


4898
5:5:17,51 --> 5:5:21,14
open source web driver client
libraries, whether its Java,


4899
5:5:21,14 --> 5:5:26,57
or Python, or Ruby, or whatever
fits your boat.


4900
5:5:26,57 --> 5:5:27,45
It is open source.


4901
5:5:27,45 --> 5:5:30,15
Chrome Driver is open source and
maintained by the members


4902
5:5:30,15 --> 5:5:31,3
of the Chromium project.


4903
5:5:31,3 --> 5:5:33,56
And Chromium, for those of you
who aren't familiar, is just


4904
5:5:33,56 --> 5:5:35,83
the project that supports Google
Chrome and another


4905
5:5:35,83 --> 5:5:37,92
Chromium-based browsers.


4906
5:5:37,92 --> 5:5:40,49
So for the rest of this talk,
I'm just going to describe a


4907
5:5:40,49 --> 5:5:40,97
couple things.


4908
5:5:40,97 --> 5:5:44,7
Number one, how can you
use Chrome Driver?


4909
5:5:44,7 --> 5:5:46,25
What does it actually do?


4910
5:5:46,25 --> 5:5:52,81
And number two, what kind of
work we've done to enable


4911
5:5:52,81 --> 5:5:55,63
chrome driver Torque, not just
on desktop, but also the other


4912
5:5:55,63 --> 5:6:0,33
Chrome platforms, specifically
Android, in this talk.


4913
5:6:0,33 --> 5:6:2,47
And then, hopefully, I'll give
you a little bit of a deeper


4914
5:6:2,47 --> 5:6:5,47
dive about how exactly Chrome
Driver works, just for you


4915
5:6:5,47 --> 5:6:7,72
guys who are curious and maybe
who want to adopt kind of


4916
5:6:7,72 --> 5:6:10,15
similar technologies underneath,
depending on what


4917
5:6:10,15 --> 5:6:13,14
frameworks you are using.


4918
5:6:13,14 --> 5:6:17,1
So to start, web driver, so that
previous slide doesn't


4919
5:6:17,1 --> 5:6:19,56
really make whole lot of
sense if you don't


4920
5:6:19,56 --> 5:6:20,37
know web driver is.


4921
5:6:20,37 --> 5:6:23,94
So web driver is a cross-browser
automation API,


4922
5:6:23,94 --> 5:6:26,63
which is primarily for
website testing.


4923
5:6:26,63 --> 5:6:29,37
That's what it, historically,
was for.


4924
5:6:29,37 --> 5:6:32,49
Now there's become more use
cases, wider audiences using


4925
5:6:32,49 --> 5:6:33,4
web driver.


4926
5:6:33,4 --> 5:6:35,5
But that was, at least, one of
the main, original, and still


4927
5:6:35,5 --> 5:6:40,4
is, the main intention for web
driver, the web driver API.


4928
5:6:40,4 --> 5:6:41,5
So it's cross browser.


4929
5:6:41,5 --> 5:6:44,34
So this API covers, I listed
couple of things there.


4930
5:6:44,34 --> 5:6:48,15
We have browser control, being
able to simulate the user


4931
5:6:48,15 --> 5:6:52,97
input, whether it's mouse, or
typing, keyboard, et cetera.


4932
5:6:52,97 --> 5:6:56,43
And also, another category I
just put together is, web


4933
5:6:56,43 --> 5:6:59,59
stuff, random web kind of stuff,
like being able to find


4934
5:6:59,59 --> 5:7:2,6
elements on a page, evaluate
script, evaluate JavaScript,


4935
5:7:2,6 --> 5:7:5,42
manipulate local storage
cookies.


4936
5:7:5,42 --> 5:7:6,35
So that's basically
web driver.


4937
5:7:6,35 --> 5:7:8,91
So web driver is a cross
browser automation API.


4938
5:7:8,91 --> 5:7:11,76
And Chrome Driver is essentially
the implementation


4939
5:7:11,76 --> 5:7:13,81
of that protocol for Chrome.


4940
5:7:13,81 --> 5:7:16,65
Not a very difficult concept.


4941
5:7:16,65 --> 5:7:18,18
But so, just to get you a little
bit familiar with those


4942
5:7:18,18 --> 5:7:21,11
of you who perhaps haven't seen
a lot of web driver stuff


4943
5:7:21,11 --> 5:7:24,8
before, here's a sample test
written in Python using the


4944
5:7:24,8 --> 5:7:28,35
open source Python web
driver library.


4945
5:7:28,35 --> 5:7:31,56
That first statement, we're just
creating an instance of


4946
5:7:31,56 --> 5:7:32,9
Chrome Driver.


4947
5:7:32,9 --> 5:7:35,64
We're passing in the path to
our Chrome Driver binary


4948
5:7:35,64 --> 5:7:36,29
executable.


4949
5:7:36,29 --> 5:7:38,8
We'll talk about that
little bit later.


4950
5:7:38,8 --> 5:7:41,0
The second statement is simply
navigating to our test page,


4951
5:7:41,0 --> 5:7:43,6
in this case, which is Google.


4952
5:7:43,6 --> 5:7:45,86
Then we're finding an element on
that page with the name q.


4953
5:7:45,86 --> 5:7:48,21
We're saving a reference to
that element inside this


4954
5:7:48,21 --> 5:7:49,93
variable search box.


4955
5:7:49,93 --> 5:7:51,14
We send some keys,
which is just


4956
5:7:51,14 --> 5:7:53,19
typing, type Chrome Driver.


4957
5:7:53,19 --> 5:7:55,103
We submit that form.


4958
5:7:55,103 --> 5:7:58,7
And at this time, web driver
will then wait, if there's any


4959
5:7:58,7 --> 5:8:0,64
navigation that's occurring
because of that typing, or


4960
5:8:0,64 --> 5:8:3,18
because of the form
submission.


4961
5:8:3,18 --> 5:8:5,68
And then we actually do the one
actual test part of our


4962
5:8:5,68 --> 5:8:9,9
test, which is, we assert that
Chrome Driver is in the title


4963
5:8:9,9 --> 5:8:11,32
of the page that we
have navigated to.


4964
5:8:11,32 --> 5:8:13,75
And lastly, of course,
we just quit.


4965
5:8:13,75 --> 5:8:16,73
That's a simple, really simple
test that hopefully gives you


4966
5:8:16,73 --> 5:8:19,29
a feel for what you can
do with the API.


4967
5:8:19,29 --> 5:8:23,25
So now, how can we go about
using Chrome Driver?


4968
5:8:23,25 --> 5:8:27,6
So an important thing here is
that Chrome Driver, actually,


4969
5:8:27,6 --> 5:8:29,86
for desktop, for Windows, Mac,
and Linux, has been around for


4970
5:8:29,86 --> 5:8:33,74
quite some time, over a year.


4971
5:8:33,74 --> 5:8:37,28
You can easily find that on our
public Chrome Driver site,


4972
5:8:37,28 --> 5:8:38,95
code.google.com/p/chromedriver.


4973
5:8:38,95 --> 5:8:41,91
Of course, you can just
search for it.


4974
5:8:41,91 --> 5:8:44,58
But recently, in the past couple
of months, several


4975
5:8:44,58 --> 5:8:47,83
members of the Chromium team
from Android, also from the


4976
5:8:47,83 --> 5:8:50,1
browser side, have been working
on a new version of


4977
5:8:50,1 --> 5:8:52,48
Chrome Driver, which we just
call Chrome Driver 2.


4978
5:8:52,48 --> 5:8:55,35



4979
5:8:55,35 --> 5:8:57,66
Pretty creative.


4980
5:8:57,66 --> 5:9:1,2
So basically, this is a
re-architecture of Chrome


4981
5:9:1,2 --> 5:9:5,96
Driver to be able to span, like
I was talking about at


4982
5:9:5,96 --> 5:9:9,3
the beginning, multiple and
more Chrome platforms.


4983
5:9:9,3 --> 5:9:11,45
Because we want our testers to
be able to run these tests


4984
5:9:11,45 --> 5:9:13,765
against as many Chrome platforms
as possible.


4985
5:9:13,765 --> 5:9:16,16
So with this re-architecture,
we were able to support, not


4986
5:9:16,16 --> 5:9:20,35
only desktop, as I have listed
at the top, but also Android.


4987
5:9:20,35 --> 5:9:23,94
And so I'm happy to announce
that we do have alpha support


4988
5:9:23,94 --> 5:9:27,63
for Chrome on Android, Chrome
Driver on Android testing,


4989
5:9:27,63 --> 5:9:29,41
with Chrome on Android.


4990
5:9:29,41 --> 5:9:32,7
And you can kind of get hold
of that on our website.


4991
5:9:32,7 --> 5:9:35,37
I posted a couple of links here
that you can look at.


4992
5:9:35,37 --> 5:9:39,62
A couple caveats with
be Android alpha.


4993
5:9:39,62 --> 5:9:43,27
Currently, you do need a
special configuration.


4994
5:9:43,27 --> 5:9:46,85
You do need a Mac or Linux host
connected via USB to your


4995
5:9:46,85 --> 5:9:49,84
actually Android device.


4996
5:9:49,84 --> 5:9:51,83
And there's also a couple of
things, like you need Chrome


4997
5:9:51,83 --> 5:9:55,76
27, a couple more details that
you can see on the site.


4998
5:9:55,76 --> 5:9:59,41
And basically, though, really,
what you need to do is specify


4999
5:9:59,41 --> 5:10:4,33
the Android package capability
when you start your session.


5000
5:10:4,33 --> 5:10:8,34
And for Chrome OS and for iOS,
unfortunately, if you want to


5001
5:10:8,34 --> 5:10:13,17
use that, you just need to
be patient or I want to


5002
5:10:13,17 --> 5:10:14,83
contribute.


5003
5:10:14,83 --> 5:10:17,77
So you have to wait for that.


5004
5:10:17,77 --> 5:10:19,31
So how does it work?


5005
5:10:19,31 --> 5:10:20,75
A little bit of background
on how it works.


5006
5:10:20,75 --> 5:10:22,57
So there's mainly three
components.


5007
5:10:22,57 --> 5:10:25,43
On the left here, I have the web
driver client, which is,


5008
5:10:25,43 --> 5:10:26,32
essentially, your test.


5009
5:10:26,32 --> 5:10:27,22
It doesn't have to be a test.


5010
5:10:27,22 --> 5:10:31,13
Maybe you're writing something
else which uses the web driver


5011
5:10:31,13 --> 5:10:34,8
library, which is available in
all those different flavors,


5012
5:10:34,8 --> 5:10:36,51
different languages that I was
talking about earlier.


5013
5:10:36,51 --> 5:10:38,89
And that communicates, these
are all processes, at least


5014
5:10:38,89 --> 5:10:39,57
for Chrome.


5015
5:10:39,57 --> 5:10:41,55
So that's one process, your
web driver client process.


5016
5:10:41,55 --> 5:10:45,14
And that talks to Chrome Driver,
which is the tool that


5017
5:10:45,14 --> 5:10:48,5
we're talking about in this
talk, which functions as the


5018
5:10:48,5 --> 5:10:49,89
web driver server.


5019
5:10:49,89 --> 5:10:52,61
And that, of course,
communicates over the standard


5020
5:10:52,61 --> 5:10:55,47
web driver protocol that we've
been talking about today.


5021
5:10:55,47 --> 5:10:58,48
And Chrome Driver talks to
Chrome, controls Chrome, via,


5022
5:10:58,48 --> 5:11:2,66
right now, two main ways---
dev tools and extensions.


5023
5:11:2,66 --> 5:11:5,31
And so this is Chrome
Driver two.


5024
5:11:5,31 --> 5:11:8,32
The old Chrome Driver used a
different Chrome automation


5025
5:11:8,32 --> 5:11:10,656
API, which was desktop only.


5026
5:11:10,656 --> 5:11:13,72
But so now we're just going to
talk about Chrome Driver 2.


5027
5:11:13,72 --> 5:11:16,49
So a little bit about dev tools
and extensions for those


5028
5:11:16,49 --> 5:11:19,895
guys who, perhaps, haven't heard
a whole lot about it.


5029
5:11:19,895 --> 5:11:21,16
So dev tools is the
same thing.


5030
5:11:21,16 --> 5:11:23,14
You can see it easily in Chrome
by just Right clicking


5031
5:11:23,14 --> 5:11:25,94
the page, going Left clicking,
Inspect Element.


5032
5:11:25,94 --> 5:11:31,0
You'll see that kind of debugger
view that comes up


5033
5:11:31,0 --> 5:11:32,72
usually at the bottom
of the page.


5034
5:11:32,72 --> 5:11:34,52
And you'll see as
the DOM tree.


5035
5:11:34,52 --> 5:11:37,26
You'll be able to see
performance metrics.


5036
5:11:37,26 --> 5:11:40,1
You can trace and see the
network activity, what's


5037
5:11:40,1 --> 5:11:42,86
taking so, what resources are
taking how long to load and


5038
5:11:42,86 --> 5:11:44,99
kind of that break down.


5039
5:11:44,99 --> 5:11:49,52
So that's essentially, that
debugger interfaces is using,


5040
5:11:49,52 --> 5:11:51,3
basically, dev tools
underneath.


5041
5:11:51,3 --> 5:11:55,77
Dev tools, of course, is short
for developer tools.


5042
5:11:55,77 --> 5:11:57,43
So we're using that.


5043
5:11:57,43 --> 5:12:1,3
And the main benefit behind
using that is, number one,


5044
5:12:1,3 --> 5:12:1,96
it's pretty low level.


5045
5:12:1,96 --> 5:12:4,99
It used to be mostly implemented
in web kit, which


5046
5:12:4,99 --> 5:12:9,29
is now Blink, or has been
split into Blink.


5047
5:12:9,29 --> 5:12:12,94
But it's supported on all the
platforms that Chrome runs on,


5048
5:12:12,94 --> 5:12:15,7
except for iOS, currently.


5049
5:12:15,7 --> 5:12:20,36
You can do, on iOS 6-plus, you
can do dev tools, but it's


5050
5:12:20,36 --> 5:12:23,96
only officially supported
through Safari on OSX.


5051
5:12:23,96 --> 5:12:26,51
So we can't actually access
that right now with Chrome


5052
5:12:26,51 --> 5:12:28,24
Driver on iOS.


5053
5:12:28,24 --> 5:12:31,5
The second main tool that we
use, or API that we used to


5054
5:12:31,5 --> 5:12:33,96
automate Chrome is the
extensions API that Chrome


5055
5:12:33,96 --> 5:12:35,19
comes supported with.


5056
5:12:35,19 --> 5:12:37,5
So of course, many of your
guys are familiar with


5057
5:12:37,5 --> 5:12:39,22
extensions, the concept
of extensions.


5058
5:12:39,22 --> 5:12:44,78
But extensions were meant
to modify or enhance the


5059
5:12:44,78 --> 5:12:46,2
functionality of the browser.


5060
5:12:46,2 --> 5:12:48,24
And we've taken that, and we've
just of course, plugged


5061
5:12:48,24 --> 5:12:50,8
in our own custom extension to
be able to control the browser


5062
5:12:50,8 --> 5:12:54,65
through some of the APIs that
are provided there.


5063
5:12:54,65 --> 5:12:57,59
But however, since extensions
are desktop only, we've relied


5064
5:12:57,59 --> 5:13:0,35
mostly on developer tools
for most of the stuff


5065
5:13:0,35 --> 5:13:1,6
that we care about.


5066
5:13:1,6 --> 5:13:3,71



5067
5:13:3,71 --> 5:13:6,7
So here's just a nice diagram
for you guys who are


5068
5:13:6,7 --> 5:13:9,42
interested in kind of what the
overall implementation really


5069
5:13:9,42 --> 5:13:9,94
looks like.


5070
5:13:9,94 --> 5:13:11,44
So there's three pieces here.


5071
5:13:11,44 --> 5:13:13,135
There's the Chrome
Driver Server.


5072
5:13:13,135 --> 5:13:15,1
And there's the browser,
Chrome's


5073
5:13:15,1 --> 5:13:16,17
multi process browser.


5074
5:13:16,17 --> 5:13:17,43
So you have that browser
processing.


5075
5:13:17,43 --> 5:13:19,99
You have those two rendered
processes.


5076
5:13:19,99 --> 5:13:21,99
You can see, commands will come
into through the HTTP


5077
5:13:21,99 --> 5:13:24,83
server from our web
driver client.


5078
5:13:24,83 --> 5:13:27,63
It'll be delegated to a
particular session.


5079
5:13:27,63 --> 5:13:30,72
So perhaps you might have
multiple web driver clients


5080
5:13:30,72 --> 5:13:32,59
talking to this one Chrome
Driver server.


5081
5:13:32,59 --> 5:13:34,95
So you might have multiple
sessions.


5082
5:13:34,95 --> 5:13:37,39
And these sessions usually
control their own instance of


5083
5:13:37,39 --> 5:13:39,68
the browser in this case,
it might be a little bit


5084
5:13:39,68 --> 5:13:42,84
misleading, but you can see
each session has a line to


5085
5:13:42,84 --> 5:13:44,2
this dev tools server.


5086
5:13:44,2 --> 5:13:45,96
Usually, those are separate
browsers.


5087
5:13:45,96 --> 5:13:48,41
But the session we will talk to
the dev tools server, which


5088
5:13:48,41 --> 5:13:51,52
then delegates down to
particular renderers through


5089
5:13:51,52 --> 5:13:52,92
the dev tools agent.


5090
5:13:52,92 --> 5:13:55,45
And hopefully, your web app that
you're trying to test is


5091
5:13:55,45 --> 5:13:57,12
running in one of
those renderers.


5092
5:13:57,12 --> 5:13:59,24
And another one of those
renderers hopefully, we have


5093
5:13:59,24 --> 5:14:2,24
the Chrome Driver extension
running to be able to do some


5094
5:14:2,24 --> 5:14:4,6
of the extra stuff we need
to do to automate


5095
5:14:4,6 --> 5:14:5,31
the browser on desktop.


5096
5:14:5,31 --> 5:14:7,5



5097
5:14:7,5 --> 5:14:9,8
So what's kind of some of the
future stuff that we're


5098
5:14:9,8 --> 5:14:13,25
considering for this tool,
some plans that we


5099
5:14:13,25 --> 5:14:14,945
hope to start on?


5100
5:14:14,945 --> 5:14:18,81
So, in general, since we have
switched to developer tools


5101
5:14:18,81 --> 5:14:22,25
for the basis of controlling
Chrome, that gives us a lot of


5102
5:14:22,25 --> 5:14:24,61
more, since it's a little bit
lower level than our old API,


5103
5:14:24,61 --> 5:14:27,84
it gives us a lot of really cool
features like being able


5104
5:14:27,84 --> 5:14:31,27
to profile what, in JavaScript,
or on your page is


5105
5:14:31,27 --> 5:14:33,5
taking up so much memory, what
kind of memory leaks,


5106
5:14:33,5 --> 5:14:35,53
possibly, do you have.


5107
5:14:35,53 --> 5:14:38,57
Some interesting performance
measurement stuff, access to


5108
5:14:38,57 --> 5:14:43,75
the logs of the JavaScript
console.


5109
5:14:43,75 --> 5:14:48,89
Talking more specifically
about Android, we're


5110
5:14:48,89 --> 5:14:51,13
considering supporting
the upcoming


5111
5:14:51,13 --> 5:14:52,25
Chrome-backed web view.


5112
5:14:52,25 --> 5:14:54,42
So right now, web view
is, of course, kind


5113
5:14:54,42 --> 5:14:55,67
of an Android concept.


5114
5:14:55,67 --> 5:14:59,4



5115
5:14:59,4 --> 5:15:2,16
We are considering, though,
supporting, when Chrome


5116
5:15:2,16 --> 5:15:4,7
supports or powers that web
view, to be able to integrate


5117
5:15:4,7 --> 5:15:6,75
with that and actually
test that.


5118
5:15:6,75 --> 5:15:8,63
We are considering also running
the driver on the


5119
5:15:8,63 --> 5:15:11,16
device, instead of requiring
that host configuration I was


5120
5:15:11,16 --> 5:15:13,3
talking about earlier.


5121
5:15:13,3 --> 5:15:16,48
For iOS, it's a little bit
tricky, as I mentioned,


5122
5:15:16,48 --> 5:15:18,31
Because of the limitations just
in the UI web view, how


5123
5:15:18,31 --> 5:15:23,25
we're using the UI web view
in Chrome for iOS.


5124
5:15:23,25 --> 5:15:26,6
And we're still in pretty early
stages of development,


5125
5:15:26,6 --> 5:15:28,77
kind of planning, so not a
whole lot to say there,


5126
5:15:28,77 --> 5:15:30,86
unfortunately.


5127
5:15:30,86 --> 5:15:33,6
So that's basically the end of
what I wanted to talk about.


5128
5:15:33,6 --> 5:15:37,69
So if you're interested in using
ChromeDriver as a tool,


5129
5:15:37,69 --> 5:15:40,8
we have ways that you
can file bugs.


5130
5:15:40,8 --> 5:15:40,9
I have that link up there.


5131
5:15:40,9 --> 5:15:44,1
Also, there's a user forum,
a public user forum.


5132
5:15:44,1 --> 5:15:46,93
And of course, since it's all
open source, we love to have


5133
5:15:46,93 --> 5:15:51,72
third party patches,
contributions, you name it.


5134
5:15:51,72 --> 5:15:52,83
That concludes my talk.


5135
5:15:52,83 --> 5:15:53,14
Thank you.


5136
5:15:53,14 --> 5:15:58,9
[APPLAUSE]


5137
5:15:58,9 --> 5:15:59,86
TONY VOELLM: Great.


5138
5:15:59,86 --> 5:16:1,11
Thank you, Ken.


5139
5:16:1,11 --> 5:16:3,55
You've come a long way since
writing games based on the


5140
5:16:3,55 --> 5:16:4,8
Power Puff Girls.


5141
5:16:4,8 --> 5:16:7,58



5142
5:16:7,58 --> 5:16:10,65
That's what happens when they
tell me these little tidbits.


5143
5:16:10,65 --> 5:16:14,24
It looks like we may have
time for one question.


5144
5:16:14,24 --> 5:16:15,53
If there's not a
live question--


5145
5:16:15,53 --> 5:16:18,3



5146
5:16:18,3 --> 5:16:18,74
OK.


5147
5:16:18,74 --> 5:16:21,5
Let's go ahead and take one live
question, and then we're


5148
5:16:21,5 --> 5:16:23,2
probably going to just move
on to the next talk.


5149
5:16:23,2 --> 5:16:23,63
So please.


5150
5:16:23,63 --> 5:16:25,92
AUDIENCE: For some time, Firefox
has been able to


5151
5:16:25,92 --> 5:16:30,16
control the profile.


5152
5:16:30,16 --> 5:16:34,1
I think Chrome's handling
of profile now


5153
5:16:34,1 --> 5:16:36,53
has parity with Firefox's.


5154
5:16:36,53 --> 5:16:38,9
And I don't think it's part of
WebDriver specification.


5155
5:16:38,9 --> 5:16:43,2
Is that something that you're
talking to Mozilla about, and


5156
5:16:43,2 --> 5:16:44,7
will it continue to support,


5157
5:16:44,7 --> 5:16:46,29
manipulating profiles in Chrome?


5158
5:16:46,29 --> 5:16:48,91
KEN KANIA: Right.


5159
5:16:48,91 --> 5:16:52,17
To start off, we are not
currently talking with Mozilla


5160
5:16:52,17 --> 5:16:53,37
about that.


5161
5:16:53,37 --> 5:16:57,99
But we are interested in maybe
not supporting profiles per


5162
5:16:57,99 --> 5:17:0,16
se, but there's a distinction
in Chrome--


5163
5:17:0,16 --> 5:17:1,56
I'm not sure about the
other browsers--


5164
5:17:1,56 --> 5:17:3,68
between your user
data directory


5165
5:17:3,68 --> 5:17:4,73
and also your profile.


5166
5:17:4,73 --> 5:17:8,88
So for ChromeDriver, we do, in
the tool, allow you to specify


5167
5:17:8,88 --> 5:17:12,33
a custom user data directory,
which maybe has several


5168
5:17:12,33 --> 5:17:13,96
profiles already set up.


5169
5:17:13,96 --> 5:17:15,63
Be able to do stuff like that.


5170
5:17:15,63 --> 5:17:18,5
But we don't have any way now
to dynamically, through that


5171
5:17:18,5 --> 5:17:21,5
WebDriver API, create new
profiles, or edit profiles, or


5172
5:17:21,5 --> 5:17:24,9
anything like that.


5173
5:17:24,9 --> 5:17:25,18
TONY VOELLM: Great.


5174
5:17:25,18 --> 5:17:26,142
Thank you, Ken.


5175
5:17:26,142 --> 5:17:27,126
KEN KANIA: OK.


5176
5:17:27,126 --> 5:17:27,618
Thanks.


5177
5:17:27,618 --> 5:17:32,54
[APPLAUSE]


5178
5:17:32,54 --> 5:17:37,63
TONY VOELLM: Our next speaker
up is Vojta Jina.


5179
5:17:37,63 --> 5:17:41,7
He likes funky jazz, and he has
a very action-packed talk.


5180
5:17:41,7 --> 5:17:42,5
He's probably going to
run right to the


5181
5:17:42,5 --> 5:17:44,6
middle, or to the end.


5182
5:17:44,6 --> 5:17:47,59
So you probably won't have
questions, and we'll just go


5183
5:17:47,59 --> 5:17:52,11
right on into the next talk
right after he's done.


5184
5:17:52,11 --> 5:17:52,836
Here you go.


5185
5:17:52,836 --> 5:17:53,19
Great.


5186
5:17:53,19 --> 5:17:53,79
Thank you.


5187
5:17:53,79 --> 5:17:55,4
VOJTA JINA: Thanks.


5188
5:17:55,4 --> 5:18:6,49



5189
5:18:6,49 --> 5:18:11,28
This conference is about
automation in testing.


5190
5:18:11,28 --> 5:18:14,54
So I assume you guys are one of
those crazy people who try


5191
5:18:14,54 --> 5:18:15,79
to automate everything.


5192
5:18:15,79 --> 5:18:18,41



5193
5:18:18,41 --> 5:18:21,84
Even if it takes more time than
to do it manually, we


5194
5:18:21,84 --> 5:18:27,17
write a script for it because
that's what we believe in.


5195
5:18:27,17 --> 5:18:28,3
And that's cool.


5196
5:18:28,3 --> 5:18:31,2
I mean, Angler team,
we are the same.


5197
5:18:31,2 --> 5:18:34,43
Like we basically try to
automate everything.


5198
5:18:34,43 --> 5:18:38,74
So from simple things like
automatic deployment, to


5199
5:18:38,74 --> 5:18:42,6
website, to things like--


5200
5:18:42,6 --> 5:18:45,37
we have CI server, and whenever
I push some code to


5201
5:18:45,37 --> 5:18:49,48
GitHub, it automatically builds
Angler, runs all the


5202
5:18:49,48 --> 5:18:52,22
tests on different browsers,
and screams at


5203
5:18:52,22 --> 5:18:53,47
me and if it fails.


5204
5:18:53,47 --> 5:18:56,11



5205
5:18:56,11 --> 5:19:0,1
Or every release has
a change log.


5206
5:19:0,1 --> 5:19:3,81
That's basically a list of
changes, like list of new


5207
5:19:3,81 --> 5:19:7,8
features, back fixes,
breaking changes.


5208
5:19:7,8 --> 5:19:8,46
And you know what?


5209
5:19:8,46 --> 5:19:10,37
We generate even that.


5210
5:19:10,37 --> 5:19:14,35
We have a convention for Git
messages, and then there's a


5211
5:19:14,35 --> 5:19:16,74
script that basically generates
the change log based


5212
5:19:16,74 --> 5:19:19,77
on the Git history.


5213
5:19:19,77 --> 5:19:22,53
My favorite example
is Angler docs.


5214
5:19:22,53 --> 5:19:25,9
So let me actually show
you the docs.


5215
5:19:25,9 --> 5:19:27,83



5216
5:19:27,83 --> 5:19:33,6
If you go to docs.angler.js.org,
there is


5217
5:19:33,6 --> 5:19:35,89
Angler documentation.


5218
5:19:35,89 --> 5:19:38,89
This is, for instance, API docs
for ngClick, which is a


5219
5:19:38,89 --> 5:19:40,69
directive in Angler.


5220
5:19:40,69 --> 5:19:43,92
And down here, here's
an example.


5221
5:19:43,92 --> 5:19:47,23
Here is a source code for that
example, and then there's a


5222
5:19:47,23 --> 5:19:50,36
live preview, like demo, where
you can actually play with it,


5223
5:19:50,36 --> 5:19:52,93
and see how it works.


5224
5:19:52,93 --> 5:19:54,64
Cool.


5225
5:19:54,64 --> 5:19:56,92
Of course, the whole
documentation is generated


5226
5:19:56,92 --> 5:19:58,49
automatically.


5227
5:19:58,49 --> 5:20:2,5
But the thing I want to show you
is the second tab, which


5228
5:20:2,5 --> 5:20:7,82
says, "End to end test." That
is basically an example for


5229
5:20:7,82 --> 5:20:10,54
you how you could possibly
test such a code.


5230
5:20:10,54 --> 5:20:10,9
Right?


5231
5:20:10,9 --> 5:20:13,15
Like end to end test for that.


5232
5:20:13,15 --> 5:20:14,38
But what do we do with that?


5233
5:20:14,38 --> 5:20:18,6
We extract all these tests, and
then we round them as a


5234
5:20:18,6 --> 5:20:19,16
part of the build.


5235
5:20:19,16 --> 5:20:22,9
Let me show you that.


5236
5:20:22,9 --> 5:20:24,37
So it looks like something
like this.


5237
5:20:24,37 --> 5:20:27,71
Now you can see it's basically
going through the whole


5238
5:20:27,71 --> 5:20:29,69
documentation, and checking
whether these


5239
5:20:29,69 --> 5:20:33,14
examples still work.


5240
5:20:33,14 --> 5:20:36,35
This is really awesome, because
before we did this, it


5241
5:20:36,35 --> 5:20:38,71
would be like-- all the time, it
would happen-- like someone


5242
5:20:38,71 --> 5:20:39,39
would email me.


5243
5:20:39,39 --> 5:20:39,82
Like, hey, man.


5244
5:20:39,82 --> 5:20:43,36
Your docs example for
HTDP doesn't work.


5245
5:20:43,36 --> 5:20:44,2
Like, ah.


5246
5:20:44,2 --> 5:20:44,92
Cool


5247
5:20:44,92 --> 5:20:48,38
I even didn't know there was
an example for that.


5248
5:20:48,38 --> 5:20:51,28
But now with this, you don't
have to think about it.


5249
5:20:51,28 --> 5:20:54,22
And if you break it, it
will scream at you.


5250
5:20:54,22 --> 5:20:56,95



5251
5:20:56,95 --> 5:20:59,98
We basically tried to
automate everything.


5252
5:20:59,98 --> 5:21:3,2
Let me kill this guy.


5253
5:21:3,2 --> 5:21:5,41
And we do testing a lot.


5254
5:21:5,41 --> 5:21:7,37
We rely on testing a lot.


5255
5:21:7,37 --> 5:21:10,25
And, therefore, we want to make
sure that our testing


5256
5:21:10,25 --> 5:21:12,4
story is a really efficient.


5257
5:21:12,4 --> 5:21:15,94
That's pretty much why we did
Karma, which is, I would say,


5258
5:21:15,94 --> 5:21:17,41
a test run that fits
our needs.


5259
5:21:17,41 --> 5:21:20,65
Because we did we made
it for ourselves.


5260
5:21:20,65 --> 5:21:22,49
And that's what I want
to show you now.


5261
5:21:22,49 --> 5:21:25,85
I want to show you this test
run that we use to test


5262
5:21:25,85 --> 5:21:30,33
Angler, and pretty much to
test any JavaScript.


5263
5:21:30,33 --> 5:21:31,58
So let's do a demo.


5264
5:21:31,58 --> 5:21:35,89



5265
5:21:35,89 --> 5:21:38,53
So Karma is an MPM package.


5266
5:21:38,53 --> 5:21:42,0
So assuming you have no JS, you
get install it through and


5267
5:21:42,0 --> 5:21:44,6
MPM Install Karma.


5268
5:21:44,6 --> 5:21:47,98
And then, the first thing you
need in order to start, you


5269
5:21:47,98 --> 5:21:51,36
need a configuration file, which
is basically for Karma


5270
5:21:51,36 --> 5:21:52,59
to know about your project.


5271
5:21:52,59 --> 5:21:55,83
Basically what are the
files of the project?


5272
5:21:55,83 --> 5:21:58,4
What browsers you want to use,
which testing framework you're


5273
5:21:58,4 --> 5:22:0,48
using, and stuff like that.


5274
5:22:0,48 --> 5:22:5,34
To make it simple, you can
generate this config file by


5275
5:22:5,34 --> 5:22:6,59
Karma in it.


5276
5:22:6,59 --> 5:22:9,14
And it would ask you a couple
of questions, like what


5277
5:22:9,14 --> 5:22:13,56
testing framework you want
to use, which browsers,


5278
5:22:13,56 --> 5:22:14,87
and stuff like that.


5279
5:22:14,87 --> 5:22:17,68
And it will generate the
config file for you.


5280
5:22:17,68 --> 5:22:20,14
Or if you are using Grunt--


5281
5:22:20,14 --> 5:22:21,97
Do you know, guys, Grunt JS?


5282
5:22:21,97 --> 5:22:24,83
It's a really awesome task
runner for JavaScript.


5283
5:22:24,83 --> 5:22:27,99
So if you are using Grunt,
there's a Grunt plug-in for


5284
5:22:27,99 --> 5:22:30,95
Karma that allows you to
configure Karma through Grunt,


5285
5:22:30,95 --> 5:22:35,16
and you don't need this
configuration file at all.


5286
5:22:35,16 --> 5:22:35,775
All right.


5287
5:22:35,775 --> 5:22:41,55
For This demo, I'm going to be
using Angler codebase, which


5288
5:22:41,55 --> 5:22:43,3
already has this config file.


5289
5:22:43,3 --> 5:22:44,64
So we can start it.


5290
5:22:44,64 --> 5:22:46,1
I can do karma start.


5291
5:22:46,1 --> 5:22:51,33



5292
5:22:51,33 --> 5:22:53,76
What's happening in the
background, it starts a


5293
5:22:53,76 --> 5:22:57,33
browser that I told it in
the config file that


5294
5:22:57,33 --> 5:22:59,56
I want to be using.


5295
5:22:59,56 --> 5:23:2,13
You know, we can forget about
the browser for now.


5296
5:23:2,13 --> 5:23:5,8
But the important thing is that
there is a real browser


5297
5:23:5,8 --> 5:23:7,82
in the background that
karma will use to


5298
5:23:7,82 --> 5:23:9,52
actually executive a task.


5299
5:23:9,52 --> 5:23:13,21
That's something I want to
actually talk about, because


5300
5:23:13,21 --> 5:23:14,59
you can execute--


5301
5:23:14,59 --> 5:23:16,4
you can test [INAUDIBLE]


5302
5:23:16,4 --> 5:23:16,51
browsers.


5303
5:23:16,51 --> 5:23:19,28
You could do like
OJS and Rhino.


5304
5:23:19,28 --> 5:23:23,6
But for us, it was really
crucial to use real browsers,


5305
5:23:23,6 --> 5:23:25,7
because if you know Angler,
there's tons of like


5306
5:23:25,7 --> 5:23:28,24
components, and custom
directives, and stuff.


5307
5:23:28,24 --> 5:23:29,92
And that's tons of
DOM manipulation.


5308
5:23:29,92 --> 5:23:31,4
And we need to DOM API.


5309
5:23:31,4 --> 5:23:33,0
We need to test these things.


5310
5:23:33,0 --> 5:23:35,7
So we need a real browser
for that.


5311
5:23:35,7 --> 5:23:39,27
Plus, there are so many
inconsistencies between


5312
5:23:39,27 --> 5:23:40,23
different browsers.


5313
5:23:40,23 --> 5:23:43,45
And honestly, JavaScript itself,
as a language, it's


5314
5:23:43,45 --> 5:23:44,1
not that bad.


5315
5:23:44,1 --> 5:23:45,5
It's pretty consistent.


5316
5:23:45,5 --> 5:23:49,96
But the DOM API, that's what's
most of the issues.


5317
5:23:49,96 --> 5:23:53,45
So again for us, we need
a real browsers.


5318
5:23:53,45 --> 5:23:57,27
Plus, the third thing, there
is a good advantage once


5319
5:23:57,27 --> 5:23:58,91
you're using real browsers.


5320
5:23:58,91 --> 5:24:2,26
It basically communicates
through HTDP in [INAUDIBLE]


5321
5:24:2,26 --> 5:24:5,38
circuit, so it means you
can use any browser.


5322
5:24:5,38 --> 5:24:10,2
You can test your phone, your
tablet, TV, Playstation,


5323
5:24:10,2 --> 5:24:11,45
whatever you want.


5324
5:24:11,45 --> 5:24:14,68



5325
5:24:14,68 --> 5:24:15,29
OK.


5326
5:24:15,29 --> 5:24:18,18
Let's go to source code.


5327
5:24:18,18 --> 5:24:21,1
Another thing that's happening
in the background is that


5328
5:24:21,1 --> 5:24:25,57
Karma is now watching all the
source files of my project.


5329
5:24:25,57 --> 5:24:29,34
And whatever I hear is like
cache factories and service in


5330
5:24:29,34 --> 5:24:31,72
Angler, it's not important
what it is.


5331
5:24:31,72 --> 5:24:36,0
But I'm going to save the file,
just press Command-S.


5332
5:24:36,0 --> 5:24:40,15
And you can see that Karma
immediately sees that, and


5333
5:24:40,15 --> 5:24:42,79
starts executing
all the tests.


5334
5:24:42,79 --> 5:24:46,62
You can see it executed over
1,800 of unit tests in, like,


5335
5:24:46,62 --> 5:24:48,25
three seconds on the
real browser.


5336
5:24:48,25 --> 5:24:53,5



5337
5:24:53,5 --> 5:24:56,1
I mean, three seconds is not
bad, but if you have a huge


5338
5:24:56,1 --> 5:24:58,29
project, it can be more.


5339
5:24:58,29 --> 5:25:2,22
And our goal is to get this
instant feedback so I can run


5340
5:25:2,22 --> 5:25:3,4
these tests all the time.


5341
5:25:3,4 --> 5:25:5,81
Because what I really do during
development is, like, I


5342
5:25:5,81 --> 5:25:9,7
want to run these tests
on every Save.


5343
5:25:9,7 --> 5:25:12,63
That's why we have
this feature.


5344
5:25:12,63 --> 5:25:16,7
We call it d-describe
and [INAUDIBLE].


5345
5:25:16,7 --> 5:25:19,25
On the right side,
that's my test.


5346
5:25:19,25 --> 5:25:20,94
I'm not sure if you realize
the syntax.


5347
5:25:20,94 --> 5:25:22,43
It's a Jasmine testing
framework.


5348
5:25:22,43 --> 5:25:25,32



5349
5:25:25,32 --> 5:25:28,3
I should mention that Karma
is agnostic of testing


5350
5:25:28,3 --> 5:25:28,67
frameworks.


5351
5:25:28,67 --> 5:25:31,16
You can use it with any testing
framework you like,


5352
5:25:31,16 --> 5:25:32,0
pretty much.


5353
5:25:32,0 --> 5:25:34,935
There is an adapter for
[INAUDIBLE], Mocha, Jasmine,


5354
5:25:34,935 --> 5:25:36,7
and Nodeunit, and stuff.


5355
5:25:36,7 --> 5:25:38,51
We at Angler are
using Jasmine.


5356
5:25:38,51 --> 5:25:40,9
That's why this example
is in Jasmine.


5357
5:25:40,9 --> 5:25:42,82
But you can use anything else.


5358
5:25:42,82 --> 5:25:46,36
Describe in Jasmine basically
means, like, defining a test


5359
5:25:46,36 --> 5:25:48,47
suite, a list of suites.


5360
5:25:48,47 --> 5:25:51,6
And it means defining
a single test.


5361
5:25:51,6 --> 5:25:54,17
And what I can do, I can
focus these things.


5362
5:25:54,17 --> 5:25:55,89
I can put d-describe.


5363
5:25:55,89 --> 5:25:58,74
And now when I say, if you can
see, it immediately executes


5364
5:25:58,74 --> 5:26:0,4
just this suit.


5365
5:26:0,4 --> 5:26:2,79
So it's even faster.


5366
5:26:2,79 --> 5:26:6,84
Now, it executed only 24 of
these 1,800 unit tests, and it


5367
5:26:6,84 --> 5:26:10,37
was like, I don't know,
a few more seconds.


5368
5:26:10,37 --> 5:26:12,8
And so the goal is--


5369
5:26:12,8 --> 5:26:16,74
The thing about this that's
important is it gives you like


5370
5:26:16,74 --> 5:26:17,71
new workflow.


5371
5:26:17,71 --> 5:26:22,1
It's basically like using test
as a development workflow,


5372
5:26:22,1 --> 5:26:25,52
where you basically can stay in
your text editor, and you


5373
5:26:25,52 --> 5:26:28,53
don't have to move back and
forth between the browser and


5374
5:26:28,53 --> 5:26:31,13
your text editor to see
how things work.


5375
5:26:31,13 --> 5:26:33,2
Because what I can do--


5376
5:26:33,2 --> 5:26:35,355
let's say in this
test, I can do--


5377
5:26:35,355 --> 5:26:36,63
I don't know--


5378
5:26:36,63 --> 5:26:41,25
console.log(cache1.) Whatever it is.


5379
5:26:41,25 --> 5:26:42,795
Maybe give me size.


5380
5:26:42,795 --> 5:26:46,99



5381
5:26:46,99 --> 5:26:49,8
It gives me error, undefined,
whatever.


5382
5:26:49,8 --> 5:26:52,36
OK, so there's no size.


5383
5:26:52,36 --> 5:26:53,61
So that gives us info.


5384
5:26:53,61 --> 5:26:56,84



5385
5:26:56,84 --> 5:26:59,96
The thing is that I just saved
the file, and I immediately


5386
5:26:59,96 --> 5:27:3,51
see in the console the results
from the real browser.


5387
5:27:3,51 --> 5:27:6,74
So I don't have to go to the
browser to do these things.


5388
5:27:6,74 --> 5:27:9,8
This is really important for the
workflow, because you can


5389
5:27:9,8 --> 5:27:11,47
stay in the browser.


5390
5:27:11,47 --> 5:27:12,72
Sorry, in the text editor.


5391
5:27:12,72 --> 5:27:20,85



5392
5:27:20,85 --> 5:27:24,1
One more thing that I want to
mention is that there's no


5393
5:27:24,1 --> 5:27:25,82
support from the text editor.


5394
5:27:25,82 --> 5:27:26,99
I'm using Sublime.


5395
5:27:26,99 --> 5:27:29,37
You can use Emacs, Vim,
whatever you want.


5396
5:27:29,37 --> 5:27:31,6
Because the only thing that
the text editor in this


5397
5:27:31,6 --> 5:27:33,2
workflow does is saving files.


5398
5:27:33,2 --> 5:27:36,47



5399
5:27:36,47 --> 5:27:38,34
I got one more thing that
I want to show you.


5400
5:27:38,34 --> 5:27:43,58
And that's debugging.


5401
5:27:43,58 --> 5:27:48,55
Because what I can do, I can,
inside this code, if I want to


5402
5:27:48,55 --> 5:27:58,17
actually use a real debugger, I
can do this, and guess what.


5403
5:27:58,17 --> 5:28:1,0
I can go to the browser that I
had somewhere in background,


5404
5:28:1,0 --> 5:28:2,93
and I have debugger.


5405
5:28:2,93 --> 5:28:4,0
I can watch variables.


5406
5:28:4,0 --> 5:28:5,24
I can see call stack.


5407
5:28:5,24 --> 5:28:7,37
I can step into functions.


5408
5:28:7,37 --> 5:28:9,64
And this is something that is
not a feature of Karma.


5409
5:28:9,64 --> 5:28:10,95
It's just the browser.


5410
5:28:10,95 --> 5:28:13,29
Like most of the modern
browsers, they have debuggers.


5411
5:28:13,29 --> 5:28:16,55
So it only allows
you to use that.


5412
5:28:16,55 --> 5:28:19,6
And again, you don't need any
support from the text editor


5413
5:28:19,6 --> 5:28:20,95
to do that.


5414
5:28:20,95 --> 5:28:24,1
If you happen to be using
something like WebStorm, or


5415
5:28:24,1 --> 5:28:27,82
some better IDEs, you can even
configure it to do this do


5416
5:28:27,82 --> 5:28:29,72
debugging directly
from WebStorm.


5417
5:28:29,72 --> 5:28:31,96
So you can put break
points and stuff.


5418
5:28:31,96 --> 5:28:35,2
You even don't have to leave
your IDE for debugging.


5419
5:28:35,2 --> 5:28:43,12



5420
5:28:43,12 --> 5:28:45,97
All right.


5421
5:28:45,97 --> 5:28:47,92
There is tons of
other features.


5422
5:28:47,92 --> 5:28:50,21
Like, it can do code coverage.


5423
5:28:50,21 --> 5:28:52,67
It can [INAUDIBLE] a file
so you can develop.


5424
5:28:52,67 --> 5:28:55,58
You can use CoffeeScript and it
will compile CoffeeScript


5425
5:28:55,58 --> 5:28:56,68
on the fly.


5426
5:28:56,68 --> 5:29:1,59
There's a Dart plug-in
for testing Dart.


5427
5:29:1,59 --> 5:29:3,28
All kinds of other plug-ins.


5428
5:29:3,28 --> 5:29:6,78
But I think the most important
feature is the workflow, that


5429
5:29:6,78 --> 5:29:10,93
you can run tests, and instantly
get the feedback.


5430
5:29:10,93 --> 5:29:12,22
That's the main thing,
so that's what I


5431
5:29:12,22 --> 5:29:14,21
wanted to show you.


5432
5:29:14,21 --> 5:29:17,36
If you like it, you can go
to GitHub check it out.


5433
5:29:17,36 --> 5:29:20,74
It's open source, so [INAUDIBLE]
pull request.


5434
5:29:20,74 --> 5:29:24,91
And as I said, we're probably
running time pretty soon, so


5435
5:29:24,91 --> 5:29:27,86
I'm not sure if we are going
to have questions.


5436
5:29:27,86 --> 5:29:30,63
But I'm going to be here today,
and whole tomorrow.


5437
5:29:30,63 --> 5:29:33,71
So find me, and I'm more than
happy to talk to you guys


5438
5:29:33,71 --> 5:29:36,116
about pretty much anything.


5439
5:29:36,116 --> 5:29:37,29
TONY VOELLM: Thank you, Vojta.


5440
5:29:37,29 --> 5:29:40,345
Actually I think we may have
time for one question.


5441
5:29:40,345 --> 5:29:43,47



5442
5:29:43,47 --> 5:29:46,57
I have to say I was really
happy that you only typed


5443
5:29:46,57 --> 5:29:48,45
karma start.


5444
5:29:48,45 --> 5:29:49,92
And you never typed karma end.


5445
5:29:49,92 --> 5:29:52,19
I was a little worried if that
was going to happen, because--


5446
5:29:52,19 --> 5:29:54,28
VOJTA JINA: Oh.


5447
5:29:54,28 --> 5:29:54,94
I did Control-C.


5448
5:29:54,94 --> 5:29:56,78
TONY VOELLM: I tried to
make everyone up here.


5449
5:29:56,78 --> 5:29:58,23
OK.


5450
5:29:58,23 --> 5:30:0,9
OK, with that, we can take a
live question, if someone has


5451
5:30:0,9 --> 5:30:1,84
a live question.


5452
5:30:1,84 --> 5:30:5,52
Or we can go to the Dory.


5453
5:30:5,52 --> 5:30:7,92
Or we can move ahead.


5454
5:30:7,92 --> 5:30:8,29
OK.


5455
5:30:8,29 --> 5:30:9,5
I got a question here.


5456
5:30:9,5 --> 5:30:10,7
The number one question.


5457
5:30:10,7 --> 5:30:13,61
You probably saw this, actually,
in the UI, too.


5458
5:30:13,61 --> 5:30:16,98
It says, "Why was Karma renamed
from Testacular?"


5459
5:30:16,98 --> 5:30:18,2
VOJTA JINA: OK.


5460
5:30:18,2 --> 5:30:20,985
I didn't expect that
question at all.


5461
5:30:20,985 --> 5:30:25,54



5462
5:30:25,54 --> 5:30:31,52
I don't think I want to answer
this question on the stage.


5463
5:30:31,52 --> 5:30:36,32
But the good thing is that now
typing Karma is way faster


5464
5:30:36,32 --> 5:30:37,2
than Testacular.


5465
5:30:37,2 --> 5:30:40,27
Because especially, if you are
using a regular layout,


5466
5:30:40,27 --> 5:30:42,15
keyboard layout, it's
like really--


5467
5:30:42,15 --> 5:30:43,48
it's really easy to type.


5468
5:30:43,48 --> 5:30:46,21



5469
5:30:46,21 --> 5:30:47,12
TONY VOELLM: Great.


5470
5:30:47,12 --> 5:30:47,52
All right.


5471
5:30:47,52 --> 5:30:48,78
Thank you, Vojta.


5472
5:30:48,78 --> 5:30:51,9
Than you very much.


5473
5:30:51,9 --> 5:30:54,1
VOJTA JINA: I think I would
like to close this with a


5474
5:30:54,1 --> 5:30:54,64
quick story.


5475
5:30:54,64 --> 5:30:56,955
I think we have two minutes,
so I can do that.


5476
5:30:56,955 --> 5:30:58,5
TONY VOELLM: 30 seconds.


5477
5:30:58,5 --> 5:30:59,29
VOJTA JINA: 30 seconds?


5478
5:30:59,29 --> 5:31:0,94
I will do it quickly.


5479
5:31:0,94 --> 5:31:4,5
Because I'm really happy
about that thing.


5480
5:31:4,5 --> 5:31:7,465
There is a project called
YouTube on TV.


5481
5:31:7,465 --> 5:31:9,77
It's basically if you have
Playstation 3, there's a


5482
5:31:9,77 --> 5:31:12,42
YouTube app, and it's
written in Angler.


5483
5:31:12,42 --> 5:31:15,89
And a few months ago, we were
helping the team to debug some


5484
5:31:15,89 --> 5:31:20,17
performance issues, and I
noticed that they have like 90


5485
5:31:20,17 --> 5:31:22,35
or 100 unit tests.


5486
5:31:22,35 --> 5:31:24,7
I was like, well,
that's not many.


5487
5:31:24,7 --> 5:31:26,38
So I asked them, like,
guys, why don't


5488
5:31:26,38 --> 5:31:28,4
you write more tests?


5489
5:31:28,4 --> 5:31:31,94
And when they showed me like how
painful it was to, like,


5490
5:31:31,94 --> 5:31:36,1
add a new test in their
[INAUDIBLE], and how slow it


5491
5:31:36,1 --> 5:31:39,5
was to run these tests,
I was like, OK.


5492
5:31:39,5 --> 5:31:41,2
I understand that.


5493
5:31:41,2 --> 5:31:43,81
And so the next week, I helped
them to set up their


5494
5:31:43,81 --> 5:31:44,735
environment with Karma.


5495
5:31:44,735 --> 5:31:47,2
And we actually set it up
to even run it on real


5496
5:31:47,2 --> 5:31:48,82
Playstation.


5497
5:31:48,82 --> 5:31:52,62
And it was really cool, because
in a few days, maybe a


5498
5:31:52,62 --> 5:31:55,52
week, I got an email from Tyler,
one guy on the team.


5499
5:31:55,52 --> 5:31:57,26
And he was like, Vojta!


5500
5:31:57,26 --> 5:31:58,66
This shit is awesome!


5501
5:31:58,66 --> 5:32:0,64
Like it completely
changed our life.


5502
5:32:0,64 --> 5:32:3,39
We test drive everything now.


5503
5:32:3,39 --> 5:32:6,54
Believe me or not, but after a
week or something, they had


5504
5:32:6,54 --> 5:32:7,83
over 400 unit tests.


5505
5:32:7,83 --> 5:32:10,8
So it basically took them about
a year to write 100


5506
5:32:10,8 --> 5:32:13,36
tests, and then they wrote
like 300 tests


5507
5:32:13,36 --> 5:32:16,52
in just a few days.


5508
5:32:16,52 --> 5:32:21,47
The point is that you should
spend time figuring out your


5509
5:32:21,47 --> 5:32:23,55
workflow and your environment.


5510
5:32:23,55 --> 5:32:25,1
Find the right tools for you.


5511
5:32:25,1 --> 5:32:26,34
It doesn't have to be Karma.


5512
5:32:26,34 --> 5:32:27,1
I don't care.


5513
5:32:27,1 --> 5:32:28,95
Use whatever works
for you guys.


5514
5:32:28,95 --> 5:32:31,7
But it's so much worth
it to spend the time.


5515
5:32:31,7 --> 5:32:34,15
Because once you do it, it will
save you tons of time.


5516
5:32:34,15 --> 5:32:35,47
TONY VOELLM: Cool.


5517
5:32:35,47 --> 5:32:35,57
Thank you.


5518
5:32:35,57 --> 5:32:35,99
Thank you.


5519
5:32:35,99 --> 5:32:41,71
[APPLAUSE]


5520
5:32:41,71 --> 5:32:46,89
TONY VOELLM: Next up here we
have Patrik Hoglund, who is an


5521
5:32:46,89 --> 5:32:51,5
avid drummer, which probably
comes in quite handy when he's


5522
5:32:51,5 --> 5:32:55,8
banging his head against this
automated video quality


5523
5:32:55,8 --> 5:32:56,76
measurement system.


5524
5:32:56,76 --> 5:32:57,76
So with that, Patrik.


5525
5:32:57,76 --> 5:32:58,35
PATRIK HOGLUND: Thank you.


5526
5:32:58,35 --> 5:33:0,33
Thank you.


5527
5:33:0,33 --> 5:33:1,19
Right.


5528
5:33:1,19 --> 5:33:4,65
So I'm going to talk about
automated video quality tests.


5529
5:33:4,65 --> 5:33:8,6
That is a problem we run into
with the WebRTC project.


5530
5:33:8,6 --> 5:33:12,6
First, has anyone heard
about WebRTC before?


5531
5:33:12,6 --> 5:33:12,87
There's a couple.


5532
5:33:12,87 --> 5:33:13,21
OK.


5533
5:33:13,21 --> 5:33:15,56
Well, for the rest of you, no.


5534
5:33:15,56 --> 5:33:19,44
WebRTC is a web standard that
is being developed right now


5535
5:33:19,44 --> 5:33:22,19
for video and voice chat
built into the browser.


5536
5:33:22,19 --> 5:33:25,83
We are implementing this
right now in Chrome.


5537
5:33:25,83 --> 5:33:29,34
And also, Firefox and Opera
are implementing this web


5538
5:33:29,34 --> 5:33:31,43
style in here.


5539
5:33:31,43 --> 5:33:35,21
WebRTC gives you the possibility
to, in a web page


5540
5:33:35,21 --> 5:33:38,16
with JavaScript, acquire users'
webcam and microphone,


5541
5:33:38,16 --> 5:33:43,24
with their consent, of course,
and send it over the net


5542
5:33:43,24 --> 5:33:45,22
directly between the
participants.


5543
5:33:45,22 --> 5:33:47,35
So it uses peer-to-peer
technology.


5544
5:33:47,35 --> 5:33:49,69
And all the stuff is built into
the standard, so it's


5545
5:33:49,69 --> 5:33:53,33
really easy to write a video
chat application that works,


5546
5:33:53,33 --> 5:33:57,42
regardless of LIT, and
firewalls, and other things


5547
5:33:57,42 --> 5:33:58,82
that can be in the way.


5548
5:33:58,82 --> 5:34:0,9
OK?


5549
5:34:0,9 --> 5:34:4,9
So the Chrome implementation of
this is done in Stockholm,


5550
5:34:4,9 --> 5:34:5,34
and Mountain View,
and in Kirkland.


5551
5:34:5,34 --> 5:34:9,21
And I work in the Stockholm
office with this project.


5552
5:34:9,21 --> 5:34:12,55
So we wanted to test this.


5553
5:34:12,55 --> 5:34:16,6
But to explain what we need to
test, I'm going to explain


5554
5:34:16,6 --> 5:34:19,46
briefly how a WebRTC
call works.


5555
5:34:19,46 --> 5:34:23,72
This diagram here, as you can
see, is a very simplified


5556
5:34:23,72 --> 5:34:24,49
description.


5557
5:34:24,49 --> 5:34:28,14
So what happens here is that
we can imagine we have two


5558
5:34:28,14 --> 5:34:31,46
browsers on two different
machines somewhere.


5559
5:34:31,46 --> 5:34:34,41
And then it is up to the web
page to implement that


5560
5:34:34,41 --> 5:34:36,9
application part there,
as you can see.


5561
5:34:36,9 --> 5:34:39,14
And implement a signaling
solution.


5562
5:34:39,14 --> 5:34:41,63
The point of the signaling
solution is to first figure


5563
5:34:41,63 --> 5:34:43,41
out like, who would
you like to call


5564
5:34:43,41 --> 5:34:44,93
with WebRTC, for instance?


5565
5:34:44,93 --> 5:34:46,58
And [INAUDIBLE]


5566
5:34:46,58 --> 5:34:53,2
implement like a contact list,
or random, or whatever.


5567
5:34:53,2 --> 5:34:57,66
And also the signal resolution
exchanges the information that


5568
5:34:57,66 --> 5:34:58,95
is needed to set up the call.


5569
5:34:58,95 --> 5:35:1,96
For instance, what code
[INAUDIBLE] support and so on.


5570
5:35:1,96 --> 5:35:4,11
We're going to gloss over that
part completely, and start


5571
5:35:4,11 --> 5:35:5,18
focusing on number two.


5572
5:35:5,18 --> 5:35:7,45
You can see it on there,
which is media.


5573
5:35:7,45 --> 5:35:8,61
When media starts flowing.


5574
5:35:8,61 --> 5:35:9,86
OK?


5575
5:35:9,86 --> 5:35:11,65



5576
5:35:11,65 --> 5:35:13,7
Given that we set up a call,
how do we test it?


5577
5:35:13,7 --> 5:35:17,89
So one of the goals we set out
to do here was to set up a


5578
5:35:17,89 --> 5:35:19,97
call and measure the
video degradation.


5579
5:35:19,97 --> 5:35:22,16
Because obviously, when we send
video over the internet,


5580
5:35:22,16 --> 5:35:25,18
we're going to have
to compress it.


5581
5:35:25,18 --> 5:35:30,31
Also in WebRTC, there's a ton
of built-in algorithms for


5582
5:35:30,31 --> 5:35:33,94
bandwidth estimation, and like
adapting the encoding


5583
5:35:33,94 --> 5:35:36,39
parameters to how much bandwidth
you have, or how


5584
5:35:36,39 --> 5:35:39,83
loose you connection is.


5585
5:35:39,83 --> 5:35:43,0
Or, as I like to see it as a
test engineer, a lot of things


5586
5:35:43,0 --> 5:35:44,59
that can go wrong.


5587
5:35:44,59 --> 5:35:46,53
A lot of things that
can break.


5588
5:35:46,53 --> 5:35:49,79
So we wanted to measure the
video quality to the console


5589
5:35:49,79 --> 5:35:52,25
at the other end of the call.


5590
5:35:52,25 --> 5:35:55,78
We wanted those measurements
to correspond to user


5591
5:35:55,78 --> 5:35:57,13
perception as much
as possible.


5592
5:35:57,13 --> 5:35:58,6
What do I mean by that?


5593
5:35:58,6 --> 5:36:2,4
Well, basically if a user would
think it looks bad, it


5594
5:36:2,4 --> 5:36:3,67
should get a low score.


5595
5:36:3,67 --> 5:36:6,39
And if it's artifacts that a
user doesn't really notice


5596
5:36:6,39 --> 5:36:11,13
that much, it shouldn't affect
the score too much.


5597
5:36:11,13 --> 5:36:12,87
We wanted this thing to
run continuously.


5598
5:36:12,87 --> 5:36:17,13
We wanted it to be a reusable
toolchain with small tools


5599
5:36:17,13 --> 5:36:19,68
that have well-defined
tasks as much as


5600
5:36:19,68 --> 5:36:22,4
possible to make it reusable.


5601
5:36:22,4 --> 5:36:26,79
And we wanted the implementation
work to be a


5602
5:36:26,79 --> 5:36:28,236
self-contained unit
so we could hand


5603
5:36:28,236 --> 5:36:29,27
it off to an intern.


5604
5:36:29,27 --> 5:36:30,45
And that is precisely
what we did.


5605
5:36:30,45 --> 5:36:33,21
We handed it off to our
intern, [INAUDIBLE]


5606
5:36:33,21 --> 5:36:34,305
from Bulgaria.


5607
5:36:34,305 --> 5:36:36,35
And she implemented it,
and it worked great.


5608
5:36:36,35 --> 5:36:41,9
So that's why I'm here to share
with you an overview off


5609
5:36:41,9 --> 5:36:44,83
what goes into making
a tool like this.


5610
5:36:44,83 --> 5:36:46,88
We're going to obviously gloss
over a lot of details, but


5611
5:36:46,88 --> 5:36:50,23
hopefully we'll give you an idea
of what we need to do.


5612
5:36:50,23 --> 5:36:51,54
OK.


5613
5:36:51,54 --> 5:36:53,91
When we started this thing, we
already had the tests, which


5614
5:36:53,91 --> 5:36:58,76
could launch a browser, open two
tabs, launch a small C++


5615
5:36:58,76 --> 5:37:2,46
binary, which is a signaling
solution, and have the two


5616
5:37:2,46 --> 5:37:6,39
tabs set up a WebRTC call.


5617
5:37:6,39 --> 5:37:9,19
Set up a video, it gets fed
into a regular video tag.


5618
5:37:9,19 --> 5:37:12,26
HTML5  tag.


5619
5:37:12,26 --> 5:37:18,58
We had some fake webcam drivers
on all major platforms


5620
5:37:18,58 --> 5:37:21,36
so that we could basically feed
known input video into


5621
5:37:21,36 --> 5:37:26,4
the webcam and have it look
like the webcam to WebRTC.


5622
5:37:26,4 --> 5:37:29,16
We also have implementations
of the peak signal to noise


5623
5:37:29,16 --> 5:37:31,43
ratio and structural similarity
algorithms.


5624
5:37:31,43 --> 5:37:34,4
I'm not going to go into detail
what those are, but


5625
5:37:34,4 --> 5:37:37,5
supposedly together to give a
pretty good picture off the


5626
5:37:37,5 --> 5:37:38,3
video quality.


5627
5:37:38,3 --> 5:37:42,44



5628
5:37:42,44 --> 5:37:48,0
Then the first problem to solve
was, how do we record


5629
5:37:48,0 --> 5:37:50,8
what is coming out of the video
tag on the other side?


5630
5:37:50,8 --> 5:37:53,29
First, we considered screen
scraping solutions where we


5631
5:37:53,29 --> 5:37:54,81
scraped the pixels on
the screen, and


5632
5:37:54,81 --> 5:37:55,44
that kind of thing.


5633
5:37:55,44 --> 5:37:58,9
But fortunately, we were able
to avoid that because you


5634
5:37:58,9 --> 5:38:0,46
would have had to make
a platform-specific


5635
5:38:0,46 --> 5:38:2,99
implementation of that.


5636
5:38:2,99 --> 5:38:5,44
Instead, it turns out you can
take a canvas tag, and tell


5637
5:38:5,44 --> 5:38:7,54
the canvas tag, hey,
canvas tag.


5638
5:38:7,54 --> 5:38:9,94
Capture the pixels that
I'm displaying in that


5639
5:38:9,94 --> 5:38:12,83
video tag right now.


5640
5:38:12,83 --> 5:38:16,92
We hooked up to a JavaScript
timer that tries to capture at


5641
5:38:16,92 --> 5:38:21,0
30 FPS, or as fast as
it can, really.


5642
5:38:21,0 --> 5:38:23,79
And then we ran into some other
problems, like we can't


5643
5:38:23,79 --> 5:38:28,2
write the frames to disk from
the JavaScript environment, so


5644
5:38:28,2 --> 5:38:31,98
our intern wrote a Python server
that we've talked to


5645
5:38:31,98 --> 5:38:33,6
using web circuits.


5646
5:38:33,6 --> 5:38:35,46
And then the Python server
writes them to disk.


5647
5:38:35,46 --> 5:38:37,52
It's a bit more [INAUDIBLE].


5648
5:38:37,52 --> 5:38:42,1
So after running this, you end
up basically with a couple of


5649
5:38:42,1 --> 5:38:43,98
hundred of image
files on disk.


5650
5:38:43,98 --> 5:38:46,54
And then we run a small tool
to consolidate those


5651
5:38:46,54 --> 5:38:48,28
into one YUV video.


5652
5:38:48,28 --> 5:38:51,855
That is raw video.


5653
5:38:51,855 --> 5:38:52,76
All right.


5654
5:38:52,76 --> 5:38:56,5
But there's still some problems,
like we have no idea


5655
5:38:56,5 --> 5:38:57,53
where the video starts.


5656
5:38:57,53 --> 5:39:0,3
Like when we run the tests, we
don't know where we'll start


5657
5:39:0,3 --> 5:39:2,62
and end the video because the
driver is just going to loop


5658
5:39:2,62 --> 5:39:5,15
it over and over.


5659
5:39:5,15 --> 5:39:8,6
Since the algorithms I talked
about, they're only going to


5660
5:39:8,6 --> 5:39:10,62
compare frame to frame,
and give you a score.


5661
5:39:10,62 --> 5:39:13,73
You need to compare the right
frame in the output video with


5662
5:39:13,73 --> 5:39:15,55
the right time in
the input video.


5663
5:39:15,55 --> 5:39:18,23
Otherwise, you're going to
get the wrong score.


5664
5:39:18,23 --> 5:39:20,95
Even if you solved that
synchronization problem with


5665
5:39:20,95 --> 5:39:24,55
the camera driver, what if we
dropped the first two frames?


5666
5:39:24,55 --> 5:39:27,26
Then we would compare frame
and the output video with


5667
5:39:27,26 --> 5:39:28,92
frame and minus two in
the input video.


5668
5:39:28,92 --> 5:39:32,18
The score would be very much
punished for something the


5669
5:39:32,18 --> 5:39:32,95
user wouldn't have noticed.


5670
5:39:32,95 --> 5:39:35,2
So that's not good.


5671
5:39:35,2 --> 5:39:38,2
If the JavaScript happens to
not capture all the frames,


5672
5:39:38,2 --> 5:39:41,59
because I sure don't know
hard to predict how fast


5673
5:39:41,59 --> 5:39:42,985
JavaScript will run.


5674
5:39:42,985 --> 5:39:46,21



5675
5:39:46,21 --> 5:39:51,99
The trick is to encode barcodes
into the input video.


5676
5:39:51,99 --> 5:39:54,21
So you can see a bar strip
at the top there.


5677
5:39:54,21 --> 5:39:56,22
It is going to move along
with the video.


5678
5:39:56,22 --> 5:39:58,76
You see three examples of the
video here because this is


5679
5:39:58,76 --> 5:40:0,62
what our test looks like.


5680
5:40:0,62 --> 5:40:2,92
What's going in, what's coming
out from the other side, and


5681
5:40:2,92 --> 5:40:5,33
the camera is keeping up
capturing the stuff there.


5682
5:40:5,33 --> 5:40:9,75



5683
5:40:9,75 --> 5:40:10,93
How will that help us?


5684
5:40:10,93 --> 5:40:15,1
Well, it will make it able for
us to encode a unique ID in


5685
5:40:15,1 --> 5:40:19,45
each frame in the input video,
and then later find out which


5686
5:40:19,45 --> 5:40:22,93
frame we actually capture
on the other side.


5687
5:40:22,93 --> 5:40:24,93
The encoder user uses--


5688
5:40:24,93 --> 5:40:27,27
I'm going to go quickly through
these details-- so the


5689
5:40:27,27 --> 5:40:30,81
encoder uses a library called
Zebra Crossing.


5690
5:40:30,81 --> 5:40:34,9
It can generate barcode
for us.


5691
5:40:34,9 --> 5:40:36,44
So we generate a bunch of
barcodes in rising numbers,


5692
5:40:36,44 --> 5:40:39,42
like one to whatever.


5693
5:40:39,42 --> 5:40:42,505
Then it uses an ffmpeg to
convert those to YUV.


5694
5:40:42,505 --> 5:40:45,5
Then combine the YUVs
to a barcode movie.


5695
5:40:45,5 --> 5:40:47,96
So that's going to be a very
narrow movie with a moving


5696
5:40:47,96 --> 5:40:49,17
barcode in it.


5697
5:40:49,17 --> 5:40:52,395
And then we can stitch that
together with an input file of


5698
5:40:52,395 --> 5:40:56,44
our choosing and create
a video such as the


5699
5:40:56,44 --> 5:40:57,69
one we saw over here.


5700
5:40:57,69 --> 5:41:1,87



5701
5:41:1,87 --> 5:41:5,49
Our setup of the feed that
we do into a fake webcam.


5702
5:41:5,49 --> 5:41:8,49
Have WebRTC acquire
that webcam.


5703
5:41:8,49 --> 5:41:12,63
Then we also test that our
device acquisition code, and


5704
5:41:12,63 --> 5:41:16,55
all that stuff, works for
the operating systems.


5705
5:41:16,55 --> 5:41:19,72
We capture what we get on the
receiving side with the video


5706
5:41:19,72 --> 5:41:21,24
camera thing I talked about.


5707
5:41:21,24 --> 5:41:24,4
Decode the barcodes, and
then we analyze it.


5708
5:41:24,4 --> 5:41:27,27
The analysis step is the
next slide that I'm


5709
5:41:27,27 --> 5:41:27,63
going to talk about.


5710
5:41:27,63 --> 5:41:29,91
First, the barcode decoder.


5711
5:41:29,91 --> 5:41:31,93
What does the barcode
decoder do?


5712
5:41:31,93 --> 5:41:35,89
It takes the YUV movie we
produced in the capturing


5713
5:41:35,89 --> 5:41:39,64
step, splits that into a bunch
of PNG files, because that is


5714
5:41:39,64 --> 5:41:41,34
all Zebra Crossing
understands.


5715
5:41:41,34 --> 5:41:44,93
Again, using ffmeg, run it
through Zebra Crossing and,


5716
5:41:44,93 --> 5:41:46,97
then we've got a bunch
of numbers.


5717
5:41:46,97 --> 5:41:48,62
So our tools is going
to produce


5718
5:41:48,62 --> 5:41:50,46
a file called Stats.txt.


5719
5:41:50,46 --> 5:41:53,51
That is a mapping for each frame
in the output video,


5720
5:41:53,51 --> 5:41:57,79
what is the corresponding frame
in the input video?


5721
5:41:57,79 --> 5:42:0,69
That is used in the final
analysis step here.


5722
5:42:0,69 --> 5:42:4,41
So now we have this thing that
takes the original video, the


5723
5:42:4,41 --> 5:42:7,97
captured video, and
that mapping.


5724
5:42:7,97 --> 5:42:10,63
And then it's just going to
run PSNR and SSIM on each


5725
5:42:10,63 --> 5:42:13,86
frame, using the map [INAUDIBLE]
that's .txt.


5726
5:42:13,86 --> 5:42:18,97



5727
5:42:18,97 --> 5:42:22,23
What we end up with is
something like this.


5728
5:42:22,23 --> 5:42:25,95
It is a bit hard to see here in
the graph, but what you can


5729
5:42:25,95 --> 5:42:29,5
see in a graph is that first
those lines that you see in


5730
5:42:29,5 --> 5:42:32,65
there, that is the distribution
of scores.


5731
5:42:32,65 --> 5:42:35,0
So each frame is scored
individually.


5732
5:42:35,0 --> 5:42:36,77
And then the big thick line
in the middle, that is the


5733
5:42:36,77 --> 5:42:39,64
average for that
particular run.


5734
5:42:39,64 --> 5:42:42,33
What you can also see, or maybe
not, is that we are


5735
5:42:42,33 --> 5:42:46,45
around four to six decibel peak
signal to noise ratio,


5736
5:42:46,45 --> 5:42:49,39
which I would say is reasonable
for internet


5737
5:42:49,39 --> 5:42:51,81
transmitted video.


5738
5:42:51,81 --> 5:42:54,29
The big dip on the right there,
by the way, is our


5739
5:42:54,29 --> 5:42:57,1
regression, it looks like.


5740
5:42:57,1 --> 5:43:1,1
And when it goes back up again,
that is where the


5741
5:43:1,1 --> 5:43:2,26
regression was rolled back.


5742
5:43:2,26 --> 5:43:5,1



5743
5:43:5,1 --> 5:43:9,55
For the structural similarity,
similarly, we get consistent,


5744
5:43:9,55 --> 5:43:14,25
I think, about 0.926 out
of one in the score.


5745
5:43:14,25 --> 5:43:18,31



5746
5:43:18,31 --> 5:43:25,42
When we put the whole thing
together, we end up with that.


5747
5:43:25,42 --> 5:43:27,57
As you see, it's a fair amount
of stuff in there.


5748
5:43:27,57 --> 5:43:32,3
The parts I mentioned earlier,
like you have your input video


5749
5:43:32,3 --> 5:43:34,27
that you just need to prepare
and encode once.


5750
5:43:34,27 --> 5:43:37,57
And then when you run your test
continuously, you feed


5751
5:43:37,57 --> 5:43:42,7
the same video into the webcam,
and you run the tests,


5752
5:43:42,7 --> 5:43:46,2
as in our case.


5753
5:43:46,2 --> 5:43:49,83
And then you do the necessary
conversions so that you get


5754
5:43:49,83 --> 5:43:50,81
the YUV file.


5755
5:43:50,81 --> 5:43:52,18
And you decode the barcodes.


5756
5:43:52,18 --> 5:43:56,8
And you end up with something
you can analyze, and produce a


5757
5:43:56,8 --> 5:43:57,33
score from that.


5758
5:43:57,33 --> 5:43:59,71



5759
5:43:59,71 --> 5:44:1,68
So that concludes my talk.


5760
5:44:1,68 --> 5:44:4,208
Thank you for you time.


5761
5:44:4,208 --> 5:44:9,78
[APPLAUSE]


5762
5:44:9,78 --> 5:44:11,27
TONY VOELLM: Thank
you, Patrik.


5763
5:44:11,27 --> 5:44:14,12
So if you have a live
question, you


5764
5:44:14,12 --> 5:44:15,2
can go to the mic's.


5765
5:44:15,2 --> 5:44:16,9
I see somebody up there.


5766
5:44:16,9 --> 5:44:18,59
And then we can also
pull from the Dory.


5767
5:44:18,59 --> 5:44:20,38
So why don't we go live
first, please.


5768
5:44:20,38 --> 5:44:20,93
AUDIENCE: Hi.


5769
5:44:20,93 --> 5:44:23,2
So a question about
the output frames.


5770
5:44:23,2 --> 5:44:25,31
Does it ever happen that you
lose output frames because you


5771
5:44:25,31 --> 5:44:29,425
couldn't decode the bar coding
where the video quality is so


5772
5:44:29,425 --> 5:44:30,93
low you can't decode it?


5773
5:44:30,93 --> 5:44:34,49
PATRIK HOGLUND: Yeah, so
it hasn't happened


5774
5:44:34,49 --> 5:44:35,32
very much for us.


5775
5:44:35,32 --> 5:44:38,34
When it has happened, it is
because WebRTC is completely


5776
5:44:38,34 --> 5:44:41,39
broken and the CSS rendering
black or garbage or whatever.


5777
5:44:41,39 --> 5:44:45,26
So if the image gets so
distorted that even the


5778
5:44:45,26 --> 5:44:47,98
barcode library can decode the
barcodes, then the image is


5779
5:44:47,98 --> 5:44:50,1
probably completely broken.


5780
5:44:50,1 --> 5:44:52,67
So that is the conclusion you
can draw from that, really.


5781
5:44:52,67 --> 5:44:54,914



5782
5:44:54,914 --> 5:44:57,68
TONY VOELLM: Let's pull one
from the Moderator here.


5783
5:44:57,68 --> 5:44:59,82
Do you test AV sync issues?


5784
5:44:59,82 --> 5:45:3,126
If yes, how do you do it?


5785
5:45:3,126 --> 5:45:5,38
PATRIK HOGLUND: No, we don't.


5786
5:45:5,38 --> 5:45:7,55
So I guess that answers
that question.


5787
5:45:7,55 --> 5:45:11,76
No, but I mean that is almost
maybe something you can extend


5788
5:45:11,76 --> 5:45:13,35
the test to.


5789
5:45:13,35 --> 5:45:16,84
And by the way, there is a tape
for all of you here that


5790
5:45:16,84 --> 5:45:19,88
all this code that we have
written for this is open


5791
5:45:19,88 --> 5:45:21,58
source and check in through
the Chrome repository.


5792
5:45:21,58 --> 5:45:24,1
So if you want to use it,
know yourself out.


5793
5:45:24,1 --> 5:45:25,835
So if you want to write
something like that, you can


5794
5:45:25,835 --> 5:45:26,32
probably do it.


5795
5:45:26,32 --> 5:45:27,123
TONY VOELLM: Very cool.


5796
5:45:27,123 --> 5:45:28,59
Let's take another one here.


5797
5:45:28,59 --> 5:45:31,66
Are you able to measure the
video quality while streaming


5798
5:45:31,66 --> 5:45:34,73
at various network conditions?


5799
5:45:34,73 --> 5:45:36,85
PATRIK HOGLUND: No, but
we would love to


5800
5:45:36,85 --> 5:45:39,51
be able to do that.


5801
5:45:39,51 --> 5:45:44,31
Presumably when you have a lot
of packet loss or a burst of


5802
5:45:44,31 --> 5:45:48,2
packet loss or a lot of delay or
whatever, you would expect


5803
5:45:48,2 --> 5:45:49,87
the bandwidth estimation
algorithms to adjust


5804
5:45:49,87 --> 5:45:50,24
accordingly.


5805
5:45:50,24 --> 5:45:52,66
And then you should
see probably that,


5806
5:45:52,66 --> 5:45:54,4
OK, 2% packet loss.


5807
5:45:54,4 --> 5:45:56,98
Well then we got maybe 34
in PSNR or whatever.


5808
5:45:56,98 --> 5:45:58,69
And nothing can keep your stuff


5809
5:45:58,69 --> 5:46:0,84
working for all the customers.


5810
5:46:0,84 --> 5:46:3,54
And I think this is something
people don't do enough of.


5811
5:46:3,54 --> 5:46:8,26
Verifying that, OK, it looks
great on Google's office


5812
5:46:8,26 --> 5:46:11,5
network, but it will not
work in an ADSL line


5813
5:46:11,5 --> 5:46:12,66
in India, for instance.


5814
5:46:12,66 --> 5:46:15,81
So we have plans for that.


5815
5:46:15,81 --> 5:46:16,47
TONY VOELLM: Interesting.


5816
5:46:16,47 --> 5:46:18,24
We have time for one
more live question.


5817
5:46:18,24 --> 5:46:21,88
I think you got up here
first, or did you?


5818
5:46:21,88 --> 5:46:22,925
Toss up.


5819
5:46:22,925 --> 5:46:24,56
OK, left.


5820
5:46:24,56 --> 5:46:26,85
Please, what's your
name, where do you


5821
5:46:26,85 --> 5:46:27,65
work, and your question.


5822
5:46:27,65 --> 5:46:28,52
AUDIENCE: I'm [INAUDIBLE].


5823
5:46:28,52 --> 5:46:30,16
I'm from Amazon.


5824
5:46:30,16 --> 5:46:32,79
So the question I had
was why barcodes?


5825
5:46:32,79 --> 5:46:36,434
You might as well have written
numbers in there.


5826
5:46:36,434 --> 5:46:38,18
PATRIK HOGLUND: Yeah,
absolutely.


5827
5:46:38,18 --> 5:46:42,75
Well, we had a library for it,
like I said, Zebra Crossing.


5828
5:46:42,75 --> 5:46:45,5
And I think barcodes are
relatively resistant to normal


5829
5:46:45,5 --> 5:46:48,64
artifacts when you encode
and decode a video.


5830
5:46:48,64 --> 5:46:50,36
I mean, we don't want
that to be flaky.


5831
5:46:50,36 --> 5:46:52,74
And it has turned out
to work very well.


5832
5:46:52,74 --> 5:46:55,826
TONY VOELLM: If they had used
numbers, then they would have


5833
5:46:55,826 --> 5:46:58,395
had a Cookie Monster
instead of zebra.


5834
5:46:58,395 --> 5:47:0,99



5835
5:47:0,99 --> 5:47:4,22
OK, thank you, Patrik.


5836
5:47:4,22 --> 5:47:4,56
Thank you.


5837
5:47:4,56 --> 5:47:5,23
Thank you, Patrik.


5838
5:47:5,23 --> 5:47:5,61
PATRIK HOGLUND: Thank you.


5839
5:47:5,61 --> 5:47:9,601
[APPLAUSE]


5840
5:47:9,601 --> 5:47:11,3
TONY VOELLM: Got ahead
of myself.


5841
5:47:11,3 --> 5:47:14,86
Actually next up is going to be
Minal Mishra from Netflix.


5842
5:47:14,86 --> 5:47:18,16
And he's going to talk about
when bad things happen to good


5843
5:47:18,16 --> 5:47:19,41
applications.


5844
5:47:19,41 --> 5:47:23,487



5845
5:47:23,487 --> 5:47:25,5
MINAL MISHRA: Thank you.


5846
5:47:25,5 --> 5:47:27,195
Good afternoon, everyone.


5847
5:47:27,195 --> 5:47:29,68
I hope you can hear
me all right.


5848
5:47:29,68 --> 5:47:33,7
I'm Minal, and I've managed
a few of the key


5849
5:47:33,7 --> 5:47:34,97
platforms in Netflix.


5850
5:47:34,97 --> 5:47:37,92



5851
5:47:37,92 --> 5:47:40,7
To start off, did everybody
know that


5852
5:47:40,7 --> 5:47:41,87
yesterday was Earth Day?


5853
5:47:41,87 --> 5:47:44,44
So happy Earth Day
to everyone.


5854
5:47:44,44 --> 5:47:50,896
I'm going to use Earth science
to kind of introduce my topic.


5855
5:47:50,896 --> 5:47:53,87
So let's start with
what makes Earth a


5856
5:47:53,87 --> 5:47:55,19
successful life system?


5857
5:47:55,19 --> 5:47:58,54



5858
5:47:58,54 --> 5:47:59,95
One of the most widely accepted


5859
5:47:59,95 --> 5:48:2,79
theories of plate tectonics.


5860
5:48:2,79 --> 5:48:7,0
Plate tectonics, for the
uninitiated, is basically


5861
5:48:7,0 --> 5:48:9,45
large scale movements in the
Earth's lithosphere.


5862
5:48:9,45 --> 5:48:12,1



5863
5:48:12,1 --> 5:48:15,21
It is not limited to just the
formation of mountain ranges


5864
5:48:15,21 --> 5:48:20,14
and ocean trenches, but it also
postulates that it is


5865
5:48:20,14 --> 5:48:24,25
very essential for life
to succeed on Earth.


5866
5:48:24,25 --> 5:48:29,12
Some of the tasks that are
accomplished by tectonics are


5867
5:48:29,12 --> 5:48:33,8
replenishment of depleted
nutrients, generation of


5868
5:48:33,8 --> 5:48:37,21
magnetic field, which prevent
the violent solar wind from


5869
5:48:37,21 --> 5:48:41,84
affecting Earth, and stabilizing
the temperature of


5870
5:48:41,84 --> 5:48:46,22
the planet by recycling
carbon dioxide.


5871
5:48:46,22 --> 5:48:51,94
So what is the similarity
between a successful life


5872
5:48:51,94 --> 5:48:54,305
system and a successful
software application?


5873
5:48:54,305 --> 5:48:57,25



5874
5:48:57,25 --> 5:49:3,42
A successful software
application needs to adapt and


5875
5:49:3,42 --> 5:49:6,87
constantly innovate, depending
on market demand.


5876
5:49:6,87 --> 5:49:11,53
This means that there is
constant change in every layer


5877
5:49:11,53 --> 5:49:12,82
of the stack.


5878
5:49:12,82 --> 5:49:15,32
And haven't we all seen that?


5879
5:49:15,32 --> 5:49:20,29
With the success of the mobile
platforms, we know that these


5880
5:49:20,29 --> 5:49:23,16
platforms need to constantly
and rapidly innovate.


5881
5:49:23,16 --> 5:49:26,15



5882
5:49:26,15 --> 5:49:31,37
But every coin has
a flip side.


5883
5:49:31,37 --> 5:49:33,85
So does this churn.


5884
5:49:33,85 --> 5:49:38,98
In the case of life supporting
plate tectonics, we have seen


5885
5:49:38,98 --> 5:49:42,86
catastrophic side effects, like
volcanoes, landslides,


5886
5:49:42,86 --> 5:49:44,7
earthquakes.


5887
5:49:44,7 --> 5:49:48,51
And while we have come to accept
these side effects, we


5888
5:49:48,51 --> 5:49:52,15
have also made tremendous
progress in the technologies


5889
5:49:52,15 --> 5:49:57,81
that are used to determine and
drive these events with high


5890
5:49:57,81 --> 5:50:0,11
rate of accuracy.


5891
5:50:0,11 --> 5:50:2,92
Thankfully, we in the software
industry don't have to deal


5892
5:50:2,92 --> 5:50:4,17
with anything of
that magnitude.


5893
5:50:4,17 --> 5:50:6,8



5894
5:50:6,8 --> 5:50:14,67
But software development, the
dynamics, go hand in hand with


5895
5:50:14,67 --> 5:50:18,4
its own side effects that
we refer to as bugs.


5896
5:50:18,4 --> 5:50:23,28
And we have gone and developed
a lot of systems that help


5897
5:50:23,28 --> 5:50:25,86
catch these bugs sooner
than later.


5898
5:50:25,86 --> 5:50:29,82
I'm going to talk about one said
system that, at Netflix,


5899
5:50:29,82 --> 5:50:32,27
has helped us catch these
bugs, which is


5900
5:50:32,27 --> 5:50:34,8
our endurance systems.


5901
5:50:34,8 --> 5:50:40,17
And I will basically also
explain, discuss some case


5902
5:50:40,17 --> 5:50:44,92
studies which will help me
illustrate how bad things that


5903
5:50:44,92 --> 5:50:49,42
are out of your control can
affect a good application.


5904
5:50:49,42 --> 5:50:54,31
So let's start with what is
the motivation behind


5905
5:50:54,31 --> 5:50:58,205
endurance test for a consumer
application?


5906
5:50:58,205 --> 5:51:0,92



5907
5:51:0,92 --> 5:51:3,32
The user expectation, right?


5908
5:51:3,32 --> 5:51:8,8
We all, as users, have began
to use mobile applications


5909
5:51:8,8 --> 5:51:12,45
rather than website, because
of the magical experience


5910
5:51:12,45 --> 5:51:14,975
offered by it with greater
performance.


5911
5:51:14,975 --> 5:51:17,54



5912
5:51:17,54 --> 5:51:19,84
The performance of application,
again, varies


5913
5:51:19,84 --> 5:51:23,61
from platform to platform and
also on the application


5914
5:51:23,61 --> 5:51:26,14
architecture.


5915
5:51:26,14 --> 5:51:29,72
We also face unpredictable
user behavior where user


5916
5:51:29,72 --> 5:51:33,4
behavior might invoke code path
that might affect the


5917
5:51:33,4 --> 5:51:36,2
performance of the
application.


5918
5:51:36,2 --> 5:51:40,37
And finally, for a media
applications like Netflix


5919
5:51:40,37 --> 5:51:43,74
where users spend at
least 30 minutes--


5920
5:51:43,74 --> 5:51:47,92
we don't have TV shows which
are shorter than that--


5921
5:51:47,92 --> 5:51:51,65
a simple memory leak can lead
to suboptimal experience for


5922
5:51:51,65 --> 5:51:54,83
our consumers.


5923
5:51:54,83 --> 5:52:0,75
So like every other automation
team, we went ahead and built


5924
5:52:0,75 --> 5:52:3,45
a functional automation
system.


5925
5:52:3,45 --> 5:52:7,51
The architecture that you see
here is very similar to a lot


5926
5:52:7,51 --> 5:52:10,1
of the client automation
architecture that are


5927
5:52:10,1 --> 5:52:11,59
available today.


5928
5:52:11,59 --> 5:52:19,43
However, we built a custom
in-house solution basically,


5929
5:52:19,43 --> 5:52:23,43
which could scale to multiple
different platforms that our


5930
5:52:23,43 --> 5:52:27,47
application is available on, and
also build reusable parts.


5931
5:52:27,47 --> 5:52:30,46
So certain platforms
use certain parts.


5932
5:52:30,46 --> 5:52:33,12
But overall, this is the
architecture of one such


5933
5:52:33,12 --> 5:52:36,52
platform using those
reusable parts.


5934
5:52:36,52 --> 5:52:39,59



5935
5:52:39,59 --> 5:52:43,62
And of course, with the
continuous integration mantra,


5936
5:52:43,62 --> 5:52:46,28
we put our functional test
behind the continuous


5937
5:52:46,28 --> 5:52:48,405
integration system on Jenkins.


5938
5:52:48,405 --> 5:52:51,58



5939
5:52:51,58 --> 5:52:54,73
The thing with the custom
solution was that it was


5940
5:52:54,73 --> 5:52:59,18
modular enough that we could
basically develop endurance


5941
5:52:59,18 --> 5:53:2,41
tests on top of the system
with minimal effort.


5942
5:53:2,41 --> 5:53:6,22
And then with the power of
Google Spreadsheet, we were


5943
5:53:6,22 --> 5:53:9,535
able to build a reliable
endurance reporting system.


5944
5:53:9,535 --> 5:53:13,0



5945
5:53:13,0 --> 5:53:15,4
Obviously, we are a client
automation team.


5946
5:53:15,4 --> 5:53:17,59
We don't want to deal too
much with databases,


5947
5:53:17,59 --> 5:53:19,2
server, and the cloud.


5948
5:53:19,2 --> 5:53:22,6
So why not use Google
Spreadsheet?


5949
5:53:22,6 --> 5:53:24,16
So what do we measure?


5950
5:53:24,16 --> 5:53:29,93
We basically split performance
counters into three parts.


5951
5:53:29,93 --> 5:53:34,71
Platform specific, which is
memory utilization of the


5952
5:53:34,71 --> 5:53:38,75
platform itself, CPU utilization
metrics that is


5953
5:53:38,75 --> 5:53:40,3
provided by platform.


5954
5:53:40,3 --> 5:53:43,61
The second being video playback
statistics where we


5955
5:53:43,61 --> 5:53:46,82
measure things like the playing
video bit rate and


5956
5:53:46,82 --> 5:53:49,88
audio bit rate, which is again
dependent on network


5957
5:53:49,88 --> 5:53:53,9
conditions and the hardware
itself that you're


5958
5:53:53,9 --> 5:53:54,5
playing back on.


5959
5:53:54,5 --> 5:53:56,75
The frames rendered dropped.


5960
5:53:56,75 --> 5:53:59,2
The buffer size, which
is important.


5961
5:53:59,2 --> 5:54:1,38
And rebuffer count, which is
really important from a


5962
5:54:1,38 --> 5:54:4,17
consumer perspective, since it
determines the quality of


5963
5:54:4,17 --> 5:54:6,69
experience.


5964
5:54:6,69 --> 5:54:11,29
The third piece is, of course,
the application metrics where


5965
5:54:11,29 --> 5:54:13,94
we measure start up time
for the application.


5966
5:54:13,94 --> 5:54:16,3
In order to give a good consumer
experience, you need


5967
5:54:16,3 --> 5:54:17,97
to have faster start up times.


5968
5:54:17,97 --> 5:54:22,73
And we also measure certain
transition times between pages


5969
5:54:22,73 --> 5:54:25,542
as the users navigate
through them.


5970
5:54:25,542 --> 5:54:28,32



5971
5:54:28,32 --> 5:54:31,43
So CI for endurance.


5972
5:54:31,43 --> 5:54:35,61
You can see the image right
there, which is pulled from


5973
5:54:35,61 --> 5:54:38,93
the performance metrics
that you normally


5974
5:54:38,93 --> 5:54:41,58
receive from a car.


5975
5:54:41,58 --> 5:54:44,24
Like a lot of people in the Bay
Area where I live, I also


5976
5:54:44,24 --> 5:54:45,87
drive a hybrid car.


5977
5:54:45,87 --> 5:54:50,1
And what I've realized is the
continuous feedback on my


5978
5:54:50,1 --> 5:54:53,9
driving performance has helped
me become a better driver.


5979
5:54:53,9 --> 5:54:55,78



5980
5:54:55,78 --> 5:55:2,68
So we took this idea, and we put
it for our application to


5981
5:55:2,68 --> 5:55:4,51
continuously measure the
performance of our


5982
5:55:4,51 --> 5:55:6,8
application.


5983
5:55:6,8 --> 5:55:9,56
This also ensured that
performance is treated as a


5984
5:55:9,56 --> 5:55:12,7
feature and not as
an afterthought.


5985
5:55:12,7 --> 5:55:17,5
And for the test team's benefit,
we can then ensure


5986
5:55:17,5 --> 5:55:18,325
that our endurance tests
are current.


5987
5:55:18,325 --> 5:55:22,65



5988
5:55:22,65 --> 5:55:25,17
But you know what they
say about old habits.


5989
5:55:25,17 --> 5:55:26,24
They die hard.


5990
5:55:26,24 --> 5:55:30,5
I realized that when I came back
from a long vacation and


5991
5:55:30,5 --> 5:55:34,13
I began driving my car, I easily
slipped back into the


5992
5:55:34,13 --> 5:55:35,72
old bad habits.


5993
5:55:35,72 --> 5:55:40,835
And I felt that having looked at
my performance train over a


5994
5:55:40,835 --> 5:55:45,66
period of time, I could easily
correlate the mistakes that I


5995
5:55:45,66 --> 5:55:50,31
was making with the trends
and be easily


5996
5:55:50,31 --> 5:55:51,56
able to remember them.


5997
5:55:51,56 --> 5:55:54,1



5998
5:55:54,1 --> 5:55:57,38
So we decided to build trend
shots on top of our continuous


5999
5:55:57,38 --> 5:56:1,19
integration for the endurance
tests where we use simple


6000
5:56:1,19 --> 5:56:6,88
statistical functions to kind
of track progression over


6001
5:56:6,88 --> 5:56:10,63
build for the different
performance counters.


6002
5:56:10,63 --> 5:56:12,54
And we looked out for the
statistical outliers.


6003
5:56:12,54 --> 5:56:16,53



6004
5:56:16,53 --> 5:56:21,17
Using this system, we were able
to find several bugs that


6005
5:56:21,17 --> 5:56:23,79
were introduced by
our developers.


6006
5:56:23,79 --> 5:56:29,41
But to justify the title of this
talk, I'm going to talk


6007
5:56:29,41 --> 5:56:34,28
about two such case studies
where we found issues using


6008
5:56:34,28 --> 5:56:39,8
this system that were not
introduced by our developers.


6009
5:56:39,8 --> 5:56:46,24
The first one, last year,
Netflix realized that the API


6010
5:56:46,24 --> 5:56:50,12
service that delivers data to
hundreds of different devices


6011
5:56:50,12 --> 5:56:52,0
needed to be rearchitected.


6012
5:56:52,0 --> 5:56:58,81
The main reason behind that
was the fact that one size


6013
5:56:58,81 --> 5:57:3,75
fits all model could not work
with low power devices.


6014
5:57:3,75 --> 5:57:10,92
So the direction that we moved
to was giving the controls to


6015
5:57:10,92 --> 5:57:15,11
the devices to be able to tweet
the response so that you


6016
5:57:15,11 --> 5:57:18,64
get just enough response
data to render a


6017
5:57:18,64 --> 5:57:19,965
rich UI for your platform.


6018
5:57:19,965 --> 5:57:22,63



6019
5:57:22,63 --> 5:57:29,42
As I mentioned before, we were
tracking the start up times on


6020
5:57:29,42 --> 5:57:32,47
our platform over different
builds.


6021
5:57:32,47 --> 5:57:35,41
And this chart over here
basically shows you the


6022
5:57:35,41 --> 5:57:39,53
different start up times to the
different experience that


6023
5:57:39,53 --> 5:57:40,9
you might launch into.


6024
5:57:40,9 --> 5:57:44,11
One is the regular experience
and the other is the kids


6025
5:57:44,11 --> 5:57:46,24
experience.


6026
5:57:46,24 --> 5:57:50,54
What we realized is, after a
point, once we switched to the


6027
5:57:50,54 --> 5:57:56,77
new version of the API, the
start up time to the kids


6028
5:57:56,77 --> 5:58:0,17
browse screen increase
by about 25%.


6029
5:58:0,17 --> 5:58:3,11
And we were able to look at
this build and immediately


6030
5:58:3,11 --> 5:58:5,32
notify our partner team.


6031
5:58:5,32 --> 5:58:9,1
And over a period of time, we
were able to fix it before it


6032
5:58:9,1 --> 5:58:13,66
actually affected our
end consumers.


6033
5:58:13,66 --> 5:58:16,62
The next example is
even more scary.


6034
5:58:16,62 --> 5:58:22,19
Because we got notified of this
issue three days before


6035
5:58:22,19 --> 5:58:24,8
our release.


6036
5:58:24,8 --> 5:58:27,565
This was a release that was
scheduled in December when we


6037
5:58:27,565 --> 5:58:30,95
were releasing a ton of
promotional features for our


6038
5:58:30,95 --> 5:58:35,73
new original series, "House of
Cards." It's a great show, if


6039
5:58:35,73 --> 5:58:38,9
you haven't seen it.


6040
5:58:38,9 --> 5:58:43,6
So the other thing that we also
do is, like I showed in


6041
5:58:43,6 --> 5:58:47,48
the application stack itself,
like we are dealing with


6042
5:58:47,48 --> 5:58:48,91
bleeding edge services.


6043
5:58:48,91 --> 5:58:53,85
We also deal with the bleeding
edge ADK from our partners.


6044
5:58:53,85 --> 5:59:4,87
So like a good consumer of the
platform ADK, we were the


6045
5:59:4,87 --> 5:59:7,15
first one to take
the ADK version.


6046
5:59:7,15 --> 5:59:10,86
The top graph basically shows
you the application memory


6047
5:59:10,86 --> 5:59:14,38
that is provided by the counters
in our application.


6048
5:59:14,38 --> 5:59:16,6
And it kind of remained
consistent over


6049
5:59:16,6 --> 5:59:17,1
the last six months.


6050
5:59:17,1 --> 5:59:19,63
You can see it's kind of
remained flat in terms of how


6051
5:59:19,63 --> 5:59:21,95
much memory it is utilizing.


6052
5:59:21,95 --> 5:59:26,1
The bottom chart shows you the
available native memory, which


6053
5:59:26,1 --> 5:59:31,2
is the counter provided by the
system, which tells us how


6054
5:59:31,2 --> 5:59:32,91
much memory is remaining.


6055
5:59:32,91 --> 5:59:38,16
And you can see, as we switch to
the new version of the ADK,


6056
5:59:38,16 --> 5:59:42,65
you can see the mountain ranges
are there where there


6057
5:59:42,65 --> 5:59:44,76
were times when memory
hit rock bottom.


6058
5:59:44,76 --> 5:59:47,24
And there were times when
it remained constant.


6059
5:59:47,24 --> 5:59:50,78
But while testing this, we found
a functional bug, which


6060
5:59:50,78 --> 5:59:59,33
was more worrisome where the
playback would crash every


6061
5:59:59,33 --> 6:0:3,46
time you changed the audio
stream, which is a big deal


6062
6:0:3,46 --> 6:0:4,72
for our customers.


6063
6:0:4,72 --> 6:0:6,83
And we realized we were
able to track this


6064
6:0:6,83 --> 6:0:8,56
bug back to the ADK.


6065
6:0:8,56 --> 6:0:11,34
So we reverted back to the
previous version of the ADK,


6066
6:0:11,34 --> 6:0:15,24
notified our partner, and went
ahead with our business.


6067
6:0:15,24 --> 6:0:18,37
Three days before the release,
the partner comes back to us


6068
6:0:18,37 --> 6:0:23,44
and tells us that the bug has
been fixed and you can


6069
6:0:23,44 --> 6:0:24,72
go and adopt it.


6070
6:0:24,72 --> 6:0:26,57
So we said, OK, we'll
test it out.


6071
6:0:26,57 --> 6:0:27,75
Everything worked fine.


6072
6:0:27,75 --> 6:0:31,1
Functionality, the application
looked really good.


6073
6:0:31,1 --> 6:0:34,89
But what you see out here is
that the native memory


6074
6:0:34,89 --> 6:0:36,67
consistently hit rock bottom.


6075
6:0:36,67 --> 6:0:38,33
So these are tests.


6076
6:0:38,33 --> 6:0:41,2
Endurance tests are tests which
run for two hours over


6077
6:0:41,2 --> 6:0:42,11
our platform.


6078
6:0:42,11 --> 6:0:43,61
And most of our functional
tests gets


6079
6:0:43,61 --> 6:0:45,22
done within 30 minutes.


6080
6:0:45,22 --> 6:0:48,91
So the memory leak over here
manifest itself after one hour


6081
6:0:48,91 --> 6:0:50,28
of video playback.


6082
6:0:50,28 --> 6:0:54,3
And as a Netflix consumer, you
know there are no movies which


6083
6:0:54,3 --> 6:0:55,97
are less than one hour long.


6084
6:0:55,97 --> 6:1:0,19
So we were able to track
this down to an ADK.


6085
6:1:0,19 --> 6:1:6,8
Again, we reverted back and
shipped the version in time.


6086
6:1:6,8 --> 6:1:11,71
The key takeaway that we have
over here is basically any


6087
6:1:11,71 --> 6:1:13,63
form of test that you're
developing, whether it be


6088
6:1:13,63 --> 6:1:17,3
functional integration or
performance test, make sure


6089
6:1:17,3 --> 6:1:21,66
you're consistently running it
and analyze the result that


6090
6:1:21,66 --> 6:1:24,6
you get out of these tests.


6091
6:1:24,6 --> 6:1:27,64
With these thoughts, I would
like to end the talk with the


6092
6:1:27,64 --> 6:1:30,86
quote from Robert Allen, which
has a bigger meaning in life,


6093
6:1:30,86 --> 6:1:32,58
but I think it's still
appropriate


6094
6:1:32,58 --> 6:1:34,58
for the test community.


6095
6:1:34,58 --> 6:1:35,416
Thank you.


6096
6:1:35,416 --> 6:1:41,734
[APPLAUSE]


6097
6:1:41,734 --> 6:1:42,53
TONY VOELLM: Great.


6098
6:1:42,53 --> 6:1:45,11
Thank you, Minal.


6099
6:1:45,11 --> 6:1:46,5
That's an old adage.


6100
6:1:46,5 --> 6:1:47,93
If nothing's running, it
doesn't use any memory.


6101
6:1:47,93 --> 6:1:50,51
So that's a good learning.


6102
6:1:50,51 --> 6:1:55,64
I think we have time
for one question.


6103
6:1:55,64 --> 6:1:57,45
I don't see any live
questions just yet.


6104
6:1:57,45 --> 6:1:59,2
We'll wait for the Dory.


6105
6:1:59,2 --> 6:2:1,47
If there's a good Dory question,
I'll pick it.


6106
6:2:1,47 --> 6:2:4,86
Otherwise, we're going to go
into a break right after this


6107
6:2:4,86 --> 6:2:6,94
until 3:45.


6108
6:2:6,94 --> 6:2:10,6
And then we have two very
interesting talks-- one from


6109
6:2:10,6 --> 6:2:14,92
academia and one talk that
has influenced many


6110
6:2:14,92 --> 6:2:17,15
of the others here.


6111
6:2:17,15 --> 6:2:22,98
So let me see this Moderator
question here.


6112
6:2:22,98 --> 6:2:26,64
It says, do you include any
testing parts into your


6113
6:2:26,64 --> 6:2:29,22
product delivered
to end users?


6114
6:2:29,22 --> 6:2:33,44
What statistics do you get from
the apps on end users'


6115
6:2:33,44 --> 6:2:37,65
devices, and how do you deal
with that huge, I suppose,


6116
6:2:37,65 --> 6:2:38,62
amount of it?


6117
6:2:38,62 --> 6:2:39,97
And if the lawyers are
not here, it's OK.


6118
6:2:39,97 --> 6:2:41,22
Don't answer that.


6119
6:2:41,22 --> 6:2:43,9



6120
6:2:43,9 --> 6:2:45,0
MINAL MISHRA: Yeah,
basically we do a


6121
6:2:45,0 --> 6:2:47,17
lot of end user testing.


6122
6:2:47,17 --> 6:2:52,71
We do instrument our client
applications with a lot of


6123
6:2:52,71 --> 6:2:55,5
information that gets logged
into our service.


6124
6:2:55,5 --> 6:2:59,54
We have a huge cloud-based
system, which basically


6125
6:2:59,54 --> 6:3:0,54
collects all this data.


6126
6:3:0,54 --> 6:3:5,6
And we basically process this
data in a distributed cloud


6127
6:3:5,6 --> 6:3:10,6
platform to kind of get an
analysis of what our users are


6128
6:3:10,6 --> 6:3:11,38
going through.


6129
6:3:11,38 --> 6:3:15,33
Because it's very hard for you
to test all the cases.


6130
6:3:15,33 --> 6:3:18,57
And the best way to test it is
by testing it in production.


6131
6:3:18,57 --> 6:3:20,33
TONY VOELLM: Great.


6132
6:3:20,33 --> 6:3:21,27
And with that, thank you.


6133
6:3:21,27 --> 6:3:24,29
We'll be back in seat at 3:45.


6134
6:3:24,29 --> 6:3:25,3
So I will see you then.


6135
6:3:25,3 --> 6:3:25,49
Thank you.


6136
6:3:25,49 --> 6:3:30,94
[APPLAUSE]


6137
6:3:30,94 --> 6:33:41,71
[MUSIC PLAYING]


6138
6:33:41,71 --> 6:33:42,79
TONY VOELLM: Hello.


6139
6:33:42,79 --> 6:33:45,13
Hello and welcome back.


6140
6:33:45,13 --> 6:33:49,59
We have two more talks today,
very fascinating talks that


6141
6:33:49,59 --> 6:33:52,5
are coming up.


6142
6:33:52,5 --> 6:33:54,93
This first talk is
from academia.


6143
6:33:54,93 --> 6:33:58,8
And we have a couple of talks
from academia, here.


6144
6:33:58,8 --> 6:34:1,15
This next speaker is Tao Xie.


6145
6:34:1,15 --> 6:34:4,48
And he is from North Carolina
State University and will be


6146
6:34:4,48 --> 6:34:7,72
talking about testing for
educational gaming and


6147
6:34:7,72 --> 6:34:10,14
educational gaming
for testing.


6148
6:34:10,14 --> 6:34:14,91
And one nice little fact is he
is actually a UW alumnus, so


6149
6:34:14,91 --> 6:34:18,2
he is a dawg, D-A-W-G. So
with that, thank you.


6150
6:34:18,2 --> 6:34:20,9



6151
6:34:20,9 --> 6:34:22,4
TAO XIE: Thank you, Tony.


6152
6:34:22,4 --> 6:34:24,69
Good afternoon.


6153
6:34:24,69 --> 6:34:28,16
Next, I'm going to talk to you
about some recent work in


6154
6:34:28,16 --> 6:34:31,9
collaboration with Microsoft
Research, including Nikolai


6155
6:34:31,9 --> 6:34:37,4
Tillman, Jonathan De Halleux,
along with Judith Bishop.


6156
6:34:37,4 --> 6:34:41,39
That theme would be about the
synergy of testing and


6157
6:34:41,39 --> 6:34:45,18
educational gaming.


6158
6:34:45,18 --> 6:34:48,47
On the testing side, I will talk
to you about the dynamic


6159
6:34:48,47 --> 6:34:51,35
symbolic executions incorporated
in the tool


6160
6:34:51,35 --> 6:34:54,33
called Pex, from Microsoft
Research, along with


6161
6:34:54,33 --> 6:34:57,82
parameters unit testing as a
way for you to incorporate


6162
6:34:57,82 --> 6:35:0,69
behavior checking for
your testing.


6163
6:35:0,69 --> 6:35:5,33
And then, with this foundation
of technology, we have these


6164
6:35:5,33 --> 6:35:10,29
games, Pex For Fun, as a way for
you to teach students or


6165
6:35:10,29 --> 6:35:14,49
teach yourself about different
kinds of skills, including


6166
6:35:14,49 --> 6:35:16,74
software testing skills.


6167
6:35:16,74 --> 6:35:18,99
In the rest of the talk, I will
basically give you the


6168
6:35:18,99 --> 6:35:20,61
background, first,
on the testing.


6169
6:35:20,61 --> 6:35:24,15
And then we'll move on to
educational gaming.


6170
6:35:24,15 --> 6:35:25,81
Particularly, I will give
the background.


6171
6:35:25,81 --> 6:35:29,57
And then I will give you a
little bit brief introduction


6172
6:35:29,57 --> 6:35:33,57
of writing code, in the browser,
in your favorite


6173
6:35:33,57 --> 6:35:35,65
browser, of your choice.


6174
6:35:35,65 --> 6:35:39,16
And then I will talk about a
gaming type of coding do's, in


6175
6:35:39,16 --> 6:35:42,89
the Pex For Fun website, and
further discuss how we could


6176
6:35:42,89 --> 6:35:47,11
leverage such gaming types
in educational settings,


6177
6:35:47,11 --> 6:35:49,36
including teaching and
learning, and then


6178
6:35:49,36 --> 6:35:50,61
conclude the talk.


6179
6:35:50,61 --> 6:35:53,85



6180
6:35:53,85 --> 6:35:57,66
Here's a screen snapshot of
the tool, Pex, released by


6181
6:35:57,66 --> 6:35:59,8
Microsoft Research.


6182
6:35:59,8 --> 6:36:1,82
It's a publicly available
tool.


6183
6:36:1,82 --> 6:36:6,43
The URL is near the bottom
of the slides.


6184
6:36:6,43 --> 6:36:9,24
Basically, it's a plugin
for Visual Studio.


6185
6:36:9,24 --> 6:36:12,86
Currently it supports different
kinds of Dot Net


6186
6:36:12,86 --> 6:36:17,93
language, including C Sharp,
Visual Basic, and F Sharp.


6187
6:36:17,93 --> 6:36:21,24
Like here, basically, it's very
easy to for you to use.


6188
6:36:21,24 --> 6:36:24,82
Install the plugin, and then you
could, just several mouse


6189
6:36:24,82 --> 6:36:27,77
clicks for you to generate
a set of test inputs, as


6190
6:36:27,77 --> 6:36:33,54
displayed near the bottom on
the Visual Studio window.


6191
6:36:33,54 --> 6:36:36,61
Let me give you a little brief
overview of the key


6192
6:36:36,61 --> 6:36:39,75
technology, called dynamic
symbolic execution, in Pex,


6193
6:36:39,75 --> 6:36:43,4
how we could generate test data
automatically to achieve


6194
6:36:43,4 --> 6:36:44,87
high code coverage.


6195
6:36:44,87 --> 6:36:48,7
On the side, I have this very
simple piece of code.


6196
6:36:48,7 --> 6:36:49,54
That's a code in the test.


6197
6:36:49,54 --> 6:36:52,6
As you can see, the inputs would
be an integer array.


6198
6:36:52,6 --> 6:36:56,35
And then inside, we have
three conditionals.


6199
6:36:56,35 --> 6:36:59,222
The first one, checking whether
the array is a null


6200
6:36:59,222 --> 6:37:1,48
pointer, and then the second
one, checking whether the


6201
6:37:1,48 --> 6:37:3,14
length is greater than 0.


6202
6:37:3,14 --> 6:37:5,66
And then the third one is
checking whether the first


6203
6:37:5,66 --> 6:37:7,81
element is equal to that
very big number.


6204
6:37:7,81 --> 6:37:11,65
In that case, we will throw
an exception to indicate a


6205
6:37:11,65 --> 6:37:15,3
potential bug in that particular
code location.


6206
6:37:15,3 --> 6:37:20,5
Dynamic symbolic execution was
proposed back in 2005 and,


6207
6:37:20,5 --> 6:37:22,73
these days, have been
incorporated in different


6208
6:37:22,73 --> 6:37:25,3
kinds of testing tools,
including security testing


6209
6:37:25,3 --> 6:37:27,36
tools, along with Pex.


6210
6:37:27,36 --> 6:37:31,6
Dynamic symbolic execution
will start with a default


6211
6:37:31,6 --> 6:37:33,71
input for the argument
or [INAUDIBLE]


6212
6:37:33,71 --> 6:37:36,62
selected or randomly selected
input value.


6213
6:37:36,62 --> 6:37:40,49
For this case, we could just use
a default value as a null


6214
6:37:40,49 --> 6:37:42,74
pointer for the integer array.


6215
6:37:42,74 --> 6:37:46,77
We execute the program, being
instrumented with additional


6216
6:37:46,77 --> 6:37:50,7
code, to collect runtime
information, particularly


6217
6:37:50,7 --> 6:37:53,58
which path this test execution
would tranverse.


6218
6:37:53,58 --> 6:37:57,8
And what constraints on the
inputs do we need to satisfy


6219
6:37:57,8 --> 6:38:0,75
in order to tranverse that
particular path.


6220
6:38:0,75 --> 6:38:3,45
As we could see, if execute
a null pointer, we would


6221
6:38:3,45 --> 6:38:6,73
tranverse the true branch of
the first conditional.


6222
6:38:6,73 --> 6:38:9,36
At the same time, we collect the
constraints, record as a


6223
6:38:9,36 --> 6:38:13,51
past condition, as a equal to
null pointer, after we finish


6224
6:38:13,51 --> 6:38:15,1
the execution.


6225
6:38:15,1 --> 6:38:17,91
Next, we want to generate
new test data, right?


6226
6:38:17,91 --> 6:38:19,89
Because we want to
excise different


6227
6:38:19,89 --> 6:38:21,285
behaviors of the code.


6228
6:38:21,285 --> 6:38:22,66
How to do that?


6229
6:38:22,66 --> 6:38:27,23
We picked an already collected
past condition and


6230
6:38:27,23 --> 6:38:28,58
negate part of it.


6231
6:38:28,58 --> 6:38:31,6
In this case, it's simple,
because we have only one


6232
6:38:31,6 --> 6:38:31,92
constraint.


6233
6:38:31,92 --> 6:38:32,76
We negate it.


6234
6:38:32,76 --> 6:38:35,8
We have a not equal
to null pointer.


6235
6:38:35,8 --> 6:38:38,93
We fit these new constraints
to a constraint solver or a


6236
6:38:38,93 --> 6:38:40,17
[INAUDIBLE] improver.


6237
6:38:40,17 --> 6:38:44,36
The constraint solver would give
us a concrete input value


6238
6:38:44,36 --> 6:38:47,79
that would satisfy this
particular constraint.


6239
6:38:47,79 --> 6:38:49,95
For this case, it's easy.


6240
6:38:49,95 --> 6:38:54,78
We could see, we just need an
empty array to satisfy the


6241
6:38:54,78 --> 6:38:58,73
constraint, that array
is not null.


6242
6:38:58,73 --> 6:39:0,9
Then we further execute
the program with


6243
6:39:0,9 --> 6:39:2,75
this new input data.


6244
6:39:2,75 --> 6:39:6,24
Further, we can see now, we
reach the second conditional.


6245
6:39:6,24 --> 6:39:11,21
And we take the fourth branch,
because a.length now is equal


6246
6:39:11,21 --> 6:39:13,62
to 0, not greater than 0.


6247
6:39:13,62 --> 6:39:16,915
Similarly, in the next
iteration, we negate part of


6248
6:39:16,915 --> 6:39:21,18
the constraint, in this case,
a.length greater than 0.


6249
6:39:21,18 --> 6:39:23,9
We fit the new constraint
to a constraint solver.


6250
6:39:23,9 --> 6:39:28,19
We get the new concrete
inputs as one array


6251
6:39:28,19 --> 6:39:29,77
with only one element.


6252
6:39:29,77 --> 6:39:32,82
That element is equal to 0.


6253
6:39:32,82 --> 6:39:34,93
With this new input, we
further go through


6254
6:39:34,93 --> 6:39:36,26
the process we have.


6255
6:39:36,26 --> 6:39:39,6
In this particular case,
we now reach the last


6256
6:39:39,6 --> 6:39:40,41
conditional.


6257
6:39:40,41 --> 6:39:43,46
But the first element
of the array is not


6258
6:39:43,46 --> 6:39:44,93
equal to a big number.


6259
6:39:44,93 --> 6:39:46,63
It's equal to 0.


6260
6:39:46,63 --> 6:39:49,96
So we next would
negate the last


6261
6:39:49,96 --> 6:39:52,67
constraints of the path condition.


6262
6:39:52,67 --> 6:39:55,74
Finally, we fit the constraint
to the constraint solver.


6263
6:39:55,74 --> 6:40:0,11
We get this big number in order
to trigger the exception


6264
6:40:0,11 --> 6:40:2,3
throwing statement.


6265
6:40:2,3 --> 6:40:5,69
For this particular simple
example, we are done, because


6266
6:40:5,69 --> 6:40:10,59
we actually explored all the
paths in this simple program.


6267
6:40:10,59 --> 6:40:14,62
In reality, many real world
applications of software and


6268
6:40:14,62 --> 6:40:16,56
their tests wouldn't
be that simple.


6269
6:40:16,56 --> 6:40:20,29
We may have an infinite number
of the paths or, at least, a


6270
6:40:20,29 --> 6:40:22,69
huge number of the paths
in the code.


6271
6:40:22,69 --> 6:40:26,32
We need to have some advanced
technologies, including those


6272
6:40:26,32 --> 6:40:29,1
incorporated into Pex, to deal
with those complicated


6273
6:40:29,1 --> 6:40:29,89
situations.


6274
6:40:29,89 --> 6:40:32,6
In this talk, I'm not going to
go into the details about


6275
6:40:32,6 --> 6:40:34,1
these technologies.


6276
6:40:34,1 --> 6:40:37,73
But the basic idea of dynamic
symbolic execution is,


6277
6:40:37,73 --> 6:40:38,98
actually, what I described.


6278
6:40:38,98 --> 6:40:41,83



6279
6:40:41,83 --> 6:40:46,39
So far, we focused on crashing
or exception throwing


6280
6:40:46,39 --> 6:40:49,12
situations, in the
previous example.


6281
6:40:49,12 --> 6:40:53,72
We know, if you want to assure
high quality assurance, in


6282
6:40:53,72 --> 6:40:56,43
terms of a functional
correctness, only catching


6283
6:40:56,43 --> 6:40:59,6
this crashing or robustness
issues may not be enough.


6284
6:40:59,6 --> 6:41:3,68
We need to go one step further
to write down some strong


6285
6:41:3,68 --> 6:41:7,22
enough assertions in order to
catch these, like a functional


6286
6:41:7,22 --> 6:41:8,81
correctness box.


6287
6:41:8,81 --> 6:41:12,36
To do that, we could leverage
parameterized unit testing,


6288
6:41:12,36 --> 6:41:17,73
which is a methodology to help
you to engage developers and


6289
6:41:17,73 --> 6:41:21,53
test generation tools to work
together, in order to exploit


6290
6:41:21,53 --> 6:41:24,66
the best out of this
test automation.


6291
6:41:24,66 --> 6:41:29,7
In conscious conventional unit
tests, which do not have


6292
6:41:29,7 --> 6:41:30,78
parameters, right?


6293
6:41:30,78 --> 6:41:32,92
When you write unit tests, you
don't have parameters.


6294
6:41:32,92 --> 6:41:35,83
You just write some test
methods, and then you execute


6295
6:41:35,83 --> 6:41:37,72
the body of the test methods.


6296
6:41:37,72 --> 6:41:41,61
But in parameter unit testing,
a unit test has parameters


6297
6:41:41,61 --> 6:41:44,66
like the one I put
on the slide.


6298
6:41:44,66 --> 6:41:50,51
As you can see on here, we have
two parameters, list and


6299
6:41:50,51 --> 6:41:52,87
an integer item.


6300
6:41:52,87 --> 6:41:56,74
The body of this unit test is
testing adding an element into


6301
6:41:56,74 --> 6:42:0,26
a list to see whether the count
of the list has been


6302
6:42:0,26 --> 6:42:1,77
increased by one.


6303
6:42:1,77 --> 6:42:3,79
Very simple behavior.


6304
6:42:3,79 --> 6:42:4,87
How do we do that?


6305
6:42:4,87 --> 6:42:7,16
How do we check the behavior?


6306
6:42:7,16 --> 6:42:10,55
Next, we would put several lines
of code, very similar to


6307
6:42:10,55 --> 6:42:14,1
what you have been doing in
traditional unit tests.


6308
6:42:14,1 --> 6:42:16,85
Basically, you write down the
method call that you want to


6309
6:42:16,85 --> 6:42:19,79
test, and then you write all the
assertions that you want


6310
6:42:19,79 --> 6:42:22,66
to check the behavior.


6311
6:42:22,66 --> 6:42:24,68
Keep in mind here, the
assertions that you are


6312
6:42:24,68 --> 6:42:28,6
putting here need to be general
enough to deal with


6313
6:42:28,6 --> 6:42:31,16
all different kinds of argument
variables coming in.


6314
6:42:31,16 --> 6:42:35,63
Not just hard-coded like 10 or
20, or push one element to an


6315
6:42:35,63 --> 6:42:39,93
empty list, that kind of
specific situations.


6316
6:42:39,93 --> 6:42:44,3
To allow you to write these
kinds of general properties as


6317
6:42:44,3 --> 6:42:48,63
assertions, we have a specific
kind of construct called


6318
6:42:48,63 --> 6:42:51,68
assumptions, which
may not exist in


6319
6:42:51,68 --> 6:42:52,97
conventional unit tests.


6320
6:42:52,97 --> 6:42:54,75
Basically, you could
[INAUDIBLE]


6321
6:42:54,75 --> 6:42:57,56
in this case lists not equal
to a null pointer.


6322
6:42:57,56 --> 6:43:0,78
Otherwise, as you can see, we
will throw exceptions in the


6323
6:43:0,78 --> 6:43:3,79
body of the unit test.


6324
6:43:3,79 --> 6:43:8,47
As you can see, for this kind
of parameter unit test, we


6325
6:43:8,47 --> 6:43:11,94
basically separate two
constraints, two concerns,


6326
6:43:11,94 --> 6:43:13,1
more precisely.


6327
6:43:13,1 --> 6:43:16,87
First, we want developers to
write down what you really


6328
6:43:16,87 --> 6:43:20,27
want to check, the behavior
checking of the sequence of


6329
6:43:20,27 --> 6:43:23,62
the method calls along
with the assertions.


6330
6:43:23,62 --> 6:43:28,75
Then we allow test generation
tools like tests to generate


6331
6:43:28,75 --> 6:43:32,365
high quality test data, to
excise different portions of


6332
6:43:32,365 --> 6:43:35,7
the code, if possible, violating
the assertions that


6333
6:43:35,7 --> 6:43:36,8
you put down there.


6334
6:43:36,8 --> 6:43:40,4
So it's a nice way of separating
the concerns of


6335
6:43:40,4 --> 6:43:43,6
these two parts, one being
done by humans, the other


6336
6:43:43,6 --> 6:43:44,865
being done by test automation.


6337
6:43:44,865 --> 6:43:48,1



6338
6:43:48,1 --> 6:43:50,93
Actually, parameter unit testing
or parameter unit


6339
6:43:50,93 --> 6:43:53,89
tests have been supported by
quite different testing


6340
6:43:53,89 --> 6:43:56,85
frameworks, like including
different kinds of .NET


6341
6:43:56,85 --> 6:44:3,61
testing frameworks along with
JUnit 4 or beyond for the Java


6342
6:44:3,61 --> 6:44:5,48
unit testing.


6343
6:44:5,48 --> 6:44:8,92
The parameter unit testing would
be fully exploited in


6344
6:44:8,92 --> 6:44:13,35
terms of the power in practice
when you are using parameter


6345
6:44:13,35 --> 6:44:16,5
unit testing in combination
with test


6346
6:44:16,5 --> 6:44:20,0
generation tools like Pex.


6347
6:44:20,0 --> 6:44:23,94
For the .NET programs, we have
Pex that I mentioned already.


6348
6:44:23,94 --> 6:44:27,55
For the Java unit testing, we
have some tools such as


6349
6:44:27,55 --> 6:44:31,51
Agitar, AgitarOne, for allowing
you to use test


6350
6:44:31,51 --> 6:44:34,445
generation for parameter unit
tests written by developers.


6351
6:44:34,445 --> 6:44:37,7



6352
6:44:37,7 --> 6:44:38,63
So far, so good.


6353
6:44:38,63 --> 6:44:43,65
Today, we already listened to
quite some talks engage in so


6354
6:44:43,65 --> 6:44:45,93
many different kinds of testing
tools, including the


6355
6:44:45,93 --> 6:44:49,2
one that I just described,
Pex.


6356
6:44:49,2 --> 6:44:53,34
But after the talks, or like in
our typical scenario, when


6357
6:44:53,34 --> 6:44:58,26
we get tutorials at industry
contexts or academic settings,


6358
6:44:58,26 --> 6:45:1,83
then quite some audience may
not have the exact tools


6359
6:45:1,83 --> 6:45:3,67
installed on their laptop.


6360
6:45:3,67 --> 6:45:6,32
After the talk, after the
tutorials, they may not


6361
6:45:6,32 --> 6:45:9,18
actually expend the effort
to install the tool


6362
6:45:9,18 --> 6:45:10,65
and try out the tool.


6363
6:45:10,65 --> 6:45:12,62
So that's an issue we
have been observing.


6364
6:45:12,62 --> 6:45:17,55
So without actually seeing how
things are, what kind of


6365
6:45:17,55 --> 6:45:20,1
benefit you would get, they
may not bother to install


6366
6:45:20,1 --> 6:45:22,96
different kinds of tools
in their environment.


6367
6:45:22,96 --> 6:45:26,81
So that's an issue that we
commonly observed in terms of


6368
6:45:26,81 --> 6:45:28,62
tool adoption.


6369
6:45:28,62 --> 6:45:31,67
My collaborators at Microsoft
Research have a similar


6370
6:45:31,67 --> 6:45:34,3
observation to how to
deal with that.


6371
6:45:34,3 --> 6:45:37,57
They basically put the tool
online, not just putting the


6372
6:45:37,57 --> 6:45:40,8
tool online or downloading,
actually making the tool


6373
6:45:40,8 --> 6:45:42,83
useable within a browser.


6374
6:45:42,83 --> 6:45:46,9
So that's how the Pex for fun
website would come into place.


6375
6:45:46,9 --> 6:45:50,16
Actually, if you had a mobile
device or laptop or your


6376
6:45:50,16 --> 6:45:54,45
desktop, you could actually
enter the URL pex4fun.com and


6377
6:45:54,45 --> 6:45:58,2
try things out to get the sense
of what benefits you


6378
6:45:58,2 --> 6:45:59,975
could get with the
power of test


6379
6:45:59,975 --> 6:46:3,31
generation underlying Pex.


6380
6:46:3,31 --> 6:46:5,64
Here's the website,
a screen snapshot.


6381
6:46:5,64 --> 6:46:9,5
As you can see, in the middle,
you can enter the source code


6382
6:46:9,5 --> 6:46:12,58
that you want to test and a
particular name, like puzzle,


6383
6:46:12,58 --> 6:46:13,99
with certain parameters.


6384
6:46:13,99 --> 6:46:17,98
You can view that piece of code
as a parameter unit test.


6385
6:46:17,98 --> 6:46:21,92
Then you just click the button
near the middle left hand


6386
6:46:21,92 --> 6:46:23,49
side, Ask Pex.


6387
6:46:23,49 --> 6:46:27,44
Then Pex will generate test data
and send back the test


6388
6:46:27,44 --> 6:46:30,66
data to the browser being
displayed to you near the


6389
6:46:30,66 --> 6:46:32,74
button of the web page.


6390
6:46:32,74 --> 6:46:36,0
So that's a basic functionality
of this website.


6391
6:46:36,0 --> 6:46:40,2
It can allow you to quickly get
a sense of what this tool


6392
6:46:40,2 --> 6:46:41,4
could do for you.


6393
6:46:41,4 --> 6:46:45,11
I think that kind of an
experience could be borrowed


6394
6:46:45,11 --> 6:46:48,39
by many other tool vendors or
other tools in terms of giving


6395
6:46:48,39 --> 6:46:51,46
people a quick overview
of what their tools


6396
6:46:51,46 --> 6:46:54,4
could do for them.


6397
6:46:54,4 --> 6:46:59,63
But indeed, there has to be some
limitation on the browser


6398
6:46:59,63 --> 6:47:0,94
version of the tool.


6399
6:47:0,94 --> 6:47:4,88
For example, the total length of
the code in the test might


6400
6:47:4,88 --> 6:47:6,58
not be too long.


6401
6:47:6,58 --> 6:47:10,37
You only have one file being
copy-pasted in that browser


6402
6:47:10,37 --> 6:47:12,5
text box for the code
in the test.


6403
6:47:12,5 --> 6:47:14,2
Single-threaded.


6404
6:47:14,2 --> 6:47:20,21
No environment interaction, such
as you cannot use FiiO


6405
6:47:20,21 --> 6:47:22,55
network communication, that
kind of thing, in


6406
6:47:22,55 --> 6:47:24,31
the code in the test.


6407
6:47:24,31 --> 6:47:28,11
No non-deterministic behavior.


6408
6:47:28,11 --> 6:47:30,57
It will try to avoid
floating-point computations,


6409
6:47:30,57 --> 6:47:35,89
which cannot be handled well
by existing [INAUDIBLE].


6410
6:47:35,89 --> 6:47:40,93
We also impose this 20-second
expiration time for test


6411
6:47:40,93 --> 6:47:44,12
generation when you click
the button, Ask Pex.


6412
6:47:44,12 --> 6:47:47,32
But some of these issues are
just specific to the browser


6413
6:47:47,32 --> 6:47:48,7
version, not to the--


6414
6:47:48,7 --> 6:47:52,14
like we're use still
the plugin version.


6415
6:47:52,14 --> 6:47:54,7
In summary, so far I've
discussed the dynamic symbolic


6416
6:47:54,7 --> 6:47:59,31
execution, how it works, and how
Pex could be used, and how


6417
6:47:59,31 --> 6:48:3,83
Pex could be migrated to a
browser version so that many


6418
6:48:3,83 --> 6:48:7,67
people just open up their
browser and then get a sense


6419
6:48:7,67 --> 6:48:8,92
of what it could do for you.


6420
6:48:8,92 --> 6:48:11,34



6421
6:48:11,34 --> 6:48:15,32
In order to make this browser
version really usable, to have


6422
6:48:15,32 --> 6:48:20,29
similar user experiences as they
were doing within their


6423
6:48:20,29 --> 6:48:25,32
typical IDE, for example,
VideoStudio, my collaborators


6424
6:48:25,32 --> 6:48:29,3
in Microsoft Research put a
lot of effort in creating


6425
6:48:29,3 --> 6:48:33,56
these nice features, such as
auto code completion, when you


6426
6:48:33,56 --> 6:48:38,46
just type in, for example,
console.w, it would pop up


6427
6:48:38,46 --> 6:48:42,41
some suggestions for the method
that you want to put


6428
6:48:42,41 --> 6:48:45,53
in, along with a description
of these API methods.


6429
6:48:45,53 --> 6:48:49,32
Very nice features, it just
allows you to feel the similar


6430
6:48:49,32 --> 6:48:54,2
experiences as in the
normal, typical IDE.


6431
6:48:54,2 --> 6:48:57,82
So basically, for this kind of a
browser version of the tool,


6432
6:48:57,82 --> 6:49:2,51
you could leverage the cloud to
do the computation, do the


6433
6:49:2,51 --> 6:49:3,69
test generation.


6434
6:49:3,69 --> 6:49:9,58
And you use the browser as the
front end for the user to


6435
6:49:9,58 --> 6:49:12,72
enter the code they would like
to test and then also use the


6436
6:49:12,72 --> 6:49:15,8
browser to display the
test data being


6437
6:49:15,8 --> 6:49:16,595
generated back to the users.


6438
6:49:16,595 --> 6:49:19,52



6439
6:49:19,52 --> 6:49:20,6
So far so, good.


6440
6:49:20,6 --> 6:49:25,1
We have Pex, and we have the
dynamic symbolic execution


6441
6:49:25,1 --> 6:49:27,2
incorporated in Pex.


6442
6:49:27,2 --> 6:49:30,86
My collaborator at Microsoft
Research put this Pex for fun


6443
6:49:30,86 --> 6:49:33,425
website so that you could
play with it.


6444
6:49:33,425 --> 6:49:35,24
But think about it.


6445
6:49:35,24 --> 6:49:39,44
Unless you are really like a
geek, otherwise you wouldn't


6446
6:49:39,44 --> 6:49:40,7
come back to this website.


6447
6:49:40,7 --> 6:49:43,2
Like, oh, every now and then,
you just type in some code and


6448
6:49:43,2 --> 6:49:45,67
click the button and say,
oh, how fun it is.


6449
6:49:45,67 --> 6:49:51,3
Or you generate strong forward
detection capability, like in


6450
6:49:51,3 --> 6:49:54,3
terms of test data, and then you
play it again and again.


6451
6:49:54,3 --> 6:49:57,26
I mean, I think few people
would do that.


6452
6:49:57,26 --> 6:50:0,91
Then we think about how we could
leverage this websites


6453
6:50:0,91 --> 6:50:6,24
and the test generation to do
something more fun and more


6454
6:50:6,24 --> 6:50:8,93
useful in our world and life.


6455
6:50:8,93 --> 6:50:11,67
That's how the coding duels
come into the picture.


6456
6:50:11,67 --> 6:50:17,59
It's a major game type for
Pex for fun website.


6457
6:50:17,59 --> 6:50:22,88
So far, for the coding duel game
type, particularly for


6458
6:50:22,88 --> 6:50:27,42
the Ask Pex button, basically
you click one time of Ask Pex


6459
6:50:27,42 --> 6:50:32,91
button that will indicate one
iteration of gameplay.


6460
6:50:32,91 --> 6:50:37,25
About one month ago, we had more
than 1.1 million of the


6461
6:50:37,25 --> 6:50:38,52
clicking the button.


6462
6:50:38,52 --> 6:50:43,66
So many people around the world
are using this website


6463
6:50:43,66 --> 6:50:46,69
to do a different kind of thing,
like particularly for


6464
6:50:46,69 --> 6:50:48,53
learning while having
some fun.


6465
6:50:48,53 --> 6:50:50,24
Or it's being used in
a classroom setting.


6466
6:50:50,24 --> 6:50:53,1



6467
6:50:53,1 --> 6:50:55,33
Let me give you some idea
on what a coding


6468
6:50:55,33 --> 6:50:56,62
duel would be like.


6469
6:50:56,62 --> 6:50:59,43
And the ideas are very simple.


6470
6:50:59,43 --> 6:51:4,18
For a game creator like myself
or actually anyone around the


6471
6:51:4,18 --> 6:51:9,33
world, you could create a secret
implementation on the


6472
6:51:9,33 --> 6:51:10,8
right hand side.


6473
6:51:10,8 --> 6:51:13,5
Basically, you write a very
simple piece of code.


6474
6:51:13,5 --> 6:51:16,47
And then you also release
[INAUDIBLE]


6475
6:51:16,47 --> 6:51:18,71
of the secret implementation.


6476
6:51:18,71 --> 6:51:25,4
Then the players would need to
complete or finish the player


6477
6:51:25,4 --> 6:51:29,84
implementation so that the
player implementation would


6478
6:51:29,84 --> 6:51:34,56
have the exact same behavior as
the secret implementation.


6479
6:51:34,56 --> 6:51:37,61
And you would say, I cannot see
the secret implementation.


6480
6:51:37,61 --> 6:51:40,8
How could I type in the code to
make the behavior the same


6481
6:51:40,8 --> 6:51:43,45
as the underlying secret
implementation?


6482
6:51:43,45 --> 6:51:45,83
It's mission impossible.


6483
6:51:45,83 --> 6:51:49,68
That's how aspects of Pex
come into the picture.


6484
6:51:49,68 --> 6:51:53,73
Pex would give you feedback to
tell you under what inputs you


6485
6:51:53,73 --> 6:51:56,92
have the same behavior between
these two versions, under what


6486
6:51:56,92 --> 6:51:59,33
inputs you have different
behaviors.


6487
6:51:59,33 --> 6:52:3,33
In addition, Pex would be the
judge to determine whether


6488
6:52:3,33 --> 6:52:6,65
these two implementations
have the same behavior.


6489
6:52:6,65 --> 6:52:9,86
Let me use an example
to walk you through.


6490
6:52:9,86 --> 6:52:14,48
On the left hand side, I already
created a secret


6491
6:52:14,48 --> 6:52:18,68
implementation, a very simple
one, recursion function.


6492
6:52:18,68 --> 6:52:21,88
On the right hand side, I
release to the player with the


6493
6:52:21,88 --> 6:52:24,56
player implementation basically
the anti-one.


6494
6:52:24,56 --> 6:52:27,85
You just return x.


6495
6:52:27,85 --> 6:52:31,58
Then when the user, the player,
tries to play this


6496
6:52:31,58 --> 6:52:35,53
game, first, the player would
click the button Ask Pex.


6497
6:52:35,53 --> 6:52:39,2
Because without any hints, the
player has no clues on what


6498
6:52:39,2 --> 6:52:43,21
directions the player needs
to modify the code.


6499
6:52:43,21 --> 6:52:47,54
Then after the player clicks the
button Ask Pex, behind the


6500
6:52:47,54 --> 6:52:52,36
scenes, we actually have this
test driver being synthesized.


6501
6:52:52,36 --> 6:52:55,16
It's more like a parameter
unit test.


6502
6:52:55,16 --> 6:52:59,77
You have the input argument the
same as the signature of


6503
6:52:59,77 --> 6:53:2,17
the two implementations.


6504
6:53:2,17 --> 6:53:6,5
But we construct a new branch
there saying that if the


6505
6:53:6,5 --> 6:53:9,81
return value of the secret
implementation is not equal to


6506
6:53:9,81 --> 6:53:11,25
the value of the player


6507
6:53:11,25 --> 6:53:13,42
implementation, we throw an exception.


6508
6:53:13,42 --> 6:53:17,11
As you can see, dynamic symbolic
execution will try to


6509
6:53:17,11 --> 6:53:21,62
cover all feasible paths, of
course, all feasible branches.


6510
6:53:21,62 --> 6:53:24,92
And if possible, Pex, or dynamic
symbolic execution,


6511
6:53:24,92 --> 6:53:28,6
will fire test input to
cover that branch.


6512
6:53:28,6 --> 6:53:29,55
What does that mean?


6513
6:53:29,55 --> 6:53:33,22
If you can cover that branch,
it means that you have at


6514
6:53:33,22 --> 6:53:36,86
least one test input to cause
the behaviors of the two


6515
6:53:36,86 --> 6:53:39,76
implementations to be different
so that you have a


6516
6:53:39,76 --> 6:53:40,84
failing test.


6517
6:53:40,84 --> 6:53:44,32
So in reality, if you click
the button for these two


6518
6:53:44,32 --> 6:53:49,8
implementations, you will see
the table displaying two


6519
6:53:49,8 --> 6:53:52,23
passing tests and one
failing test.


6520
6:53:52,23 --> 6:53:56,76
Basically, we are saying that
if your argument value is 1,


6521
6:53:56,76 --> 6:54:0,11
the written value is 1 for
both implementations.


6522
6:54:0,11 --> 6:54:1,1
2, similar thing.


6523
6:54:1,1 --> 6:54:3,74
The return value will be 2
for both implementations.


6524
6:54:3,74 --> 6:54:8,18
But if you have input value as
3, the secret implementation


6525
6:54:8,18 --> 6:54:12,85
will return 6 in cell 3 which
would be returned by the


6526
6:54:12,85 --> 6:54:14,86
player implementation.


6527
6:54:14,86 --> 6:54:19,0
So as you can see, as a player,
when you see this kind


6528
6:54:19,0 --> 6:54:22,73
of feedback, you try to modify,
you try to do some


6529
6:54:22,73 --> 6:54:26,95
generalization, objection,
reflect on how would you


6530
6:54:26,95 --> 6:54:31,2
modify the code implementation
so that you could satisfy the


6531
6:54:31,2 --> 6:54:33,56
constraint of the three
test inputs.


6532
6:54:33,56 --> 6:54:37,34
Basically making the passing
tests still pass, but making


6533
6:54:37,34 --> 6:54:40,35
the failing test also pass.


6534
6:54:40,35 --> 6:54:44,41
We use this kind of gaming with
middle school students.


6535
6:54:44,41 --> 6:54:47,1
We see very interesting
behavior there.


6536
6:54:47,1 --> 6:54:50,96
They may just say focus their
energy on the failing test


6537
6:54:50,96 --> 6:54:53,632
without thinking about making
the passing first two parts of


6538
6:54:53,632 --> 6:54:55,25
the test also pass.


6539
6:54:55,25 --> 6:54:57,9
More like overthinking
the [INAUDIBLE]


6540
6:54:57,9 --> 6:55:1,4
solving in their mind.


6541
6:55:1,4 --> 6:55:5,5
So to summarize these coding
duels, basically we provide


6542
6:55:5,5 --> 6:55:9,7
these kind of fun and engaging
experiences by allowing the


6543
6:55:9,7 --> 6:55:14,8
user, the player to have this
iterative gameplay over time


6544
6:55:14,8 --> 6:55:18,65
by clicking, asking Pex over
time when they change the


6545
6:55:18,65 --> 6:55:21,58
player implementations based
on the feedback.


6546
6:55:21,58 --> 6:55:25,21
The feedback is adapted
and personalized.


6547
6:55:25,21 --> 6:55:27,95
Like you play the same again.


6548
6:55:27,95 --> 6:55:30,78
You may write down different a
player implementation, make


6549
6:55:30,78 --> 6:55:31,75
different revisions.


6550
6:55:31,75 --> 6:55:34,3
Then the feedback you are
getting would be different


6551
6:55:34,3 --> 6:55:37,65
because dynamic symbol
execution, or Pex, would


6552
6:55:37,65 --> 6:55:40,946
leverage both the player
implementation and the secret


6553
6:55:40,946 --> 6:55:44,35
implementation to generate
specific tests to show the


6554
6:55:44,35 --> 6:55:48,2
differences or the commonalities
of the behavior.


6555
6:55:48,2 --> 6:55:50,88
It's very difficult
to do cheating.


6556
6:55:50,88 --> 6:55:55,215
You may say, oh, because
earlier, I mentioned that


6557
6:55:55,215 --> 6:55:57,49
floating-point computation
would not be good for


6558
6:55:57,49 --> 6:55:59,44
[INAUDIBLE], so let's just put
a bunch of floating-point


6559
6:55:59,44 --> 6:56:3,12
computations there to fool Pex
or fool dynamic symbolic


6560
6:56:3,12 --> 6:56:4,58
execution, that would
not work well.


6561
6:56:4,58 --> 6:56:6,4
It's very difficult
to defeat that.


6562
6:56:6,4 --> 6:56:7,21
In theory, you could.


6563
6:56:7,21 --> 6:56:9,96
But in practice, it's very
difficult to cheat.


6564
6:56:9,96 --> 6:56:12,19
We have very clear winning
criterion.


6565
6:56:12,19 --> 6:56:17,8
Basically, as long as Pex cannot
generate a failing


6566
6:56:17,8 --> 6:56:20,52
test, then you win the game.


6567
6:56:20,52 --> 6:56:26,15
We have quite some users posting
their feedback and


6568
6:56:26,15 --> 6:56:26,98
their experience online.


6569
6:56:26,98 --> 6:56:29,89
I'll just read you some of
the interesting ones.


6570
6:56:29,89 --> 6:56:33,22
"I used to love the first-person
shooters and the


6571
6:56:33,22 --> 6:56:36,46
satisfaction of blowing away a
whole team of noobies playing


6572
6:56:36,46 --> 6:56:41,76
'Rainbow Six,' but this is far
more fun." The user was


6573
6:56:41,76 --> 6:56:44,45
referring to playing
Pex for fun.


6574
6:56:44,45 --> 6:56:47,52
The second one, apparently, as
you could guess, the second


6575
6:56:47,52 --> 6:56:51,78
one is a professional, rather
than a student.


6576
6:56:51,78 --> 6:56:54,23
"I'm afraid I'll have to
constrain myself to spend just


6577
6:56:54,23 --> 6:56:58,24
an hour or so a day on this
really exciting stuff, as I'm


6578
6:56:58,24 --> 6:57:1,33
really stuffed with work." We
don't want to impact your


6579
6:57:1,33 --> 6:57:3,8
normal workload there.


6580
6:57:3,8 --> 6:57:5,82
But on the side, it's good
to have some kind of


6581
6:57:5,82 --> 6:57:10,94
entertainment while
learning yourself.


6582
6:57:10,94 --> 6:57:12,83
The third one is talking
about the learning


6583
6:57:12,83 --> 6:57:14,17
and teaching aspect.


6584
6:57:14,17 --> 6:57:15,76
"It really got me excited.


6585
6:57:15,76 --> 6:57:19,13
The part that got me most is
about spreading interest in


6586
6:57:19,13 --> 6:57:20,44
teaching computer science.


6587
6:57:20,44 --> 6:57:22,98
I do think that it's really
great for teaching and


6588
6:57:22,98 --> 6:57:27,17
learning." We have many, many
more different, very positive


6589
6:57:27,17 --> 6:57:30,958
feedback from the users.


6590
6:57:30,958 --> 6:57:37,27
And recently, like two years
ago, we had this coding duel


6591
6:57:37,27 --> 6:57:39,88
competition at our major
software engineering


6592
6:57:39,88 --> 6:57:42,63
conference, International
Conference on Software


6593
6:57:42,63 --> 6:57:44,23
Engineering 2011.


6594
6:57:44,23 --> 6:57:49,25
And we provided these 30
coding duels for the


6595
6:57:49,25 --> 6:57:53,26
conference attendees including
students and researchers.


6596
6:57:53,26 --> 6:57:56,72
As you can see, I zoomed in
there with one of the coding


6597
6:57:56,72 --> 6:57:59,56
duels, number 10.


6598
6:57:59,56 --> 6:58:4,65
Basically, the green entries
would indicate that user


6599
6:58:4,65 --> 6:58:8,51
actually solves the coding duel,
wins the coding duel.


6600
6:58:8,51 --> 6:58:12,5
For the red ones, that would
indicate the user makes an


6601
6:58:12,5 --> 6:58:13,72
attempt but fails.


6602
6:58:13,72 --> 6:58:17,26
The number there indicated how
many attempts the user made,


6603
6:58:17,26 --> 6:58:21,33
basically how many times the
user clicked Ask Pex before


6604
6:58:21,33 --> 6:58:23,71
they actually finally got
it for the green one.


6605
6:58:23,71 --> 6:58:26,12
Or the red ones, in the
end, they still


6606
6:58:26,12 --> 6:58:27,6
couldn't win the game.


6607
6:58:27,6 --> 6:58:30,47
It's very interesting to see
for this particular coding


6608
6:58:30,47 --> 6:58:32,17
duel is not that trivial.


6609
6:58:32,17 --> 6:58:37,735
As you can see, we have
one user solving


6610
6:58:37,735 --> 6:58:38,985
the game four times.


6611
6:58:38,985 --> 6:58:42,41
That's very good, four times
actually got it.


6612
6:58:42,41 --> 6:58:47,88
But we can see the other had 147
times and finally got it.


6613
6:58:47,88 --> 6:58:52,28
You could reflect that user's
really patient or determined.


6614
6:58:52,28 --> 6:58:55,26
It's up to you to judge whether
you want to hire this


6615
6:58:55,26 --> 6:58:58,36
person to be you tester
or not, right?


6616
6:58:58,36 --> 6:59:2,15
So you could have different
interpretations on that.


6617
6:59:2,15 --> 6:59:5,64
But as later I will describe
more, another very interesting


6618
6:59:5,64 --> 6:59:10,8
thing for you to see is that as
a teacher who would create


6619
6:59:10,8 --> 6:59:12,89
this kind of a game for a
student to try, a teacher


6620
6:59:12,89 --> 6:59:16,3
could actually see every
single step the


6621
6:59:16,3 --> 6:59:17,56
user actually tried.


6622
6:59:17,56 --> 6:59:20,1
For this particular case, we
should actually go inside to


6623
6:59:20,1 --> 6:59:26,31
see for that user with 147, what
on earth did this user


6624
6:59:26,31 --> 6:59:28,27
finally got it right?


6625
6:59:28,27 --> 6:59:31,45
Like, what's the turning point,
or why do you need so


6626
6:59:31,45 --> 6:59:31,89
many times?


6627
6:59:31,89 --> 6:59:35,5
Or for the fourth one, what is
actually the magic happened?


6628
6:59:35,5 --> 6:59:37,48
Four times you got it.


6629
6:59:37,48 --> 6:59:40,64
It's very interesting to see
the process besides just


6630
6:59:40,64 --> 6:59:43,28
seeing the end result.


6631
6:59:43,28 --> 6:59:46,9
So to summarize what we talk
about coding duels, basically


6632
6:59:46,9 --> 6:59:51,37
it's given a particular secret
implementation and an empty or


6633
6:59:51,37 --> 6:59:54,4
incomplete player
implementation, we ask users


6634
6:59:54,4 --> 6:59:58,14
to try to improve the player
implementation so that the


6635
6:59:58,14 --> 7:0:1,27
behavior would match the secret
implementation one.


6636
7:0:1,27 --> 7:0:5,83
The students need to infer the
intended behavior of the


6637
7:0:5,83 --> 7:0:8,36
secret implementation that they
couldn't see, and then


6638
7:0:8,36 --> 7:0:12,2
they would iteratively try to
generalize that behavior to


6639
7:0:12,2 --> 7:0:16,1
the code implementation that
they are working on.


6640
7:0:16,1 --> 7:0:19,27
We also have this kind of a
social experience to make it


6641
7:0:19,27 --> 7:0:21,45
more fun and engaging.


6642
7:0:21,45 --> 7:0:23,94
We had this live feed.


6643
7:0:23,94 --> 7:0:27,95
Then on the website, you could
see at this particular moment


6644
7:0:27,95 --> 7:0:30,28
who are solving what.


6645
7:0:30,28 --> 7:0:32,945
Are they successful, or
are they failing and


6646
7:0:32,945 --> 7:0:34,42
still trying very hard?


6647
7:0:34,42 --> 7:0:39,14
It would be fun to watch if
you don't have many useful


6648
7:0:39,14 --> 7:0:40,57
tasks at hand.


6649
7:0:40,57 --> 7:0:43,15
Especially when you create some
coding duels, to just


6650
7:0:43,15 --> 7:0:45,48
see, oh, who are solving
my duels.


6651
7:0:45,48 --> 7:0:49,38
That's an interesting
live feed there.


6652
7:0:49,38 --> 7:0:53,71
We also had these rank lists
for different users.


6653
7:0:53,71 --> 7:0:59,33
A user could gain some points
by creating coding duels for


6654
7:0:59,33 --> 7:1:0,73
other people to play.


6655
7:1:0,73 --> 7:1:6,2
Also gain some points by
successfully solving certain


6656
7:1:6,2 --> 7:1:7,8
coding duels.


6657
7:1:7,8 --> 7:1:10,67
We have these kind of rank lists
of people around the


6658
7:1:10,67 --> 7:1:13,855
world on this website.


6659
7:1:13,855 --> 7:1:17,56
We had a leaderboard along with
other nice features for


6660
7:1:17,56 --> 7:1:18,81
social experiences.


6661
7:1:18,81 --> 7:1:20,87



6662
7:1:20,87 --> 7:1:23,89
We would like to take advantage
of these platforms


6663
7:1:23,89 --> 7:1:27,34
so that we could really get much
in terms of the teaching


6664
7:1:27,34 --> 7:1:29,92
and learning, rather than just
say I will put it there so


6665
7:1:29,92 --> 7:1:34,27
that anyone who would like to
try it out, just try it out.


6666
7:1:34,27 --> 7:1:38,41
To do that, basically
we provide


6667
7:1:38,41 --> 7:1:39,68
different kinds of features.


6668
7:1:39,68 --> 7:1:44,32
For example, as a teacher, we
could create a course by


6669
7:1:44,32 --> 7:1:47,11
assembling different
web pages.


6670
7:1:47,11 --> 7:1:49,15
Like the course page, we
already have different


6671
7:1:49,15 --> 7:1:53,47
materials on different topics,
testing, along with different


6672
7:1:53,47 --> 7:1:55,12
programming topics.


6673
7:1:55,12 --> 7:1:58,87
Here is a screen snapshot
there, basically for the


6674
7:1:58,87 --> 7:2:2,3
teacher, This is like
a sample course.


6675
7:2:2,3 --> 7:2:6,2
We can see that on the right
hand side, we have this kind


6676
7:2:6,2 --> 7:2:11,73
of dashboard of showing the
students' progress on solving


6677
7:2:11,73 --> 7:2:14,89
some exercises in the form
of coding duels.


6678
7:2:14,89 --> 7:2:19,19
And in real time, the teachers
could look into what kind of


6679
7:2:19,19 --> 7:2:20,58
problem they are facing.


6680
7:2:20,58 --> 7:2:22,31
Are they struggling on
a particular thing?


6681
7:2:22,31 --> 7:2:26,5
Or maybe the exercises are not
that clear in terms of giving


6682
7:2:26,5 --> 7:2:28,28
students a requirement.


6683
7:2:28,28 --> 7:2:30,95



6684
7:2:30,95 --> 7:2:34,57
We used coding duels
in a graduate


6685
7:2:34,57 --> 7:2:35,93
software engineering course.


6686
7:2:35,93 --> 7:2:39,84
Typically, you would think, oh,
this kind of a nice game


6687
7:2:39,84 --> 7:2:43,4
could be used in intro
programming courses.


6688
7:2:43,4 --> 7:2:44,6
Indeed, that would
be the case.


6689
7:2:44,6 --> 7:2:48,83
For example, if you are teaching
LOOP, you could just


6690
7:2:48,83 --> 7:2:53,42
take a certain piece of the loop
head out and then ask the


6691
7:2:53,42 --> 7:2:56,18
student to fill in that
particular, for example, the


6692
7:2:56,18 --> 7:2:59,8
upper bound of the loop,
this kind of thing.


6693
7:2:59,8 --> 7:3:2,23
But at same time, we actually
tried it out at a graduate


6694
7:3:2,23 --> 7:3:4,89
software engineering course
in terms of teaching them


6695
7:3:4,89 --> 7:3:8,87
specification writing
requirements, testing design


6696
7:3:8,87 --> 7:3:12,41
patterns, many different
kinds of topics.


6697
7:3:12,41 --> 7:3:16,7
Here's just a screen snapshot of
a particular exercise that


6698
7:3:16,7 --> 7:3:18,71
we prepared for training
students in


6699
7:3:18,71 --> 7:3:20,47
specification writing.


6700
7:3:20,47 --> 7:3:24,16
As you know, in testing, in
order to right very strong


6701
7:3:24,16 --> 7:3:28,62
test articles, you need to
write strong properties.


6702
7:3:28,62 --> 7:3:33,27
For the topic of parameter unit
testing, to write that


6703
7:3:33,27 --> 7:3:37,8
unit test with parameters, you
need to have strong assertions


6704
7:3:37,8 --> 7:3:40,68
of properties to really check
the behavior that you would


6705
7:3:40,68 --> 7:3:41,87
want to check.


6706
7:3:41,87 --> 7:3:45,5
So this exercise actually has
some natural language


6707
7:3:45,5 --> 7:3:47,41
descriptions of some
properties of a


6708
7:3:47,41 --> 7:3:49,17
particular API method.


6709
7:3:49,17 --> 7:3:53,36
And then we ask students to
actually translate these


6710
7:3:53,36 --> 7:3:57,33
natural language discussions
into some formally checkable


6711
7:3:57,33 --> 7:3:58,63
properties.


6712
7:3:58,63 --> 7:4:1,45
So in this particular exercise,
as you can see,


6713
7:4:1,45 --> 7:4:5,24
students may not have much space
for guessing because


6714
7:4:5,24 --> 7:4:8,18
it's actually solving
the given exercise.


6715
7:4:8,18 --> 7:4:11,34
But the nice thing about it
is that you actually get


6716
7:4:11,34 --> 7:4:13,14
automatic grading.


6717
7:4:13,14 --> 7:4:16,66
Both the instructors and
the TAs are very happy.


6718
7:4:16,66 --> 7:4:20,24
Because in the end, you just
look at, oh, how many failing,


6719
7:4:20,24 --> 7:4:22,6
how many passing into the green


6720
7:4:22,6 --> 7:4:24,51
entries and the red entries.


6721
7:4:24,51 --> 7:4:27,42
And you just calculate the
scores, rather than really go


6722
7:4:27,42 --> 7:4:32,31
inside to grade them
with tiny details.


6723
7:4:32,31 --> 7:4:37,11
And here is just one example of
how we use coding duels for


6724
7:4:37,11 --> 7:4:39,12
teaching testing.


6725
7:4:39,12 --> 7:4:42,44
The code in the test actually
is a stack,


6726
7:4:42,44 --> 7:4:44,42
is a boundless stack.


6727
7:4:44,42 --> 7:4:50,7
We create this coding duel by
passing in some parameters


6728
7:4:50,7 --> 7:4:53,85
like the elements, array element
capacity, this upper


6729
7:4:53,85 --> 7:4:57,79
bound for the stack, and the
element which could be the


6730
7:4:57,79 --> 7:5:0,37
element you want to push
into the stick.


6731
7:5:0,37 --> 7:5:2,97
Or you want to check whether
the stack has this element.


6732
7:5:2,97 --> 7:5:3,79
But we don't know.


6733
7:5:3,79 --> 7:5:6,46
We don't tell you exactly how
we are going to use that.


6734
7:5:6,46 --> 7:5:10,59
But earlier, the first two lines
are basically talking


6735
7:5:10,59 --> 7:5:12,96
about assumptions we put in.


6736
7:5:12,96 --> 7:5:17,25
And then we have the next four
lines describing the setup of


6737
7:5:17,25 --> 7:5:18,91
that stack.


6738
7:5:18,91 --> 7:5:22,11
Basically we just put this array
element into the stack


6739
7:5:22,11 --> 7:5:27,46
so that you could allow the test
generation to generate a


6740
7:5:27,46 --> 7:5:31,18
particular state for you in
this particular setting.


6741
7:5:31,18 --> 7:5:34,77
And then in the end, we put down
the assertions we really


6742
7:5:34,77 --> 7:5:38,83
want the code in the
test to be checked.


6743
7:5:38,83 --> 7:5:41,4
But we keep the middle empty.


6744
7:5:41,4 --> 7:5:45,5
As you can imagine, the middle
part, the empty part, that


6745
7:5:45,5 --> 7:5:49,57
needs to be filled would be
about what method on the tag


6746
7:5:49,57 --> 7:5:51,6
you want to invoke
on the stack.


6747
7:5:51,6 --> 7:5:54,51
In addition, you may also need
to add some assumptions to


6748
7:5:54,51 --> 7:5:58,31
really make sure that the
assertion will be passed.


6749
7:5:58,31 --> 7:6:3,2
So if you have interest, you
could go to the URL to try it


6750
7:6:3,2 --> 7:6:5,305
out yourself to see the
different kind of exercises.


6751
7:6:5,305 --> 7:6:8,1



6752
7:6:8,1 --> 7:6:9,64
How do you use Pex for fun?


6753
7:6:9,64 --> 7:6:13,78
I already demonstrated
some scenarios.


6754
7:6:13,78 --> 7:6:17,95
As we all know, MOOC has been
very popular, Massive Open


6755
7:6:17,95 --> 7:6:19,71
Online Course.


6756
7:6:19,71 --> 7:6:22,47
There are at least two major
challenges there to make


6757
7:6:22,47 --> 7:6:24,5
things work in MOOCs.


6758
7:6:24,5 --> 7:6:26,462
First, grading.


6759
7:6:26,462 --> 7:6:29,95
If you have thousands or even
millions of students, you


6760
7:6:29,95 --> 7:6:33,89
cannot afford hiring TAs to
grade these students'


6761
7:6:33,89 --> 7:6:38,4
submissions because typically,
they are free in


6762
7:6:38,4 --> 7:6:40,43
terms of the course.


6763
7:6:40,43 --> 7:6:44,34
Then here, if you Pex for fun,
you could create exercises and


6764
7:6:44,34 --> 7:6:47,55
get this automatic grading
for free as a nice


6765
7:6:47,55 --> 7:6:49,282
feature on the side.


6766
7:6:49,282 --> 7:6:53,23
But indeed, it's an open
challenge in terms of like


6767
7:6:53,23 --> 7:6:55,56
addressing cheating.


6768
7:6:55,56 --> 7:6:58,79
If one student just copy-pastes
another student's


6769
7:6:58,79 --> 7:7:1,9
solution, they're working on the
same duel, we really don't


6770
7:7:1,9 --> 7:7:4,41
have certain controls
in terms of that.


6771
7:7:4,41 --> 7:7:8,1
It's an open challenge for many
different technologies.


6772
7:7:8,1 --> 7:7:11,73
It can be a useful course
assignment in regular course


6773
7:7:11,73 --> 7:7:15,42
situation, both academic
settings or industry setting


6774
7:7:15,42 --> 7:7:16,99
for training.


6775
7:7:16,99 --> 7:7:20,91
We have done that in terms of
the topics from intro to


6776
7:7:20,91 --> 7:7:22,68
programming or software
engineering,


6777
7:7:22,68 --> 7:7:24,35
including testing topics.


6778
7:7:24,35 --> 7:7:28,45
We actually could have these
competitions, including


6779
7:7:28,45 --> 7:7:31,4
student competitions and
professional competitions.


6780
7:7:31,4 --> 7:7:34,7
We had this experience
at ICSE 2011.


6781
7:7:34,7 --> 7:7:37,35
And finally, as I hinted on
earlier, it would be very


6782
7:7:37,35 --> 7:7:40,7
interesting for you to
actually observe one


6783
7:7:40,7 --> 7:7:44,97
particular player or user's
problem-solving process.


6784
7:7:44,97 --> 7:7:48,6
As a recruiter or a company's
employees, you want to hire


6785
7:7:48,6 --> 7:7:51,67
some potential employees.


6786
7:7:51,67 --> 7:7:53,35
You want to see how
they are doing.


6787
7:7:53,35 --> 7:7:56,4
But basically, you could create
some well-designed


6788
7:7:56,4 --> 7:7:58,33
coding duels for
them to solve.


6789
7:7:58,33 --> 7:8:0,82
Not only seeing how many
attempts they are making, you


6790
7:8:0,82 --> 7:8:2,75
see the problem-solving
process.


6791
7:8:2,75 --> 7:8:4,87
They're kind of similar to what
you typically would do


6792
7:8:4,87 --> 7:8:9,32
using the whiteboard to see how
a particular person would


6793
7:8:9,32 --> 7:8:11,26
do on solving some problem.


6794
7:8:11,26 --> 7:8:14,71
So it could be used in that way
for you to really assess


6795
7:8:14,71 --> 7:8:16,64
people and improve people.


6796
7:8:16,64 --> 7:8:19,48
Like for example, your children,
you want to see how


6797
7:8:19,48 --> 7:8:24,3
they are doing on programming on
particular problem solving.


6798
7:8:24,3 --> 7:8:26,9
To summarize what we discussed
in teaching and learning,


6799
7:8:26,9 --> 7:8:30,97
basically, if you want to become
a teacher, to really


6800
7:8:30,97 --> 7:8:35,89
create a course for students
or employees or friends to


6801
7:8:35,89 --> 7:8:39,54
play with and see their
problem-solving process, you


6802
7:8:39,54 --> 7:8:44,19
could sign in with a Microsoft
account, like a Hotmail


6803
7:8:44,19 --> 7:8:45,43
account [INAUDIBLE].


6804
7:8:45,43 --> 7:8:48,98
And then you pick a nickname and
send us the nickname, and


6805
7:8:48,98 --> 7:8:52,11
then we could enable you
with a teacher role.


6806
7:8:52,11 --> 7:8:54,52
And as a teacher, you could
create courses.


6807
7:8:54,52 --> 7:8:56,86
You could monitor the progress
of students'


6808
7:8:56,86 --> 7:8:58,83
problem-solving processes.


6809
7:8:58,83 --> 7:9:2,91
You could interact with them
in different ways.


6810
7:9:2,91 --> 7:9:6,24
So in the future, there's a lot
of exciting things ahead


6811
7:9:6,24 --> 7:9:10,41
like how to provide tutoring
support for students if they


6812
7:9:10,41 --> 7:9:13,4
are facing some difficulties.


6813
7:9:13,4 --> 7:9:20,31
You see the 147 user
trying 147 times.


6814
7:9:20,31 --> 7:9:23,37
Typically, a student would get
frustrated after they try a


6815
7:9:23,37 --> 7:9:24,18
number of times.


6816
7:9:24,18 --> 7:9:27,99
For this case, we shouldn't just
say, oh, you keep trying


6817
7:9:27,99 --> 7:9:29,84
or you fail.


6818
7:9:29,84 --> 7:9:32,1
You may have some hints
on the side like in


6819
7:9:32,1 --> 7:9:33,78
the real-world setting.


6820
7:9:33,78 --> 7:9:36,1
And how to detect plagiarism,
I mentioned already it's an


6821
7:9:36,1 --> 7:9:37,28
open problem.


6822
7:9:37,28 --> 7:9:41,47
For the ranking, so far we use
passing or not, right, whether


6823
7:9:41,47 --> 7:9:43,49
you have behavioral differences
or not.


6824
7:9:43,49 --> 7:9:46,88
But we really want to have
other criteria like code


6825
7:9:46,88 --> 7:9:50,51
quality and other kinds of
criteria for us to take into


6826
7:9:50,51 --> 7:9:52,96
account in terms of providing
better grading.


6827
7:9:52,96 --> 7:9:54,79
Support other languages,
[INAUDIBLE].


6828
7:9:54,79 --> 7:9:56,68
More detail in this
upcoming paper.


6829
7:9:56,68 --> 7:10:0,112
It's available from
my homepage.


6830
7:10:0,112 --> 7:10:3,33
And in conclusion, I talk about
two different kinds of


6831
7:10:3,33 --> 7:10:6,45
technologies, but they are
correlated to each other,


6832
7:10:6,45 --> 7:10:8,33
supporting each other.


6833
7:10:8,33 --> 7:10:10,82
Dynamic symbolic execution,
along with Pex and parameter


6834
7:10:10,82 --> 7:10:14,71
unit testing, and Pex for fur as
an application or platform.


6835
7:10:14,71 --> 7:10:18,7
To conclude that, my email
address is there.


6836
7:10:18,7 --> 7:10:21,16
We welcome collaborations
on this exciting period.


6837
7:10:21,16 --> 7:10:25,16
I would say in 40 or 50
years, you may retire.


6838
7:10:25,16 --> 7:10:26,4
Right?


6839
7:10:26,4 --> 7:10:30,37
Educating the next generation to
do a better job than us or


6840
7:10:30,37 --> 7:10:32,94
at least as good as us
is very important.


6841
7:10:32,94 --> 7:10:36,38
I think that besides just doing
tests with automation,


6842
7:10:36,38 --> 7:10:39,98
it's a good opportunity for us
to think about how to make


6843
7:10:39,98 --> 7:10:43,11
education and learning more fun
and more valuable for the


6844
7:10:43,11 --> 7:10:44,65
next generation.


6845
7:10:44,65 --> 7:10:45,383
Thank you.


6846
7:10:45,383 --> 7:10:51,54
[APPLAUSE]


6847
7:10:51,54 --> 7:10:54,5
TONY VOELLM: Great
Thank you, Tao.


6848
7:10:54,5 --> 7:10:56,46
Very fascinating.


6849
7:10:56,46 --> 7:11:0,91
So I had forgotten earlier, I
had a few things up here.


6850
7:11:0,91 --> 7:11:4,34
So for some live questions, I
was going to throw this out to


6851
7:11:4,34 --> 7:11:5,9
a live question.


6852
7:11:5,9 --> 7:11:7,8
We'll determine the
best one here.


6853
7:11:7,8 --> 7:11:9,5
So this is a little Androidy.


6854
7:11:9,5 --> 7:11:11,29



6855
7:11:11,29 --> 7:11:12,94
So we have the Dory up.


6856
7:11:12,94 --> 7:11:16,58
Let me go to the Dory, or
to the moderator here.


6857
7:11:16,58 --> 7:11:19,13
It's not a door.


6858
7:11:19,13 --> 7:11:23,98
So first question up, how does
a tool like Pex fit into the


6859
7:11:23,98 --> 7:11:25,32
software life cycle?


6860
7:11:25,32 --> 7:11:31,2
TAO XIE: OK, so Pex could be
used like the other test


6861
7:11:31,2 --> 7:11:31,66
generating tools.


6862
7:11:31,66 --> 7:11:34,27
You finish your code
implementation, and then you


6863
7:11:34,27 --> 7:11:38,7
apply Pex to generate test
data to excise different


6864
7:11:38,7 --> 7:11:39,21
portions of the code.


6865
7:11:39,21 --> 7:11:42,32
In addition, it actually could
fit in TTD, Test-Driven


6866
7:11:42,32 --> 7:11:43,41
Development.


6867
7:11:43,41 --> 7:11:46,32
But in this situation, you write
parameter unit tests


6868
7:11:46,32 --> 7:11:49,52
first without actually having
your code implementation.


6869
7:11:49,52 --> 7:11:52,935
But in this setting, keeping
my parameter unit test


6870
7:11:52,935 --> 7:11:55,91
[INAUDIBLE] would be very
powerful to force you to write


6871
7:11:55,91 --> 7:12:0,54
quite a lot of functionality
when you try pass the test.


6872
7:12:0,54 --> 7:12:3,89
It's debatable whether that's a
good thing or a bad thing in


6873
7:12:3,89 --> 7:12:5,87
terms of philosophy of TTD.


6874
7:12:5,87 --> 7:12:9,39
But it could allow you to spend
more time on writing the


6875
7:12:9,39 --> 7:12:13,61
code implementation rather
than with very minor


6876
7:12:13,61 --> 7:12:17,9
increments of adding
new features.


6877
7:12:17,9 --> 7:12:17,57
TONY VOELLM: Interesting.


6878
7:12:17,57 --> 7:12:20,14
There's one live question
here, so we'll go ahead.


6879
7:12:20,14 --> 7:12:22,3
Tell us who you are, where
you're from, and then your


6880
7:12:22,3 --> 7:12:23,23
question please.


6881
7:12:23,23 --> 7:12:24,21
AUDIENCE: I'm Jessica Nickel.


6882
7:12:24,21 --> 7:12:27,28
I live in New York City, and
I work at Targetspot.


6883
7:12:27,28 --> 7:12:30,36
I was in education for 10 years
before transitioning to


6884
7:12:30,36 --> 7:12:31,54
QA testing.


6885
7:12:31,54 --> 7:12:33,86
And I find this really
exciting.


6886
7:12:33,86 --> 7:12:37,59
And I'm just wondering if there
are plans to develop a


6887
7:12:37,59 --> 7:12:41,47
curriculum around this so that
way teachers can be guided who


6888
7:12:41,47 --> 7:12:43,8
may not be so technical but
who are interested in


6889
7:12:43,8 --> 7:12:46,6
incorporating this into
their classrooms.


6890
7:12:46,6 --> 7:12:47,58
TAO XIE: Yes.


6891
7:12:47,58 --> 7:12:51,38
Yes, actually, there are quite
some materials already on the


6892
7:12:51,38 --> 7:12:55,64
website for you to customize use
in your setting, including


6893
7:12:55,64 --> 7:13:0,8
like intro programming along
with parameter unit testing.


6894
7:13:0,8 --> 7:13:4,9
We are still putting in quite
substantial efforts in getting


6895
7:13:4,9 --> 7:13:7,4
more materials to cover
different topics and customize


6896
7:13:7,4 --> 7:13:9,9
for different levels.


6897
7:13:9,9 --> 7:13:12,26
We also welcome collaboration
in terms of these particular


6898
7:13:12,26 --> 7:13:15,81
aspects, like developing more
course materials so that more


6899
7:13:15,81 --> 7:13:19,22
people could benefit
form this course.


6900
7:13:19,22 --> 7:13:20,18
TONY VOELLM: Great question,
by the way.


6901
7:13:20,18 --> 7:13:22,953
That was a good question and the
first one up, so I'll set


6902
7:13:22,953 --> 7:13:25,41
that there for you.


6903
7:13:25,41 --> 7:13:26,23
OK.


6904
7:13:26,23 --> 7:13:27,67
I think we have one more
live question.


6905
7:13:27,67 --> 7:13:31,29
So please go ahead, who you are,
where you're from, and


6906
7:13:31,29 --> 7:13:32,1
your question please.


6907
7:13:32,1 --> 7:13:35,47
AUDIENCE: Hi, my name is Mark,
University of Malta.


6908
7:13:35,47 --> 7:13:38,1
So I can see how symbolic
execution is really good for


6909
7:13:38,1 --> 7:13:39,88
generating a bunch of
test cases, which


6910
7:13:39,88 --> 7:13:41,53
maximize your coverage.


6911
7:13:41,53 --> 7:13:43,69
How does Pex handle the
[INAUDIBLE] side of things?


6912
7:13:43,69 --> 7:13:46,16
So once you've generated the
test, how can you be sure that


6913
7:13:46,16 --> 7:13:48,22
the system is behaving
properly for


6914
7:13:48,22 --> 7:13:49,83
that particular test?


6915
7:13:49,83 --> 7:13:50,37
TAO XIE: Right.


6916
7:13:50,37 --> 7:13:54,7
So that would fit in what
I describe as a


6917
7:13:54,7 --> 7:13:55,57
parameter unit tests.


6918
7:13:55,57 --> 7:13:58,4
Of course, you could just apply
Pex like any other test


6919
7:13:58,4 --> 7:13:59,7
generation tool.


6920
7:13:59,7 --> 7:14:0,68
You don't write anything.


6921
7:14:0,68 --> 7:14:3,51
You just rely on crashing
or not, or throwing and


6922
7:14:3,51 --> 7:14:4,48
exception or not.


6923
7:14:4,48 --> 7:14:6,22
That's already there.


6924
7:14:6,22 --> 7:14:8,71
If you want to have higher
confidence in terms of


6925
7:14:8,71 --> 7:14:12,3
behavior that you are checking,
you write this kind


6926
7:14:12,3 --> 7:14:15,83
of a parameter unit test with
strong enough assertions so


6927
7:14:15,83 --> 7:14:19,46
that it's not hard-coded for
some constant input value, but


6928
7:14:19,46 --> 7:14:20,87
more general.


6929
7:14:20,87 --> 7:14:24,29
So you would get the benefit
by additionally doing


6930
7:14:24,29 --> 7:14:25,707
parameter unit testing.


6931
7:14:25,707 --> 7:14:27,58
OK, Thank you.


6932
7:14:27,58 --> 7:14:28,66
TONY VOELLM: Yeah, thanks
for the question.


6933
7:14:28,66 --> 7:14:32,34
So up here on the moderator, it
says, "Pex only identifies


6934
7:14:32,34 --> 7:14:34,73
unit testing parameters,
right?


6935
7:14:34,73 --> 7:14:37,58
It will not handle functional
or integration testing."


6936
7:14:37,58 --> 7:14:38,75
TAO XIE: OK.


6937
7:14:38,75 --> 7:14:43,65
So basically, as you can see,
Pex basically, with the nicely


6938
7:14:43,65 --> 7:14:46,62
specified interface, that's the
test data that Pex would


6939
7:14:46,62 --> 7:14:48,0
generate tests.


6940
7:14:48,0 --> 7:14:50,97
You could encode your
integration test or functional


6941
7:14:50,97 --> 7:14:54,65
test inside this parameter
unit test.


6942
7:14:54,65 --> 7:14:57,73
But the next question is that,
could it scale well?


6943
7:14:57,73 --> 7:14:59,42
That's another question.


6944
7:14:59,42 --> 7:15:3,16
We need to see what kind of
code we are dealing with,


6945
7:15:3,16 --> 7:15:6,1
whether the code we are testing
would have dependency


6946
7:15:6,1 --> 7:15:7,16
with the environment.


6947
7:15:7,16 --> 7:15:9,49
Maybe you need to do environment
isolation,


6948
7:15:9,49 --> 7:15:10,4
[INAUDIBLE]


6949
7:15:10,4 --> 7:15:11,96
like do mocking, this
kind of thing.


6950
7:15:11,96 --> 7:15:15,81
So you may have to do a lot of
these additional techniques


6951
7:15:15,81 --> 7:15:19,35
typically you would do in your
traditional unit testing, yes.


6952
7:15:19,35 --> 7:15:20,29
TONY VOELLM: Very interesting.


6953
7:15:20,29 --> 7:15:22,51
And we have time for
one more question.


6954
7:15:22,51 --> 7:15:23,94
So is this a live question?


6955
7:15:23,94 --> 7:15:24,81
We'll take it, please.


6956
7:15:24,81 --> 7:15:26,3
AUDIENCE: Hi, I'm Daniel
[INAUDIBLE].


6957
7:15:26,3 --> 7:15:27,97
I'm a Googler.


6958
7:15:27,97 --> 7:15:30,9
The parameterized testing
assumptions and assertions


6959
7:15:30,9 --> 7:15:34,5
reminded me quite a bit of code
contracts but also felt


6960
7:15:34,5 --> 7:15:35,14
kind of like the opposite.


6961
7:15:35,14 --> 7:15:37,67
Like rather than specifying
within your code parameters,


6962
7:15:37,67 --> 7:15:40,27
you're writing the test which
is meant to be kind of


6963
7:15:40,27 --> 7:15:41,15
auto-verified.


6964
7:15:41,15 --> 7:15:42,72
I was wondering if you could
kind of contrast those


6965
7:15:42,72 --> 7:15:43,93
approaches a bit.


6966
7:15:43,93 --> 7:15:45,49
TAO XIE: OK, very
good question.


6967
7:15:45,49 --> 7:15:48,36
So in a code contract, like
pre-, post-conditional design


6968
7:15:48,36 --> 7:15:51,61
by contract, you write the pre-,
post-conditions in the


6969
7:15:51,61 --> 7:15:53,35
production code.


6970
7:15:53,35 --> 7:15:58,55
So typically, people would write
mostly preconditions.


6971
7:15:58,55 --> 7:16:2,5
And very few people would
write post-conditions.


6972
7:16:2,5 --> 7:16:2,32
Why?


6973
7:16:2,32 --> 7:16:5,99
Because it's very difficult to
write post-conditions because


6974
7:16:5,99 --> 7:16:9,18
it's very complicated to capture
the behavior of that


6975
7:16:9,18 --> 7:16:11,2
particular piece of code.


6976
7:16:11,2 --> 7:16:13,85
If you write parameter unit
tests, yeah, you also have


6977
7:16:13,85 --> 7:16:15,12
assumptions and assertions.


6978
7:16:15,12 --> 7:16:18,63
Notice here, the assertion there
would be specific to the


6979
7:16:18,63 --> 7:16:22,17
scenario that you constrain,
with the method sequences in


6980
7:16:22,17 --> 7:16:25,11
the middle and assumptions
that you put in.


6981
7:16:25,11 --> 7:16:27,44
So that you have a much
easier time for you


6982
7:16:27,44 --> 7:16:29,6
to specify the behavior.


6983
7:16:29,6 --> 7:16:34,14
But indeed, code contract would
have more applicable


6984
7:16:34,14 --> 7:16:36,68
scope or testing different
situations only [INAUDIBLE]


6985
7:16:36,68 --> 7:16:37,71
the piece of code.


6986
7:16:37,71 --> 7:16:40,64
Parameter unit test would be
just applicable on the


6987
7:16:40,64 --> 7:16:43,25
scenario that you specify
there with whatever


6988
7:16:43,25 --> 7:16:44,36
test data coming in.


6989
7:16:44,36 --> 7:16:47,45
So I think that's a tradeoff
that we are making.


6990
7:16:47,45 --> 7:16:49,37
I mean, the design by contract
has been going


6991
7:16:49,37 --> 7:16:50,58
on for quite a while.


6992
7:16:50,58 --> 7:16:54,78
But we haven't seen enough
practitioners take up


6993
7:16:54,78 --> 7:16:55,89
substantially.


6994
7:16:55,89 --> 7:16:59,5
Hopefully, parameter unit test
would allow people to actually


6995
7:16:59,5 --> 7:17:1,67
get some benefits of these
formal methods.


6996
7:17:1,67 --> 7:17:4,42
But at the same time, they
are still following their


6997
7:17:4,42 --> 7:17:6,64
traditional practice of
doing unit testing,


6998
7:17:6,64 --> 7:17:8,13
writing unit tests.


6999
7:17:8,13 --> 7:17:8,81
OK, thank you.


7000
7:17:8,81 --> 7:17:9,16
TONY VOELLM: OK, great.


7001
7:17:9,16 --> 7:17:9,68
Thank you, Tao.


7002
7:17:9,68 --> 7:17:10,95
TAO XIE: Great Thank you.


7003
7:17:10,95 --> 7:17:11,777
TONY VOELLM: Thank you.


7004
7:17:11,777 --> 7:17:18,25
[APPLAUSE]


7005
7:17:18,25 --> 7:17:20,65
TONY VOELLM: So this next
speaker up I believe has


7006
7:17:20,65 --> 7:17:24,94
spoken at more GTACs
than anybody else.


7007
7:17:24,94 --> 7:17:27,2
He probably does not need
an introduction,


7008
7:17:27,2 --> 7:17:28,64
but I will do one.


7009
7:17:28,64 --> 7:17:32,2
This is Simon Stewart from
Facebook, and he is going to


7010
7:17:32,2 --> 7:17:36,3
talk to us about how Facebook
tests Facebook on Android.


7011
7:17:36,3 --> 7:17:38,35
And so with that, I'll
hand it off to you.


7012
7:17:38,35 --> 7:17:38,7
Thank you.


7013
7:17:38,7 --> 7:17:39,672
SIMON STEWART: Brilliant.


7014
7:17:39,672 --> 7:17:45,99
[APPLAUSE]


7015
7:17:45,99 --> 7:17:48,21
SIMON STEWART: Thank you very
much for that introduction.


7016
7:17:48,21 --> 7:17:50,17
Yes, i think I have
spoken at more of


7017
7:17:50,17 --> 7:17:51,92
these than anyone else.


7018
7:17:51,92 --> 7:17:53,48
This is the one where
I snatch the


7019
7:17:53,48 --> 7:17:55,41
crown from James Whittaker.


7020
7:17:55,41 --> 7:17:59,4
[LAUGHTER]


7021
7:17:59,4 --> 7:18:2,6
SIMON STEWART: Sorry, James,
if you're watching.


7022
7:18:2,6 --> 7:18:6,0
Before I begin, I've been having
a fantastic day today.


7023
7:18:6,0 --> 7:18:8,18
The quality of the talks
has been amazing.


7024
7:18:8,18 --> 7:18:11,2
And the thing that I've really
noticed has been just the


7025
7:18:11,2 --> 7:18:13,93
awesome work the stenographers
have been doing.


7026
7:18:13,93 --> 7:18:15,72
Like when I haven't been
paying attention.


7027
7:18:15,72 --> 7:18:21,7
[APPLAUSE]


7028
7:18:21,7 --> 7:18:23,8
SIMON STEWART: And the signing
down here is phenomenal.


7029
7:18:23,8 --> 7:18:25,67
Just blown away by how well
organized this is.


7030
7:18:25,67 --> 7:18:27,11
So well done, Google.


7031
7:18:27,11 --> 7:18:29,28
Keep up the good work.


7032
7:18:29,28 --> 7:18:33,12
Yeah, so how Facebook tests
Facebook on Android.


7033
7:18:33,12 --> 7:18:35,55
If I'd been thinking carefully
when I named this


7034
7:18:35,55 --> 7:18:37,99
presentation, what I would
have done is I would have


7035
7:18:37,99 --> 7:18:41,53
called it "How Facebook Bakes
Quality Into Facebook on


7036
7:18:41,53 --> 7:18:45,28
Android." Because we don't
just test for the sake of


7037
7:18:45,28 --> 7:18:46,87
testing, right?


7038
7:18:46,87 --> 7:18:49,61
It isn't something that we sit
there and go, you know what?


7039
7:18:49,61 --> 7:18:53,24
I really fancy doing some
pointless testing today.


7040
7:18:53,24 --> 7:18:56,52
There's nothing I'd rather do.


7041
7:18:56,52 --> 7:18:58,13
Actually, sometimes I
do feel like that.


7042
7:18:58,13 --> 7:19:1,7
But it's only when it's
a really slow day.


7043
7:19:1,7 --> 7:19:2,83
Why are we doing this testing?


7044
7:19:2,83 --> 7:19:5,81
We're doing it to bake quality
into our apps.


7045
7:19:5,81 --> 7:19:9,85
We can't bolt quality onto an
application at the very, very


7046
7:19:9,85 --> 7:19:11,18
last minute.


7047
7:19:11,18 --> 7:19:13,62
We can't bake security in at the
very last minute, either.


7048
7:19:13,62 --> 7:19:15,86
We can't bake performance
in at the last minute.


7049
7:19:15,86 --> 7:19:18,26
These are things that we need to
be thinking of all the way


7050
7:19:18,26 --> 7:19:21,68
through the life cycle
of the application.


7051
7:19:21,68 --> 7:19:27,76
So yes, how Facebook tests
Facebook on Android.


7052
7:19:27,76 --> 7:19:31,47
So let me take you
back to 2012.


7053
7:19:31,47 --> 7:19:35,56
It was a long, long time ago
in a galaxy right here.


7054
7:19:35,56 --> 7:19:39,11
The Facebook app on Android,
it worked.


7055
7:19:39,11 --> 7:19:41,61
It was kind of fun.


7056
7:19:41,61 --> 7:19:46,4
And it also had really, really,
really lousy user


7057
7:19:46,4 --> 7:19:47,96
experience.


7058
7:19:47,96 --> 7:19:51,24
Here's a quote from Mark here
going, "We were never able to


7059
7:19:51,24 --> 7:19:52,68
get the quality we wanted.


7060
7:19:52,68 --> 7:19:56,39
Looking back, that's probably
one of the biggest, if not the


7061
7:19:56,39 --> 7:19:58,5
biggest, mistake we made."


7062
7:19:58,5 --> 7:20:3,54
And why was the performance of
the application so appalling?


7063
7:20:3,54 --> 7:20:5,22
Well, actually, it
wasn't that bad.


7064
7:20:5,22 --> 7:20:7,9
But what we were doing is a
pattern that's fairly common


7065
7:20:7,9 --> 7:20:10,59
in the world of mobile
applications.


7066
7:20:10,59 --> 7:20:13,39
And that's to use the WebViews
extensively.


7067
7:20:13,39 --> 7:20:15,79
Facebook was a web company.


7068
7:20:15,79 --> 7:20:17,41
We like to be able to
release software.


7069
7:20:17,41 --> 7:20:18,8
We do it twice a day now.


7070
7:20:18,8 --> 7:20:22,7
We push to our live website
twice a day.


7071
7:20:22,7 --> 7:20:24,39
That allows us to iterate on
things really quickly.


7072
7:20:24,39 --> 7:20:27,18
It allows us to make a series
of chronic and awful and


7073
7:20:27,18 --> 7:20:29,8
terrible mistakes, realize that
we've done something, and


7074
7:20:29,8 --> 7:20:31,26
fix it in the next day.


7075
7:20:31,26 --> 7:20:36,68
Problem is that you can't
do that on a mobile app.


7076
7:20:36,68 --> 7:20:40,18
Someone downloads the app, and
then they're stuck with it.


7077
7:20:40,18 --> 7:20:42,79
If you've got a bug in that
application, they may never


7078
7:20:42,79 --> 7:20:46,71
update again, which is a
horrific place to be in.


7079
7:20:46,71 --> 7:20:48,31
So we'd like to retain
some flexibility.


7080
7:20:48,31 --> 7:20:50,455
And the way we did that
is we used WebView.


7081
7:20:50,455 --> 7:20:55,87
And the WebViews on Android
and iOS are sub-optimal, I


7082
7:20:55,87 --> 7:20:59,6
think is a way to
describe them.


7083
7:20:59,6 --> 7:21:1,8
There's a number of problems
with them, not least of which


7084
7:21:1,8 --> 7:21:5,38
is they're like no other
browser out there.


7085
7:21:5,38 --> 7:21:9,7
The Android one is based on
the stock Android browser,


7086
7:21:9,7 --> 7:21:13,15
which is not Chrome, unless
you're on Jelly Bean.


7087
7:21:13,15 --> 7:21:15,0
And if you're on Jelly Bean,
actually, the browser is


7088
7:21:15,0 --> 7:21:16,53
Chrome, and the WebView is


7089
7:21:16,53 --> 7:21:18,37
something completely different.


7090
7:21:18,37 --> 7:21:22,25
The JavaScript engines tend
to behave appallingly.


7091
7:21:22,25 --> 7:21:23,335
They're very slow.


7092
7:21:23,335 --> 7:21:25,11
They're tedious.


7093
7:21:25,11 --> 7:21:26,9
And so what we were doing is we
were making each of these


7094
7:21:26,9 --> 7:21:29,43
WebViews to allow us to
iterate more quickly.


7095
7:21:29,43 --> 7:21:32,3
And it was just leading
to a really poor


7096
7:21:32,3 --> 7:21:33,61
experience for our users.


7097
7:21:33,61 --> 7:21:35,0
So we had to stop.


7098
7:21:35,0 --> 7:21:36,2
We reassessed.


7099
7:21:36,2 --> 7:21:39,76
What we did is we decided we
were going to make mobile a


7100
7:21:39,76 --> 7:21:41,1
first-class experience.


7101
7:21:41,1 --> 7:21:44,2



7102
7:21:44,2 --> 7:21:46,16
That went the wrong way.


7103
7:21:46,16 --> 7:21:49,68
I could do the entire talk
in reverse, by the way.


7104
7:21:49,68 --> 7:21:51,82
Start on the final slide, begin
with your questions, and


7105
7:21:51,82 --> 7:21:53,7
then just make it
up from there.


7106
7:21:53,7 --> 7:21:55,7



7107
7:21:55,7 --> 7:21:58,19
Hands up if you'd like
me to do that.


7108
7:21:58,19 --> 7:21:59,52
There's one hand.


7109
7:21:59,52 --> 7:22:0,99
Two hands, brilliant.


7110
7:22:0,99 --> 7:22:2,5
Next year.


7111
7:22:2,5 --> 7:22:6,23
I'll be invited back for
sure after this.


7112
7:22:6,23 --> 7:22:8,87
So what we did is we decided
we were going to take our


7113
7:22:8,87 --> 7:22:12,74
engineers, and we were going
to train them up on mobile.


7114
7:22:12,74 --> 7:22:15,49
And this graph here has the
numbers removed, but there's a


7115
7:22:15,49 --> 7:22:18,54
total of about 1,400 engineers
at Facebook.


7116
7:22:18,54 --> 7:22:21,28
Not all of them contribute
to our mobile codebase.


7117
7:22:21,28 --> 7:22:23,37
But what happened is
it was all going


7118
7:22:23,37 --> 7:22:24,9
along fairly regularly.


7119
7:22:24,9 --> 7:22:26,735
And then we went, what we
need to do, we need


7120
7:22:26,735 --> 7:22:28,42
to put mobile first.


7121
7:22:28,42 --> 7:22:29,92
We took our PHP developers.


7122
7:22:29,92 --> 7:22:31,18
We ran them through
training courses.


7123
7:22:31,18 --> 7:22:32,69
We educated them.


7124
7:22:32,69 --> 7:22:35,93
We hired people in who were
skilled at Android and mobile


7125
7:22:35,93 --> 7:22:36,73
development.


7126
7:22:36,73 --> 7:22:38,41
And that's the result.


7127
7:22:38,41 --> 7:22:41,81
We had this massive uptick in
the number of engineers


7128
7:22:41,81 --> 7:22:44,51
committing code to our
mobile codebases.


7129
7:22:44,51 --> 7:22:45,59
That's a fantastic thing.


7130
7:22:45,59 --> 7:22:49,78
We're now moving a lot faster.


7131
7:22:49,78 --> 7:22:52,37
The important thing, though,
is that it's engineers


7132
7:22:52,37 --> 7:22:54,79
contributing to our
mobile codebase.


7133
7:22:54,79 --> 7:22:58,44
There are no Android team.


7134
7:22:58,44 --> 7:23:1,65
What I mean to say is, there is
no longer an Android team.


7135
7:23:1,65 --> 7:23:2,67
We tried to do that.


7136
7:23:2,67 --> 7:23:5,45
We tried to have a group of
people who were responsible.


7137
7:23:5,45 --> 7:23:7,62
We called them the Core
Android Team.


7138
7:23:7,62 --> 7:23:8,98
And they were going to be
awesome, and they were going


7139
7:23:8,98 --> 7:23:12,94
to somehow keep up with the
flood of new features coming


7140
7:23:12,94 --> 7:23:14,83
into the web.


7141
7:23:14,83 --> 7:23:16,28
And that didn't work.


7142
7:23:16,28 --> 7:23:18,27
So what we did is we
took a step back.


7143
7:23:18,27 --> 7:23:20,65
We reassessed again.


7144
7:23:20,65 --> 7:23:23,59
And now what happens is each
of the teams producing a


7145
7:23:23,59 --> 7:23:27,97
feature own that feature on
every platform it's on.


7146
7:23:27,97 --> 7:23:31,1
So if you own pictures, you own
it on the web, the mobile


7147
7:23:31,1 --> 7:23:33,37
web, iOS, Android.


7148
7:23:33,37 --> 7:23:37,24
So that's far easier for people
to keep things in sync.


7149
7:23:37,24 --> 7:23:39,1
There's probably people
on those teams who are


7150
7:23:39,1 --> 7:23:41,43
specialized on Android or iOS.


7151
7:23:41,43 --> 7:23:44,58
But there isn't a group of
people who are responsible for


7152
7:23:44,58 --> 7:23:47,25
desperately trying to ape
features from the web in a


7153
7:23:47,25 --> 7:23:48,72
mobile client.


7154
7:23:48,72 --> 7:23:51,57
And that allows us to keep
parity in place.


7155
7:23:51,57 --> 7:23:54,94
And that means that users get
a far better experience.


7156
7:23:54,94 --> 7:23:57,48
If something appears on the web,
chances are it will also


7157
7:23:57,48 --> 7:24:1,49
appear on the mobile client
relatively soon after that.


7158
7:24:1,49 --> 7:24:2,94
We do have spoons.


7159
7:24:2,94 --> 7:24:4,44
So there is no Android team.


7160
7:24:4,44 --> 7:24:7,98
We do have spoons.


7161
7:24:7,98 --> 7:24:9,43
So what's a developer's
day like?


7162
7:24:9,43 --> 7:24:11,73
Let's say you're on one of
these feature teams, and


7163
7:24:11,73 --> 7:24:13,58
you're going to do something.


7164
7:24:13,58 --> 7:24:16,81
How do we bake quality
into the application?


7165
7:24:16,81 --> 7:24:20,42
It's done all the way
through the process.


7166
7:24:20,42 --> 7:24:22,86
So let's begin with
how we build.


7167
7:24:22,86 --> 7:24:24,28
That seems to be quite
an important


7168
7:24:24,28 --> 7:24:26,64
thing to do with software.


7169
7:24:26,64 --> 7:24:29,5
We need to build it.


7170
7:24:29,5 --> 7:24:33,71
So we use Git at the moment
for source control.


7171
7:24:33,71 --> 7:24:35,22
It's a DVCS.


7172
7:24:35,22 --> 7:24:37,58
And so what we do is we
have a central repo.


7173
7:24:37,58 --> 7:24:40,67
And that seemed like
a good idea.


7174
7:24:40,67 --> 7:24:42,55
Everyone works on their
local machine.


7175
7:24:42,55 --> 7:24:46,5
There are two branches that
we care about day to day.


7176
7:24:46,5 --> 7:24:47,71
Google I know only have one.


7177
7:24:47,71 --> 7:24:50,7
And that's because none of
their tests fail because


7178
7:24:50,7 --> 7:24:52,52
they've got the presubmit,
and it's awesome.


7179
7:24:52,52 --> 7:24:56,3
We haven't got the presubmit,
so people check in.


7180
7:24:56,3 --> 7:24:58,26
So there are two branches
that people care about.


7181
7:24:58,26 --> 7:25:0,51
The first one is master.


7182
7:25:0,51 --> 7:25:4,75
That represents not a villain
from "Doctor Who," but the


7183
7:25:4,75 --> 7:25:7,83
most recent version.


7184
7:25:7,83 --> 7:25:10,215
You can see who enjoys
Britsh sci-fi here.


7185
7:25:10,215 --> 7:25:12,73



7186
7:25:12,73 --> 7:25:14,41
It's the latest version
of the code.


7187
7:25:14,41 --> 7:25:18,33
So master has everything in it
that has been committed to the


7188
7:25:18,33 --> 7:25:19,15
code base so far.


7189
7:25:19,15 --> 7:25:21,64
It's a linear history.


7190
7:25:21,64 --> 7:25:25,21
What we also have is a moving
tag called stable that


7191
7:25:25,21 --> 7:25:28,34
represents the last time that
we were sure that our unit


7192
7:25:28,34 --> 7:25:29,83
tests were passing.


7193
7:25:29,83 --> 7:25:33,7
So there's master, and
there's stable.


7194
7:25:33,7 --> 7:25:35,12
That's kind fun.


7195
7:25:35,12 --> 7:25:38,8
And all this code is checked
out, for Android at least, in


7196
7:25:38,8 --> 7:25:43,5
a single tree with effectively
three or four directories up


7197
7:25:43,5 --> 7:25:44,38
at the top.


7198
7:25:44,38 --> 7:25:48,15
Java, Java tests, because you
never mix tests and Java code.


7199
7:25:48,15 --> 7:25:50,89
It's just not the thing
that you do.


7200
7:25:50,89 --> 7:25:54,36
Third-party libraries, we keep
those out of the tree.


7201
7:25:54,36 --> 7:25:56,23
And resources used
for Android.


7202
7:25:56,23 --> 7:25:59,422



7203
7:25:59,422 --> 7:26:1,63
OK, I've got my drink
of water here.


7204
7:26:1,63 --> 7:26:4,15
Yes, so it's all one tree.


7205
7:26:4,15 --> 7:26:6,98
That's kind of fun because we've
got more than one mobile


7206
7:26:6,98 --> 7:26:8,74
app that we make for Android.


7207
7:26:8,74 --> 7:26:10,22
And there's Instagram
in there.


7208
7:26:10,22 --> 7:26:11,1
There's a Facebook app.


7209
7:26:11,1 --> 7:26:11,91
There's a messenger app.


7210
7:26:11,91 --> 7:26:13,1
There's a camera app.


7211
7:26:13,1 --> 7:26:21,31
If you download an app for
Android from Facebook, it's


7212
7:26:21,31 --> 7:26:22,71
all been built from that tree.


7213
7:26:22,71 --> 7:26:28,188



7214
7:26:28,188 --> 7:26:32,52
I'll throw that all over
my laptop later.


7215
7:26:32,52 --> 7:26:34,5
So--


7216
7:26:34,5 --> 7:26:36,82
yes, people know
Murphy as well.


7217
7:26:36,82 --> 7:26:38,18
So what does it look
like when you begin


7218
7:26:38,18 --> 7:26:38,95
working on a feature?


7219
7:26:38,95 --> 7:26:44,7
Well, what you do is you're
probably on the stable branch.


7220
7:26:44,7 --> 7:26:46,38
You create a new branch for
your fancy feature.


7221
7:26:46,38 --> 7:26:50,7
Hackity hack, hackity hack,
hackity hack, you get commit.


7222
7:26:50,7 --> 7:26:52,44
And you create a new feature.


7223
7:26:52,44 --> 7:26:55,52
But while you've been working,
there have been N other


7224
7:26:55,52 --> 7:26:57,19
developers also checking
in code.


7225
7:26:57,19 --> 7:26:59,66
So periodically, you want to
grab the work they're doing


7226
7:26:59,66 --> 7:27:1,27
and rebase.


7227
7:27:1,27 --> 7:27:3,54
So you're always working
on the top of the tree.


7228
7:27:3,54 --> 7:27:6,57
You go hackity hack, hackity
hack, hackity hack.


7229
7:27:6,57 --> 7:27:8,97
When you're ready, you commit.


7230
7:27:8,97 --> 7:27:10,78
And then you do a rebase.


7231
7:27:10,78 --> 7:27:14,1
So what we like to do is while
you're developing locally on a


7232
7:27:14,1 --> 7:27:16,77
branch of your own, you
can have as many


7233
7:27:16,77 --> 7:27:18,15
branches as you want.


7234
7:27:18,15 --> 7:27:21,36
You can have your commital
organized any way you want.


7235
7:27:21,36 --> 7:27:24,79
But when we push it into master,
we want a logical


7236
7:27:24,79 --> 7:27:26,7
change to go into
our codebase.


7237
7:27:26,7 --> 7:27:29,27
We don't want the individual
steps you did.


7238
7:27:29,27 --> 7:27:31,23
Now there's a number of reasons
for doing that.


7239
7:27:31,23 --> 7:27:34,2
The first one, a logical change
is a lot easier for


7240
7:27:34,2 --> 7:27:35,59
other people to comprehend.


7241
7:27:35,59 --> 7:27:38,33
If you want people to understand
what you're doing,


7242
7:27:38,33 --> 7:27:40,33
what you need to is explain
why you're doing it.


7243
7:27:40,33 --> 7:27:42,475
That helps increase the quality
of the code when


7244
7:27:42,475 --> 7:27:44,45
someone comes and has
a look at things.


7245
7:27:44,45 --> 7:27:48,37
And second of all, if we need
to yank your changes, it's a


7246
7:27:48,37 --> 7:27:51,34
lot easier for us to do that if
we can see the one logical


7247
7:27:51,34 --> 7:27:53,59
change that went in, rather than
the intermediate steps,


7248
7:27:53,59 --> 7:27:55,68
particularly if you're like me
and you work on two or three


7249
7:27:55,68 --> 7:27:57,41
things at the same time.


7250
7:27:57,41 --> 7:28:1,7
So we always just squash our
commit before we run this


7251
7:28:1,7 --> 7:28:2,95
command, arc diff.


7252
7:28:2,95 --> 7:28:5,99



7253
7:28:5,99 --> 7:28:10,35
So how do we write
all this code?


7254
7:28:10,35 --> 7:28:11,66
We use IntelliJ.


7255
7:28:11,66 --> 7:28:17,6
Its Java, right, so there's two
choices of IDE, IntelliJ


7256
7:28:17,6 --> 7:28:20,53
or Eclipse.


7257
7:28:20,53 --> 7:28:22,57
Both of them are perfectly
reasonable choices.


7258
7:28:22,57 --> 7:28:24,61
But the way that we've
structured our codebase means


7259
7:28:24,61 --> 7:28:27,3
that IntelliJ is actually a
really good fit for us.


7260
7:28:27,3 --> 7:28:30,46
And from a massively biased
point of view, I prefer it.


7261
7:28:30,46 --> 7:28:34,3



7262
7:28:34,3 --> 7:28:37,72
And Facebook is small enough
that, actually, an individual


7263
7:28:37,72 --> 7:28:41,73
choice and someone advocating
can really make


7264
7:28:41,73 --> 7:28:43,51
a difference there.


7265
7:28:43,51 --> 7:28:45,8
So you're using IntelliJ.


7266
7:28:45,8 --> 7:28:48,36
You want to make sure
the code is good.


7267
7:28:48,36 --> 7:28:50,72
You want to make sure the
code is testable.


7268
7:28:50,72 --> 7:28:53,855
How do you make sure the
code is testable?


7269
7:28:53,855 --> 7:28:54,99
You use what?


7270
7:28:54,99 --> 7:28:57,28
You use dependency injection.


7271
7:28:57,28 --> 7:29:1,7
So when you're doing
object-oriented software, OO


7272
7:29:1,7 --> 7:29:3,66
software, you've got
collaborators.


7273
7:29:3,66 --> 7:29:5,23
The class that you're working
on collaborates


7274
7:29:5,23 --> 7:29:6,0
with a bunch of things.


7275
7:29:6,0 --> 7:29:8,11
And there are two ways that
it can get hold of its


7276
7:29:8,11 --> 7:29:9,19
collaborators.


7277
7:29:9,19 --> 7:29:13,22
The first way was popularized by
J2EE back in the late '90s,


7278
7:29:13,22 --> 7:29:16,36
early 2000s, and was
service location.


7279
7:29:16,36 --> 7:29:20,19
You had this big thing, and you
went into it in the middle


7280
7:29:20,19 --> 7:29:20,68
of your method.


7281
7:29:20,68 --> 7:29:23,57
And you went, thing, give me
a database connection.


7282
7:29:23,57 --> 7:29:25,34
And thing would look at you
and go, here's a database


7283
7:29:25,34 --> 7:29:25,92
connection.


7284
7:29:25,92 --> 7:29:28,8
And that would be fine.


7285
7:29:28,8 --> 7:29:35,39
And then 2003, 2002, early
2000s, this dependency


7286
7:29:35,39 --> 7:29:38,82
injection phrase started
becoming more popular.


7287
7:29:38,82 --> 7:29:42,2
And the major difference with
that is that rather than


7288
7:29:42,2 --> 7:29:45,57
having the method go, thing,
give me one of these, the


7289
7:29:45,57 --> 7:29:49,58
method signature or the class
under test somehow accepted


7290
7:29:49,58 --> 7:29:53,28
its collaborators from the
thing that created it.


7291
7:29:53,28 --> 7:29:55,68
So there's constructor-based
dependency injection, where


7292
7:29:55,68 --> 7:29:57,74
all your collaborators
are passed in at


7293
7:29:57,74 --> 7:29:59,15
construction time.


7294
7:29:59,15 --> 7:30:2,9
And there's also setter-based
dependency injection.


7295
7:30:2,9 --> 7:30:5,33
Also some magic-based dependency
injection, where


7296
7:30:5,33 --> 7:30:8,69
you annotate things and then
Guava or Spring or whatever it


7297
7:30:8,69 --> 7:30:12,17
is that you like suddenly
populates fields that you have


7298
7:30:12,17 --> 7:30:13,5
no idea how it did it.


7299
7:30:13,5 --> 7:30:15,79
But it's done it
somehow, right?


7300
7:30:15,79 --> 7:30:18,32
Now the advantage with
dependency injection over


7301
7:30:18,32 --> 7:30:22,16
service location is it makes
your collaborators really,


7302
7:30:22,16 --> 7:30:24,28
really obvious.


7303
7:30:24,28 --> 7:30:26,9
It encourages you to think
about who your class is


7304
7:30:26,9 --> 7:30:28,27
collaborating with.


7305
7:30:28,27 --> 7:30:32,21
I remember I was on one project,
not at Facebook, and


7306
7:30:32,21 --> 7:30:34,376
they were using service
location, and I ripped out all


7307
7:30:34,376 --> 7:30:37,15
the singletons, and I added
every single thing they


7308
7:30:37,15 --> 7:30:39,54
depended on till they construct
a signature.


7309
7:30:39,54 --> 7:30:44,7
And 14 arguments later, somebody
went, that's a really


7310
7:30:44,7 --> 7:30:45,29
big signature.


7311
7:30:45,29 --> 7:30:47,11
Yes, yes it is.


7312
7:30:47,11 --> 7:30:48,72
Do you think we've got
too many roles and


7313
7:30:48,72 --> 7:30:49,13
responsibilities?


7314
7:30:49,13 --> 7:30:51,36
I went, I don't know.


7315
7:30:51,36 --> 7:30:53,85
We should probably slim that
signature down somehow.


7316
7:30:53,85 --> 7:30:55,87
So yes, how are we
going to do that?


7317
7:30:55,87 --> 7:30:57,985
Thinking what we'll do is we'll
split the class up and


7318
7:30:57,985 --> 7:30:59,96
have fewer responsibilities.


7319
7:30:59,96 --> 7:31:1,9
And what they said to
me is they went, ah,


7320
7:31:1,9 --> 7:31:3,2
we'll pass in a map.


7321
7:31:3,2 --> 7:31:8,502
[LAUGHTER]


7322
7:31:8,502 --> 7:31:11,89



7323
7:31:11,89 --> 7:31:13,52
SIMON STEWART: So yes,
dependency injection, a


7324
7:31:13,52 --> 7:31:17,67
really, really useful
way of ensuring that


7325
7:31:17,67 --> 7:31:17,91
your code is testable.


7326
7:31:17,91 --> 7:31:20,7
It makes it really easy to swap
out collaborators at test


7327
7:31:20,7 --> 7:31:21,95
time, and that's vital.


7328
7:31:21,95 --> 7:31:24,9



7329
7:31:24,9 --> 7:31:26,88
So you've written your
code in IntelliJ.


7330
7:31:26,88 --> 7:31:27,435
That's nice.


7331
7:31:27,435 --> 7:31:29,96
You've used dependency
injection like a good


7332
7:31:29,96 --> 7:31:31,8
developer should.


7333
7:31:31,8 --> 7:31:35,11
You probably want to
build your code.


7334
7:31:35,11 --> 7:31:38,59
Now we use a tool called
Buck at Facebook for


7335
7:31:38,59 --> 7:31:41,33
building our code.


7336
7:31:41,33 --> 7:31:44,2
Why do we use a tool
that nobody else in


7337
7:31:44,2 --> 7:31:45,755
the world yet uses?


7338
7:31:45,755 --> 7:31:48,74



7339
7:31:48,74 --> 7:31:50,69
There's a number of
reasons for it.


7340
7:31:50,69 --> 7:31:54,41
What we want is we wanted a tool
that had minimal overhead


7341
7:31:54,41 --> 7:31:57,5
when we added a new library
or module to the project.


7342
7:31:57,5 --> 7:31:59,48
Our original [INAUDIBLE]
solution had a lot of


7343
7:31:59,48 --> 7:32:0,36
boilerplate code.


7344
7:32:0,36 --> 7:32:2,4
It had lots of submodules.


7345
7:32:2,4 --> 7:32:6,19
If you've used Maven, the way
that you would do a new module


7346
7:32:6,19 --> 7:32:7,93
is probably you'd have a
top-level library, and then


7347
7:32:7,93 --> 7:32:9,81
you'd have some sort of
POM that would point


7348
7:32:9,81 --> 7:32:11,14
to it and who knows.


7349
7:32:11,14 --> 7:32:12,46
It's ugh.


7350
7:32:12,46 --> 7:32:14,1
We want to keep boilerplate
out of our codebase.


7351
7:32:14,1 --> 7:32:17,99
Boilerplate is things that
machines should do for us.


7352
7:32:17,99 --> 7:32:20,47
But we also wanted the
build tool to be


7353
7:32:20,47 --> 7:32:21,82
friendly to the IDs.


7354
7:32:21,82 --> 7:32:24,13
We'd structured our code in a
way that actually plays really


7355
7:32:24,13 --> 7:32:28,19
nicely with IntelliJ, and we
don't want to lose that.


7356
7:32:28,19 --> 7:32:32,5
We want really, really
fast, clean builds.


7357
7:32:32,5 --> 7:32:36,14
But we want our incremental
builds to be even faster


7358
7:32:36,14 --> 7:32:40,19
because as Ari said right at
the beginning of the day,


7359
7:32:40,19 --> 7:32:42,85
doing a clean is a bug
in your build system.


7360
7:32:42,85 --> 7:32:45,99
You should never, ever
need to do that.


7361
7:32:45,99 --> 7:32:48,28
So yes, we want faster
incremental builds.


7362
7:32:48,28 --> 7:32:51,1
And what we need to do is we
ahead of time don't know all


7363
7:32:51,1 --> 7:32:53,2
the things that people are
going to try and build.


7364
7:32:53,2 --> 7:32:57,27
So we want to support adding
ad hoc build steps.


7365
7:32:57,27 --> 7:33:1,69
So Buck, our build system, has
three really important


7366
7:33:1,69 --> 7:33:3,28
concepts in the middle of it.


7367
7:33:3,28 --> 7:33:5,602
The first is a build rule.


7368
7:33:5,602 --> 7:33:7,56
Now that's a procedure
for-- oh, you can


7369
7:33:7,56 --> 7:33:9,38
all read, can't you?


7370
7:33:9,38 --> 7:33:10,1
Yeah, OK.


7371
7:33:10,1 --> 7:33:12,54
It's a procedure for producing
output files from input files.


7372
7:33:12,54 --> 7:33:14,97
So you list a series of sources
and dependencies.


7373
7:33:14,97 --> 7:33:17,85
And the build rule runs.


7374
7:33:17,85 --> 7:33:19,0
And you get the outputs.


7375
7:33:19,0 --> 7:33:20,6
You get one output.


7376
7:33:20,6 --> 7:33:21,17
That's the invariant
of the system.


7377
7:33:21,17 --> 7:33:24,63
You can have at most one output
from a build rule.


7378
7:33:24,63 --> 7:33:27,33
A build file contains a
series of these rules.


7379
7:33:27,33 --> 7:33:30,22
And typically, it's called BUCK
in all capitals, which is


7380
7:33:30,22 --> 7:33:35,1
great unless you're on a
case-insensitive file system.


7381
7:33:35,1 --> 7:33:36,88
So we declare all the
rules in that.


7382
7:33:36,88 --> 7:33:39,83
And if we want to have a
dependency between two rules,


7383
7:33:39,83 --> 7:33:43,43
we use a label to get to the
build rule, and call that a


7384
7:33:43,43 --> 7:33:45,3
build target.


7385
7:33:45,3 --> 7:33:45,9
OK?


7386
7:33:45,9 --> 7:33:48,83
So it's a string identifier
for a build rule.


7387
7:33:48,83 --> 7:33:51,65
This is what a target
looks like.


7388
7:33:51,65 --> 7:33:54,3
I like to read the slash slash
as "from the root of the


7389
7:33:54,3 --> 7:33:58,4
repository." So from the top
level, there is a directory


7390
7:33:58,4 --> 7:34:0,98
called java, com,
Facebook, share.


7391
7:34:0,98 --> 7:34:2,53
Excellent, colon.


7392
7:34:2,53 --> 7:34:5,89
In which there is BUCK
file, UI, with a


7393
7:34:5,89 --> 7:34:7,902
build rule called UI.


7394
7:34:7,902 --> 7:34:12,2
So this gives us a completely
declarative path to the thing


7395
7:34:12,2 --> 7:34:15,335
that we're attempting to
build, which is nice.


7396
7:34:15,335 --> 7:34:18,17



7397
7:34:18,17 --> 7:34:20,32
By the way, if you've ever
used the Selenium build


7398
7:34:20,32 --> 7:34:23,82
system, it uses exactly the
same syntax as that.


7399
7:34:23,82 --> 7:34:24,68
It's called crazy-fun.


7400
7:34:24,68 --> 7:34:28,84
If you work for Twitter, pants
uses, I think, exactly the


7401
7:34:28,84 --> 7:34:29,54
same syntax.


7402
7:34:29,54 --> 7:34:30,97
Is that right?


7403
7:34:30,97 --> 7:34:31,95
Yes, it is.


7404
7:34:31,95 --> 7:34:32,9
Brilliant.


7405
7:34:32,9 --> 7:34:34,11
Good.


7406
7:34:34,11 --> 7:34:36,53
I think it's because there
is a sort of diaspora of


7407
7:34:36,53 --> 7:34:42,54
ex-Googlers who pine for the
amazing build system that Ari


7408
7:34:42,54 --> 7:34:43,8
talked about.


7409
7:34:43,8 --> 7:34:48,64
[APPLAUSE]


7410
7:34:48,64 --> 7:34:50,63
SIMON STEWART: So yeah, what
does a build file look like?


7411
7:34:50,63 --> 7:34:56,74
[LAUGHTER]


7412
7:34:56,74 --> 7:34:58,38
SIMON STEWART: It
looks like that.


7413
7:34:58,38 --> 7:35:1,54
This is how we build our
library for Android.


7414
7:35:1,54 --> 7:35:4,45
They're called UI, so the
one that we had before.


7415
7:35:4,45 --> 7:35:7,86
We do a recursive glob over
the directory structure


7416
7:35:7,86 --> 7:35:10,8
underneath, where this
rule is declared.


7417
7:35:10,8 --> 7:35:11,33
So it's not over the
entire tree.


7418
7:35:11,33 --> 7:35:14,7
It's just over the subtree
beneath this.


7419
7:35:14,7 --> 7:35:16,65
We have a series of
dependencies, which are


7420
7:35:16,65 --> 7:35:17,87
declared there.


7421
7:35:17,87 --> 7:35:18,86
And visibility.


7422
7:35:18,86 --> 7:35:23,46
So by default, no one else can
see a build rule outside of


7423
7:35:23,46 --> 7:35:25,85
the build file you're
declared in.


7424
7:35:25,85 --> 7:35:29,65
So you can have dependencies
within a build file.


7425
7:35:29,65 --> 7:35:32,26
But if you step outside, you
need to make it visible.


7426
7:35:32,26 --> 7:35:35,54
You can either make it public,
anyone can use this thing, or


7427
7:35:35,54 --> 7:35:39,64
you can limit the visibility to
certain subsets of rules.


7428
7:35:39,64 --> 7:35:44,1
In order to make it nice and
easy to have a library that


7429
7:35:44,1 --> 7:35:45,95
you can depend on in the rest
of your code without needing


7430
7:35:45,95 --> 7:35:48,71
to be aware of how that library
is structured, with


7431
7:35:48,71 --> 7:35:50,73
the Java library, you can also
export your dependencies.


7432
7:35:50,73 --> 7:35:53,1
So you can say, look, if
you depend on me, then


7433
7:35:53,1 --> 7:35:56,83
transitively, you get all
my dependencies as well.


7434
7:35:56,83 --> 7:35:58,94
Which is a nice way of
composing everything.


7435
7:35:58,94 --> 7:36:2,19



7436
7:36:2,19 --> 7:36:3,44
Who knows Python?


7437
7:36:3,44 --> 7:36:6,25



7438
7:36:6,25 --> 7:36:8,18
What language does
that look like?


7439
7:36:8,18 --> 7:36:10,52
It's a leading question.


7440
7:36:10,52 --> 7:36:11,94
It's Ruby.


7441
7:36:11,94 --> 7:36:14,28
No, hang on, it's Python.


7442
7:36:14,28 --> 7:36:16,99
Our build file is Python.


7443
7:36:16,99 --> 7:36:20,58
We interpret the build file
using the Python interpreter.


7444
7:36:20,58 --> 7:36:22,75
We're moving to Jython because,
you know, it would be


7445
7:36:22,75 --> 7:36:25,14
nice not to have to rely on
Python being installed on the


7446
7:36:25,14 --> 7:36:27,25
local system.


7447
7:36:27,25 --> 7:36:28,55
But yes, so it's Python.


7448
7:36:28,55 --> 7:36:31,45
And that allows us to do some
really, really nice things.


7449
7:36:31,45 --> 7:36:34,21
Like if we're missing the
ability to build a certain


7450
7:36:34,21 --> 7:36:40,54
type of target, if a build rule
should exist to build iOS


7451
7:36:40,54 --> 7:36:43,73
library, for example, we could
add it to the system using a


7452
7:36:43,73 --> 7:36:47,85
glob of rather unpleasant Python
and then just use an


7453
7:36:47,85 --> 7:36:51,36
iOS library in the rest
of our build rules.


7454
7:36:51,36 --> 7:36:54,21
And then when we modify
Buck, we can fix it.


7455
7:36:54,21 --> 7:36:55,94
And we can bake that
into the platform.


7456
7:36:55,94 --> 7:36:58,8
And that's kind of nice.


7457
7:36:58,8 --> 7:37:1,38
So we've got this ability to
modify the build system on the


7458
7:37:1,38 --> 7:37:4,52
fly in a Turing-complete
language in a completely


7459
7:37:4,52 --> 7:37:6,3
declarative build system.


7460
7:37:6,3 --> 7:37:8,39
I'm not sure how I feel about
that, but it is awfully


7461
7:37:8,39 --> 7:37:9,64
convenient.


7462
7:37:9,64 --> 7:37:12,79



7463
7:37:12,79 --> 7:37:15,15
So what we do, you
run your builds.


7464
7:37:15,15 --> 7:37:17,97
We build a directed
acyclic graph.


7465
7:37:17,97 --> 7:37:19,96
I was really pleased when I
started working on Buck


7466
7:37:19,96 --> 7:37:21,84
because it allowed me to use
some of the computer science


7467
7:37:21,84 --> 7:37:25,85
that I struggled through all the
way through university and


7468
7:37:25,85 --> 7:37:27,69
use terms like directed
acyclic graph


7469
7:37:27,69 --> 7:37:30,605
with a straight face.


7470
7:37:30,605 --> 7:37:33,98
And what we do is we analyze
that graph, and we build


7471
7:37:33,98 --> 7:37:36,54
sub-parts of the tree
in parallel.


7472
7:37:36,54 --> 7:37:38,97
So we try and build everything
as massively


7473
7:37:38,97 --> 7:37:40,95
parallel as we can.


7474
7:37:40,95 --> 7:37:44,84
And that enables our builds to
be significantly faster.


7475
7:37:44,84 --> 7:37:48,42
And then because we know that
if the inputs to one of the


7476
7:37:48,42 --> 7:37:50,57
previous steps haven't changed,
the output won't have


7477
7:37:50,57 --> 7:37:53,37
changed, we can skip
building that step.


7478
7:37:53,37 --> 7:37:55,17
We can just use the
cached output.


7479
7:37:55,17 --> 7:37:56,62
And that allows our
incremental builds


7480
7:37:56,62 --> 7:37:59,8
to be nice and fast.


7481
7:37:59,8 --> 7:38:2,86
How does IntelliJ feel about us
monkeying around on a file


7482
7:38:2,86 --> 7:38:4,76
system like this?


7483
7:38:4,76 --> 7:38:7,2
Apparently, it likes it.


7484
7:38:7,2 --> 7:38:9,5
We run a command called
Buck project.


7485
7:38:9,5 --> 7:38:11,83
And what that will do is it will
scan through the entire


7486
7:38:11,83 --> 7:38:14,78
file system for BUCK files.


7487
7:38:14,78 --> 7:38:17,64
And it will generate the
IntelliJ configs.


7488
7:38:17,64 --> 7:38:19,44
So what you do is you go,
aaah, I haven't got an


7489
7:38:19,44 --> 7:38:20,73
IntelliJ config.


7490
7:38:20,73 --> 7:38:23,6
Buck projects points
IntelliJ at it.


7491
7:38:23,6 --> 7:38:26,59
And suddenly, everything
works out quite nicely.


7492
7:38:26,59 --> 7:38:29,87
That will also set up some
exports for build rules-- for


7493
7:38:29,87 --> 7:38:31,56
test runners and things
like that.


7494
7:38:31,56 --> 7:38:35,315
So that's nice.


7495
7:38:35,315 --> 7:38:36,5
And it's fast, guys.


7496
7:38:36,5 --> 7:38:38,0
This thing is quick.


7497
7:38:38,0 --> 7:38:40,805
Because if you want people to
write tests, if you want them


7498
7:38:40,805 --> 7:38:42,91
to be using dependency
injection, if you want them to


7499
7:38:42,91 --> 7:38:45,9
be doing all these things that
we want to encourage people to


7500
7:38:45,9 --> 7:38:48,39
do, being slow doesn't help.


7501
7:38:48,39 --> 7:38:49,73
Again, [INAUDIBLE]


7502
7:38:49,73 --> 7:38:51,63
the developer who was sleeping,


7503
7:38:51,63 --> 7:38:54,186
going longer is better.


7504
7:38:54,186 --> 7:38:56,75
Longer isn't better,
shorter is better.


7505
7:38:56,75 --> 7:38:58,85
Instant is best.


7506
7:38:58,85 --> 7:39:1,81
Actually, if it could somehow
leap forward in time and give


7507
7:39:1,81 --> 7:39:3,9
you the results before you
finish writing the code, that


7508
7:39:3,9 --> 7:39:4,83
would be better still.


7509
7:39:4,83 --> 7:39:7,74
But assuming we're constrained
by the laws of physics,


7510
7:39:7,74 --> 7:39:10,25
instant is best.


7511
7:39:10,25 --> 7:39:14,34
So Buck, by default, spins up
as many threads as it can,


7512
7:39:14,34 --> 7:39:17,22
1.25 times the number of calls
in your machine, as reported


7513
7:39:17,22 --> 7:39:17,91
by Java Safe.


7514
7:39:17,91 --> 7:39:19,93
You've got hyper threading
enabled.


7515
7:39:19,93 --> 7:39:22,6
On the modern laptop, that means
you've got 10 parallel


7516
7:39:22,6 --> 7:39:26,44
builders running, four physical
cores, H with hyper


7517
7:39:26,44 --> 7:39:30,73
threading, times 1.25, 10.


7518
7:39:30,73 --> 7:39:32,56
And we found that by
doing this, we can


7519
7:39:32,56 --> 7:39:33,79
slash our build times.


7520
7:39:33,79 --> 7:39:36,86
Our build time, when we were
running in single threaded,


7521
7:39:36,86 --> 7:39:40,47
used to take about 20 minutes.


7522
7:39:40,47 --> 7:39:42,43
And we ran things in parallel,
and we dropped that down to


7523
7:39:42,43 --> 7:39:44,26
four minutes.


7524
7:39:44,26 --> 7:39:46,12
That's quite nice.


7525
7:39:46,12 --> 7:39:47,58
It's an incremental system.


7526
7:39:47,58 --> 7:39:50,65
So we only rebuild
what's necessary.


7527
7:39:50,65 --> 7:39:51,93
There are going to be some
changes that we're going to


7528
7:39:51,93 --> 7:39:54,56
make in the future, like at the
moment, we need to scan


7529
7:39:54,56 --> 7:39:56,87
the file system every time we
do a build to figure out


7530
7:39:56,87 --> 7:39:57,79
what's changed.


7531
7:39:57,79 --> 7:40:2,37
If we demonized something that
watched the file system, as in


7532
7:40:2,37 --> 7:40:4,8
turned it into a demon rather
than just told it it was bad


7533
7:40:4,8 --> 7:40:8,755
all the time, we could
go faster.


7534
7:40:8,755 --> 7:40:12,3
And the other thing as well is
it would be nice to be able to


7535
7:40:12,3 --> 7:40:14,58
do a distributed build, and if
someone's built the thing you


7536
7:40:14,58 --> 7:40:18,143
need with the same signature of
the inputs, you should be


7537
7:40:18,143 --> 7:40:19,39
able to get the same outputs.


7538
7:40:19,39 --> 7:40:21,49
You shouldn't need
to do a build.


7539
7:40:21,49 --> 7:40:27,23
So in 2012, what happened was we
flipped everyone from using


7540
7:40:27,23 --> 7:40:32,79
Ant to using Buck.


7541
7:40:32,79 --> 7:40:34,745
And I'm just going to
hide that, pull


7542
7:40:34,745 --> 7:40:35,91
that up to the front.


7543
7:40:35,91 --> 7:40:39,51
Can we flip to the
Mac, please?


7544
7:40:39,51 --> 7:40:41,4
Excellent.


7545
7:40:41,4 --> 7:40:46,886
So there are two interesting
things here.


7546
7:40:46,886 --> 7:40:49,5
I've checked out the source
code for Buck.


7547
7:40:49,5 --> 7:40:52,7
And we build Buck with Ant,
because we're insane.


7548
7:40:52,7 --> 7:40:55,73



7549
7:40:55,73 --> 7:40:57,855
You can see the activity
monitor from OS


7550
7:40:57,855 --> 7:40:59,9
10 just down here.


7551
7:40:59,9 --> 7:41:1,59
CPU usage is a thing to look.


7552
7:41:1,59 --> 7:41:5,433
So what I'm going to do
is I'm going to do--


7553
7:41:5,433 --> 7:41:7,15
let's do a clean.


7554
7:41:7,15 --> 7:41:11,23
I'm going to just time a clean
build of Buck and then running


7555
7:41:11,23 --> 7:41:12,71
all its tests.


7556
7:41:12,71 --> 7:41:16,34
So it's doing the compilation,
excellent.


7557
7:41:16,34 --> 7:41:20,5
Now it's running
the test cases.


7558
7:41:20,5 --> 7:41:24,36
It's still running
the test cases.


7559
7:41:24,36 --> 7:41:26,74
And it continues to run
the test cases.


7560
7:41:26,74 --> 7:41:28,23
And I'm not going to wait,
because it takes about a


7561
7:41:28,23 --> 7:41:31,53
minute and a bit to
do everything


7562
7:41:31,53 --> 7:41:34,46
that it needs to do.


7563
7:41:34,46 --> 7:41:39,57
So now what I'll do is I'll use
Buck to run every single


7564
7:41:39,57 --> 7:41:42,26
test in the file system, and to
make it a fair comparison,


7565
7:41:42,26 --> 7:41:44,48
I'll do a Buck clean.


7566
7:41:44,48 --> 7:41:46,27
Because I'm actually in the
directory that Buck is


7567
7:41:46,27 --> 7:41:49,92
installed from, we may see
a bit of Ant output as it


7568
7:41:49,92 --> 7:41:50,55
bootstraps itself.


7569
7:41:50,55 --> 7:41:51,75
We should be fine.


7570
7:41:51,75 --> 7:41:55,51
But look at the CPU
usage over here.


7571
7:41:55,51 --> 7:41:58,23
What it's doing now is it's
parsing everything.


7572
7:41:58,23 --> 7:41:59,76
It's testing all the tests.


7573
7:41:59,76 --> 7:42:2,11
It doesn't do a meme.


7574
7:42:2,11 --> 7:42:5,31
And bam, in the time it took me
to describe what was going


7575
7:42:5,31 --> 7:42:9,46
on, it's run every single test
in the Buck system, and that


7576
7:42:9,46 --> 7:42:12,54
took significantly less than the
minute it would've taken


7577
7:42:12,54 --> 7:42:14,72
if we were using Ant.


7578
7:42:14,72 --> 7:42:17,14
So that's pretty cool, right?


7579
7:42:17,14 --> 7:42:18,56
Can we go back to the
slides, please?


7580
7:42:18,56 --> 7:42:21,39



7581
7:42:21,39 --> 7:42:25,59
So at the time we did the
switchover, it was quicker to


7582
7:42:25,59 --> 7:42:28,72
pop up a warning on the Ant
build saying, why don't you go


7583
7:42:28,72 --> 7:42:30,18
and download it?


7584
7:42:30,18 --> 7:42:32,65
You could download Buck, install
it on the system, and


7585
7:42:32,65 --> 7:42:37,71
do a complete build far more
quickly than if you finished


7586
7:42:37,71 --> 7:42:40,266
your Any build, which
is crazy.


7587
7:42:40,266 --> 7:42:42,94
And the good news is Buck
is open source.


7588
7:42:42,94 --> 7:42:44,49
You can go and download it.


7589
7:42:44,49 --> 7:42:47,26
You can go and have a play with
the build system that we


7590
7:42:47,26 --> 7:42:48,91
use at Facebook.


7591
7:42:48,91 --> 7:42:50,83
We accept Pull Requests.


7592
7:42:50,83 --> 7:42:52,4
Please send Pull Requests.


7593
7:42:52,4 --> 7:42:54,25
They'd be lovely.


7594
7:42:54,25 --> 7:42:55,41
It's pretty nice.


7595
7:42:55,41 --> 7:42:57,69
If you want to see the
documentation, just head over


7596
7:42:57,69 --> 7:43:2,42
to the Facebook.gethub.com, and
take a look at that URL.


7597
7:43:2,42 --> 7:43:4,48
It's under the Apache 2 license,
so if you're working


7598
7:43:4,48 --> 7:43:6,975
in a bank, you're worried about
having to suddenly make


7599
7:43:6,975 --> 7:43:8,43
all your source code available,
because you use a


7600
7:43:8,43 --> 7:43:9,455
new build tool, relax.


7601
7:43:9,455 --> 7:43:11,38
It's OK.


7602
7:43:11,38 --> 7:43:12,6
It is written in JAVA.


7603
7:43:12,6 --> 7:43:15,5
I know it's not trendy, but it
is a perfectly working like


7604
7:43:15,5 --> 7:43:18,42
language, and a small amount
of Python, which makes the


7605
7:43:18,42 --> 7:43:20,27
Pythonistas happy.


7606
7:43:20,27 --> 7:43:22,36
And it works in OS
10 and Linux.


7607
7:43:22,36 --> 7:43:25,15
Now the reason it doesn't work
on Windows is because nobody


7608
7:43:25,15 --> 7:43:28,43
builds on Windows.


7609
7:43:28,43 --> 7:43:29,41
AUDIENCE: We wish.


7610
7:43:29,41 --> 7:43:30,85
SIMON STEWART: Well
none of our team


7611
7:43:30,85 --> 7:43:31,86
currently build on Windows.


7612
7:43:31,86 --> 7:43:34,62
I'm sure at some point, there'll
be a need for it.


7613
7:43:34,62 --> 7:43:36,8
So I mean, that's a
flippant comment.


7614
7:43:36,8 --> 7:43:37,95
And it was fine.


7615
7:43:37,95 --> 7:43:42,5
And of course, we build
Buck with Ant.


7616
7:43:42,5 --> 7:43:43,41
So, yes, we've got this amazing


7617
7:43:43,41 --> 7:43:44,79
fast build time, right?


7618
7:43:44,79 --> 7:43:48,11
And that allows us to test.


7619
7:43:48,11 --> 7:43:50,46
Testing's good, right.


7620
7:43:50,46 --> 7:43:52,69
We get on developers
to write the tests.


7621
7:43:52,69 --> 7:44:0,47
At Facebook, there is no SET,
no SDET, no TE, no QAE, no


7622
7:44:0,47 --> 7:44:4,14
test department, and
QA department.


7623
7:44:4,14 --> 7:44:6,7
We just have engineers.


7624
7:44:6,7 --> 7:44:8,69
Now some of the engineers have
a passion for testing in the


7625
7:44:8,69 --> 7:44:11,58
same way that some engineers
have a passion for databases,


7626
7:44:11,58 --> 7:44:14,71
some of them have a passion for
security, and some of them


7627
7:44:14,71 --> 7:44:16,62
have a passion for finding
pictures of kittens on the


7628
7:44:16,62 --> 7:44:18,46
internet and posting it
to their timeline.


7629
7:44:18,46 --> 7:44:21,57



7630
7:44:21,57 --> 7:44:23,22
But we get developers
to write test.


7631
7:44:23,22 --> 7:44:26,28
Everyone who writes a line of
code is expected to also be


7632
7:44:26,28 --> 7:44:30,65
writing test for that line
of code, which is nice.


7633
7:44:30,65 --> 7:44:34,96
Seems to be working out all
right for us so far, and I


7634
7:44:34,96 --> 7:44:36,25
quite like it.


7635
7:44:36,25 --> 7:44:38,96
I always find that companies
that have a test team, the


7636
7:44:38,96 --> 7:44:41,95
test team tends to be looked
down on and not treated with


7637
7:44:41,95 --> 7:44:43,6
the love and respect that
they ought to be.


7638
7:44:43,6 --> 7:44:50,63



7639
7:44:50,63 --> 7:44:51,88
I love you guys, it's OK.


7640
7:44:51,88 --> 7:44:55,13



7641
7:44:55,13 --> 7:44:57,5
Yeah, I remember sort of getting
interviews from people


7642
7:44:57,5 --> 7:44:59,79
going, he wasn't good enough to
be a coder, but he might be


7643
7:44:59,79 --> 7:45:1,82
OK as a tester.


7644
7:45:1,82 --> 7:45:2,77
And it's like no, no,
no, no, no, no,


7645
7:45:2,77 --> 7:45:3,7
you've got it all wrong.


7646
7:45:3,7 --> 7:45:5,26
They're not good enough
to be a tester.


7647
7:45:5,26 --> 7:45:9,3
They might be all right
as a coder.


7648
7:45:9,3 --> 7:45:14,23
And it wasn't appreciated in the
way I thought it would be.


7649
7:45:14,23 --> 7:45:16,44
Funny, that really.


7650
7:45:16,44 --> 7:45:19,43
So what kind of test do we
ask people to write?


7651
7:45:19,43 --> 7:45:21,78
We start with unit tests.


7652
7:45:21,78 --> 7:45:24,22
Unit tests run using JUnit.


7653
7:45:24,22 --> 7:45:26,5
Kent Beck works at Facebook.


7654
7:45:26,5 --> 7:45:27,5
We're not using TestNG.


7655
7:45:27,5 --> 7:45:29,33
Cedric doesn't work there.


7656
7:45:29,33 --> 7:45:31,62
Kent does.


7657
7:45:31,62 --> 7:45:34,51
For those of you who don't know,
Kent Beck wrote JUnit.


7658
7:45:34,51 --> 7:45:36,32
Cedric wrote TestNG.


7659
7:45:36,32 --> 7:45:38,57
And we encourage people to
write unit tests to run


7660
7:45:38,57 --> 7:45:41,89
locally on the JVM, because
we appreciate fast.


7661
7:45:41,89 --> 7:45:45,82
Fast is really important,
new fast break tests.


7662
7:45:45,82 --> 7:45:48,79
That isn't the Facebook mantra,
but it almost is.


7663
7:45:48,79 --> 7:45:50,94
In order to enable people to
move quickly, their using


7664
7:45:50,94 --> 7:45:52,22
dependency injection.


7665
7:45:52,22 --> 7:45:55,51
We can replace collaborators at
test time using EasyMock.


7666
7:45:55,51 --> 7:45:57,73
That's one of the libraries
that we use.


7667
7:45:57,73 --> 7:46:0,45
Mockito is another choice if
you're looking to do things.


7668
7:46:0,45 --> 7:46:3,79
But EasyMock is what we settled
on at Facebook.


7669
7:46:3,79 --> 7:46:6,1
But we're building
an Android app.


7670
7:46:6,1 --> 7:46:10,16
And if you include the Android
jar from the Android


7671
7:46:10,16 --> 7:46:13,7
development kit, and you run a
test using it, what tends to


7672
7:46:13,7 --> 7:46:16,21
happen is any time you touch
anything, included in that


7673
7:46:16,21 --> 7:46:18,89
jar,, you get an exception
with Stub!


7674
7:46:18,89 --> 7:46:21,38
being the only message
in that exception.


7675
7:46:21,38 --> 7:46:22,64
And that's because what they've
done is they've


7676
7:46:22,64 --> 7:46:26,29
provided an ABI compatible jar
with no implementations,


7677
7:46:26,29 --> 7:46:30,525
because the implementation runs
a Dalvik on the device.


7678
7:46:30,525 --> 7:46:33,92
That makes writing tests
incredibly difficult.


7679
7:46:33,92 --> 7:46:36,67
That's a bad thing.


7680
7:46:36,67 --> 7:46:37,94
We don't like that.


7681
7:46:37,94 --> 7:46:40,92
So what we do is we use a
library called Roboletric.


7682
7:46:40,92 --> 7:46:42,96
Again, it's open source.


7683
7:46:42,96 --> 7:46:45,18
And what that does is
it provides Stub!


7684
7:46:45,18 --> 7:46:48,68
Implementations or fake
implementations of each of the


7685
7:46:48,68 --> 7:46:50,12
Android methods.


7686
7:46:50,12 --> 7:46:53,7
So what we can do is we can
compile, and test and run in


7687
7:46:53,7 --> 7:46:55,66
the IDE on your desktop
for a really fast


7688
7:46:55,66 --> 7:46:58,205
developer feedback cycle.


7689
7:46:58,205 --> 7:47:1,2
And that's nice, because there's
no compilation to


7690
7:47:1,2 --> 7:47:4,4
Dalvik, no pushing apps in the
machine, the device, or the


7691
7:47:4,4 --> 7:47:7,1
emulator, and you can get that
nice fast cycle time.


7692
7:47:7,1 --> 7:47:8,26
We appreciate fast.


7693
7:47:8,26 --> 7:47:10,71



7694
7:47:10,71 --> 7:47:13,96
But unit tests don't cut
the mustard, right?


7695
7:47:13,96 --> 7:47:16,3
You will occasionally want to
make sure that all the unit


7696
7:47:16,3 --> 7:47:19,95
tests function correctly, and
the software when you plug


7697
7:47:19,95 --> 7:47:22,32
everything together
doesn't fall over.


7698
7:47:22,32 --> 7:47:24,61
I was on a project once which
have slightly over 2 and 1/2


7699
7:47:24,61 --> 7:47:27,61
thousand tests.


7700
7:47:27,61 --> 7:47:28,43
It was a dot net project.


7701
7:47:28,43 --> 7:47:30,68
The test ran in about
two seconds.


7702
7:47:30,68 --> 7:47:31,75
It was amazing.


7703
7:47:31,75 --> 7:47:34,66
And the app would consistently
not start up.


7704
7:47:34,66 --> 7:47:40,45



7705
7:47:40,45 --> 7:47:42,29
And it's because they had
forgotten to write integration


7706
7:47:42,29 --> 7:47:44,4
tests and larger tests, and
they were just using mock


7707
7:47:44,4 --> 7:47:47,36
objects and going yeah, it'll
return null here and throw an


7708
7:47:47,36 --> 7:47:50,44
exception here for exact
same method.


7709
7:47:50,44 --> 7:47:53,52
No, guys, you need
larger tests.


7710
7:47:53,52 --> 7:47:55,76
Larger tests, there are a
handful of frameworks


7711
7:47:55,76 --> 7:47:58,5
that you can us.


7712
7:47:58,5 --> 7:48:2,63
UI Automator, which came
in API level 16--


7713
7:48:2,63 --> 7:48:4,15
so basically Jelly
Bean and above.


7714
7:48:4,15 --> 7:48:6,59
I think it's there in ICS, but
Jelly Bean and above it,


7715
7:48:6,59 --> 7:48:8,61
starts becoming useful.


7716
7:48:8,61 --> 7:48:10,32
We use that quite a lot.


7717
7:48:10,32 --> 7:48:12,34
We're writing our own test
framework to allow you to


7718
7:48:12,34 --> 7:48:14,125
write tests out of
process and off


7719
7:48:14,125 --> 7:48:16,19
device, using UI Automator.


7720
7:48:16,19 --> 7:48:18,81
We call it Bully, because
it pushes things around.


7721
7:48:18,81 --> 7:48:20,7
I may have to come up with a
better name before we open


7722
7:48:20,7 --> 7:48:25,54
source it, or maybe
not, who knows.


7723
7:48:25,54 --> 7:48:28,84
We also use Robolectric for the
older devices, and there


7724
7:48:28,84 --> 7:48:29,68
are some tests using that.


7725
7:48:29,68 --> 7:48:31,0
We use MonkeyRunner.


7726
7:48:31,0 --> 7:48:34,5
We use a whole series of tools
that come with the Android


7727
7:48:34,5 --> 7:48:35,5
development kit.


7728
7:48:35,5 --> 7:48:36,992
And they're all quite nice,
but Robolectric, UI


7729
7:48:36,992 --> 7:48:37,975
Automator--


7730
7:48:37,975 --> 7:48:40,88
those are two of the key
ones that we use.


7731
7:48:40,88 --> 7:48:43,8
By the way, we also run things
like power tests, and on


7732
7:48:43,8 --> 7:48:45,71
device tests, and things
like that.


7733
7:48:45,71 --> 7:48:48,69
But these are tests of the
standard normal developers,


7734
7:48:48,69 --> 7:48:50,84
rather than crazy ones who
really enjoy testing.


7735
7:48:50,84 --> 7:48:53,6



7736
7:48:53,6 --> 7:48:54,36
You've got the code.


7737
7:48:54,36 --> 7:48:55,74
You've tested the code.


7738
7:48:55,74 --> 7:48:57,31
You kind of think it works,
so you're ready.


7739
7:48:57,31 --> 7:49:0,97
You're going to push
it into master.


7740
7:49:0,97 --> 7:49:6,55
So you remember way back
in the black slide,


7741
7:49:6,55 --> 7:49:8,4
there was arc diff.


7742
7:49:8,4 --> 7:49:10,82
What does arc diff
actually do?


7743
7:49:10,82 --> 7:49:13,32
Kicks off the code
review process.


7744
7:49:13,32 --> 7:49:15,75
You write a description
of what you do, you


7745
7:49:15,75 --> 7:49:16,41
write a test plan.


7746
7:49:16,41 --> 7:49:19,55
And if the test plan goes well
I don't know or the written


7747
7:49:19,55 --> 7:49:23,89
equivalent, you tend to be told
off and told to improve


7748
7:49:23,89 --> 7:49:25,41
your test plan.


7749
7:49:25,41 --> 7:49:28,63
And we send it up to a tool
called Phabricator, which is


7750
7:49:28,63 --> 7:49:32,72
like a Swiss Army chainsaw
of project management.


7751
7:49:32,72 --> 7:49:33,7
So it does tasks.


7752
7:49:33,7 --> 7:49:35,26
It does code reviews.


7753
7:49:35,26 --> 7:49:38,86
It does browsing of
repositories.


7754
7:49:38,86 --> 7:49:41,2
It allows you to do all sorts
of clever wonderful things,


7755
7:49:41,2 --> 7:49:43,98
and we like Phabricator
at Facebook.


7756
7:49:43,98 --> 7:49:46,27
And this is what a code
review looks like.


7757
7:49:46,27 --> 7:49:50,1
You can see here that the chap
has submitted a reasonable


7758
7:49:50,1 --> 7:49:50,71
test pilot.


7759
7:49:50,71 --> 7:49:52,81
It has been greyed out,
but it's in purple.


7760
7:49:52,81 --> 7:49:54,81
The reviewer has come
back and asked him


7761
7:49:54,81 --> 7:49:56,3
to make some changes.


7762
7:49:56,3 --> 7:49:57,99
The developer has made
some changes.


7763
7:49:57,99 --> 7:50:0,29
That's what the little icon
second from the bottom does,


7764
7:50:0,29 --> 7:50:2,78
and then the reviewer's
gone, this is good.


7765
7:50:2,78 --> 7:50:4,3
You can check it in.


7766
7:50:4,3 --> 7:50:6,292



7767
7:50:6,292 --> 7:50:11,9
Now Phabricator has a killer
feature, and I don't know if


7768
7:50:11,9 --> 7:50:13,952
you can tell what it is.


7769
7:50:13,952 --> 7:50:15,75
It's image macros.


7770
7:50:15,75 --> 7:50:18,1
In the middle of your code
review, you can just type a


7771
7:50:18,1 --> 7:50:20,4
little line, and it will
insert an image


7772
7:50:20,4 --> 7:50:22,71
into the code review.


7773
7:50:22,71 --> 7:50:26,87
This is American Obama, which is
President Obama playing an


7774
7:50:26,87 --> 7:50:29,73
electric guitar shaped like a
bald eagle while wearing an


7775
7:50:29,73 --> 7:50:30,98
American hat.


7776
7:50:30,98 --> 7:50:33,11



7777
7:50:33,11 --> 7:50:34,96
I quite like that one.


7778
7:50:34,96 --> 7:50:36,25
I stare at it endlessly.


7779
7:50:36,25 --> 7:50:37,275
It's fascinating.


7780
7:50:37,275 --> 7:50:39,55



7781
7:50:39,55 --> 7:50:40,28
And ship it.


7782
7:50:40,28 --> 7:50:41,98
It's like, it's all done.


7783
7:50:41,98 --> 7:50:43,37
Just ship it, land the code.


7784
7:50:43,37 --> 7:50:45,59
Do something interesting.


7785
7:50:45,59 --> 7:50:48,26
To land it, we use the
command line tool,


7786
7:50:48,26 --> 7:50:49,8
Arc, short for Arcanist.


7787
7:50:49,8 --> 7:50:53,94
It's the command line
counterpart to Phabricator.


7788
7:50:53,94 --> 7:50:55,19
And landing does two things.


7789
7:50:55,19 --> 7:50:57,38
It runs lint, which can
be run separately.


7790
7:50:57,38 --> 7:51:0,27
And we use the Android linter
with additional lint rules


7791
7:51:0,27 --> 7:51:3,51
that we've added to check for
things like null pointer


7792
7:51:3,51 --> 7:51:4,84
exceptions.


7793
7:51:4,84 --> 7:51:9,53
So we use at nullible quite a
lot from Guava, optional as


7794
7:51:9,53 --> 7:51:11,37
well, like Guava library--


7795
7:51:11,37 --> 7:51:11,66
fantastic.


7796
7:51:11,66 --> 7:51:13,8
If you're not using it, just
download it now and use it.


7797
7:51:13,8 --> 7:51:16,0
It's one of the best things
to come out of Google for


7798
7:51:16,0 --> 7:51:17,37
developers for a long,
long time.


7799
7:51:17,37 --> 7:51:18,74
It's awesome.


7800
7:51:18,74 --> 7:51:21,37
We also make sure that all the
APIs for the versions of


7801
7:51:21,37 --> 7:51:24,21
Android that we support are all
present and other bits and


7802
7:51:24,21 --> 7:51:26,41
pieces, and we do an Arc land.


7803
7:51:26,41 --> 7:51:28,86
What Arc land does is it takes
your changes in your local


7804
7:51:28,86 --> 7:51:32,316
branch, rebases them onto master
and pushes your version


7805
7:51:32,316 --> 7:51:34,48
of master into the
central one.


7806
7:51:34,48 --> 7:51:36,71
So if you take a look at the
history of the project and get


7807
7:51:36,71 --> 7:51:39,1
a master, it's a single
linear history.


7808
7:51:39,1 --> 7:51:40,12
We don't have weird branching.


7809
7:51:40,12 --> 7:51:41,77
It's just a straight
down linear


7810
7:51:41,77 --> 7:51:45,88
history of logical changes.


7811
7:51:45,88 --> 7:51:47,55
So you've landed your code,
you've tested it.


7812
7:51:47,55 --> 7:51:49,46
It's all wonderful, right?


7813
7:51:49,46 --> 7:51:51,13
No, hang on.


7814
7:51:51,13 --> 7:51:53,45
We also have a continuous
build system.


7815
7:51:53,45 --> 7:51:55,7
If you haven't got a continuous
build system yet,


7816
7:51:55,7 --> 7:51:57,9
just use one.


7817
7:51:57,9 --> 7:51:57,74
I don't care what you use--


7818
7:51:57,74 --> 7:52:0,5
CruiseControl, Go--


7819
7:52:0,5 --> 7:52:1,94
we use Buildbot.


7820
7:52:1,94 --> 7:52:3,88
And you can see here that
most of the time,


7821
7:52:3,88 --> 7:52:5,69
things are pretty good.


7822
7:52:5,69 --> 7:52:8,82
One developer has caused the
test to fail, and so we're not


7823
7:52:8,82 --> 7:52:10,49
going to move the
stable branch.


7824
7:52:10,49 --> 7:52:13,74
But when these tests all go
green, then we go, excellent.


7825
7:52:13,74 --> 7:52:15,57
And these are sort of longer
running tests, so these are


7826
7:52:15,57 --> 7:52:18,91
integration tests, end to end
tests, that we don't want a


7827
7:52:18,91 --> 7:52:20,67
developer to run on their local
work station, because


7828
7:52:20,67 --> 7:52:22,9
there just isn't time
in the day.


7829
7:52:22,9 --> 7:52:25,21
And if you're not breaking the
continuous build server


7830
7:52:25,21 --> 7:52:29,3
periodically, you're probably
not working hard enough.


7831
7:52:29,3 --> 7:52:30,55
It's what one of my friends
used to say.


7832
7:52:30,55 --> 7:52:32,425
I think he's right, actually.


7833
7:52:32,425 --> 7:52:34,65
I think it's OK to break the
build periodically, as long as


7834
7:52:34,65 --> 7:52:37,27
you fix it immediately
afterwards, possibly by


7835
7:52:37,27 --> 7:52:39,19
yanking your change out,
reworking it and


7836
7:52:39,19 --> 7:52:40,4
resubmitting it.


7837
7:52:40,4 --> 7:52:44,66
So Buildbot runs all these
longer running tests, these


7838
7:52:44,66 --> 7:52:46,88
paratests, make sure there are
no regressions in performance


7839
7:52:46,88 --> 7:52:48,59
or anything like that.


7840
7:52:48,59 --> 7:52:49,59
Now we're done, right?


7841
7:52:49,59 --> 7:52:51,47
Oh crap.


7842
7:52:51,47 --> 7:52:53,63
Sorry, [INAUDIBLE],
you win the bet.


7843
7:52:53,63 --> 7:52:55,11
He betted that I wouldn't
profane.


7844
7:52:55,11 --> 7:52:56,68
Does that count as profanity?


7845
7:52:56,68 --> 7:52:57,95
I don't know.


7846
7:52:57,95 --> 7:53:1,36
Shit, there we go, done
it properly now.


7847
7:53:1,36 --> 7:53:3,45
So, yes, it's built.


7848
7:53:3,45 --> 7:53:5,3
We need to Dogfood this thing.


7849
7:53:5,3 --> 7:53:8,23
As I said before, when you get
this application on your


7850
7:53:8,23 --> 7:53:10,585
phone, if it falls over,
[INAUDIBLE] need


7851
7:53:10,585 --> 7:53:11,96
to download it again.


7852
7:53:11,96 --> 7:53:14,74
That would be an awful, awful
thing to happen, so we Dogfood


7853
7:53:14,74 --> 7:53:16,26
extensively.


7854
7:53:16,26 --> 7:53:18,18
And one of the platforms that
we make sure that we Dogfood


7855
7:53:18,18 --> 7:53:20,69
on is Gingerbread.


7856
7:53:20,69 --> 7:53:25,81
Problem is, at Facebook many
of our developers are paid


7857
7:53:25,81 --> 7:53:27,78
well enough to be able
to afford an ICS


7858
7:53:27,78 --> 7:53:30,3
or Jelly Bean device.


7859
7:53:30,3 --> 7:53:32,91
And we can ask for a Galaxy
Nexus for testing


7860
7:53:32,91 --> 7:53:34,62
and things like that.


7861
7:53:34,62 --> 7:53:36,51
But Gingerbread is still
incredibly popular.


7862
7:53:36,51 --> 7:53:38,41
They're still churning
out devices with


7863
7:53:38,41 --> 7:53:39,51
Gingerbread on it.


7864
7:53:39,51 --> 7:53:43,32
And these are the latest numbers
from the dashboard


7865
7:53:43,32 --> 7:53:46,59
that Android has on
their website.


7866
7:53:46,59 --> 7:53:51,47
And you can see Gingerbread is
about 40, 45% of the market.


7867
7:53:51,47 --> 7:53:54,7
And so what we do is we make
sure that people are


7868
7:53:54,7 --> 7:53:57,915
voluntarily using Gingerbread
as their primary device and


7869
7:53:57,915 --> 7:53:59,81
they're Dogfooding
our applications.


7870
7:53:59,81 --> 7:54:2,61
So they installed the beta
builds on their device, and


7871
7:54:2,61 --> 7:54:4,39
they keep on using that.


7872
7:54:4,39 --> 7:54:6,67
One of the key people using
Gingerbread as their day to


7873
7:54:6,67 --> 7:54:10,2
day device is a release
manager for Android.


7874
7:54:10,2 --> 7:54:15,23
He is not always the happiest
person, but he often flags up


7875
7:54:15,23 --> 7:54:18,6
pretty nasty regressions that
no one else has caught yet,


7876
7:54:18,6 --> 7:54:20,72
because they only show up
as sort of outer memory


7877
7:54:20,72 --> 7:54:23,62
exceptions on Gingerbread,
where the devices are


7878
7:54:23,62 --> 7:54:26,51
constrained.


7879
7:54:26,51 --> 7:54:29,83
So this is the PHP hammer,
by the way.


7880
7:54:29,83 --> 7:54:33,17
I don't know if you've
seen it.


7881
7:54:33,17 --> 7:54:34,6
It has nothing to do
with the talk.


7882
7:54:34,6 --> 7:54:37,54
I just love the picture.


7883
7:54:37,54 --> 7:54:39,37
So you've downloaded the beta
version of the app, you've


7884
7:54:39,37 --> 7:54:40,7
side loaded it.


7885
7:54:40,7 --> 7:54:42,27
What it does is it
periodically--


7886
7:54:42,27 --> 7:54:43,9
at Facebook at least--


7887
7:54:43,9 --> 7:54:46,41
contacts the build services
and goes, is there a new


7888
7:54:46,41 --> 7:54:47,94
version of the application?


7889
7:54:47,94 --> 7:54:50,35
And if there is, it nags
people to update it.


7890
7:54:50,35 --> 7:54:52,7
So it downloads it in the
background, and then goes,


7891
7:54:52,7 --> 7:54:53,81
would you like to install it?


7892
7:54:53,81 --> 7:54:55,64
Would you, would
you, would you?


7893
7:54:55,64 --> 7:54:56,97
And you go, yeah, all right.


7894
7:54:56,97 --> 7:55:0,98
And so once you're on the
testing track at Facebook, and


7895
7:55:0,98 --> 7:55:3,56
you always using the beta build,
you're always using the


7896
7:55:3,56 --> 7:55:6,96
most recent beta build, which
prevents sort of old bugs


7897
7:55:6,96 --> 7:55:8,49
being filed by people.


7898
7:55:8,49 --> 7:55:12,712
And finding bugs is incredibly
easy, because what people do


7899
7:55:12,712 --> 7:55:15,88
is they take their device,
and they shake it.


7900
7:55:15,88 --> 7:55:18,7
Now, we call that a reg shake,
because you normally only


7901
7:55:18,7 --> 7:55:21,4
shake your device when you're
going, it's not working.


7902
7:55:21,4 --> 7:55:22,87
Oh, hello, I can file
a bug, excellent.


7903
7:55:22,87 --> 7:55:25,69



7904
7:55:25,69 --> 7:55:27,31
And that's kind of a really
nice feature.


7905
7:55:27,31 --> 7:55:30,65
So to get good instant bug
reports from people, as


7906
7:55:30,65 --> 7:55:33,49
they're experiencing it, using
the latest version of the


7907
7:55:33,49 --> 7:55:38,26
application, which allows
us to do our releases.


7908
7:55:38,26 --> 7:55:39,3
Our releases--


7909
7:55:39,3 --> 7:55:41,38
never thought I'd get
there, did you?


7910
7:55:41,38 --> 7:55:44,69
So you could pick two, when
you're doing a release.


7911
7:55:44,69 --> 7:55:50,32
You can have features, quality,
or regular schedule.


7912
7:55:50,32 --> 7:55:52,25
Wow, that's a kind
of tough choice.


7913
7:55:52,25 --> 7:55:56,28
If there any project managers
in the audience, features,


7914
7:55:56,28 --> 7:55:59,17
quality, schedule is not
two, that's three.


7915
7:55:59,17 --> 7:56:3,83



7916
7:56:3,83 --> 7:56:7,85
So we decided that we were
going to do time based


7917
7:56:7,85 --> 7:56:10,26
releases which are
high quality.


7918
7:56:10,26 --> 7:56:12,23
That means that occasionally, we
ship without features that


7919
7:56:12,23 --> 7:56:14,5
we've been working on.


7920
7:56:14,5 --> 7:56:16,9
Now the advantage of a
time based release--


7921
7:56:16,9 --> 7:56:18,81
and our releases are about four
weeks long, so what we do


7922
7:56:18,81 --> 7:56:22,46
is we cut a branch, we do
stability work for about three


7923
7:56:22,46 --> 7:56:26,1
weeks, we have a release
candidate for about a week,


7924
7:56:26,1 --> 7:56:29,3
where we push it out to the
beta testers and anyone in


7925
7:56:29,3 --> 7:56:32,64
Facebook who volunteers for it,
and then we ship to the


7926
7:56:32,64 --> 7:56:33,29
Play Store.


7927
7:56:33,29 --> 7:56:35,82
So once a month, there's an
update to the Facebook


7928
7:56:35,82 --> 7:56:36,99
application.


7929
7:56:36,99 --> 7:56:38,87
And it's really nice having that
regularity, because it


7930
7:56:38,87 --> 7:56:41,8
means if you're working on a
feature and you missed this


7931
7:56:41,8 --> 7:56:43,75
release, you know that you're
not going to have to wait


7932
7:56:43,75 --> 7:56:47,25
forever before the
next release.


7933
7:56:47,25 --> 7:56:51,4
it means that you can get the
stuff as quickly as possible.


7934
7:56:51,4 --> 7:56:54,2
And it means you've got that
consistency, that regularity.


7935
7:56:54,2 --> 7:56:56,12
You also know that your feature
isn't going to be


7936
7:56:56,12 --> 7:56:58,16
blocked as somebody else
frantically tries to finish


7937
7:56:58,16 --> 7:56:59,88
their thing.


7938
7:56:59,88 --> 7:57:0,74
That's nice.


7939
7:57:0,74 --> 7:57:5,53
So time based releases are
hugely, hugely valuable to us.


7940
7:57:5,53 --> 7:57:8,41
And done isn't just hey, it
compiles, and the tests pass,


7941
7:57:8,41 --> 7:57:14,78
and nobody's filed a bug with
it yet on the release


7942
7:57:14,78 --> 7:57:15,89
candidates.


7943
7:57:15,89 --> 7:57:19,29
Done is things like, isn't the
design work all finished?


7944
7:57:19,29 --> 7:57:22,12
We've see changes going into the
release branch around the


7945
7:57:22,12 --> 7:57:24,22
design of a feature, that we
know that the piece hasn't


7946
7:57:24,22 --> 7:57:25,36
been finished.


7947
7:57:25,36 --> 7:57:26,753
If the feature hasn't
been finished, we


7948
7:57:26,753 --> 7:57:27,7
yank it from the release.


7949
7:57:27,7 --> 7:57:30,6
We either hide it behind a flag
and strip it out using


7950
7:57:30,6 --> 7:57:37,6
Dex, ProGuard even, or we just
remove the particular feature,


7951
7:57:37,6 --> 7:57:38,725
and we ask people to keep
on working on it.


7952
7:57:38,725 --> 7:57:40,11
And logging--


7953
7:57:40,11 --> 7:57:42,59
how do we know when we release
a feature that it isn't


7954
7:57:42,59 --> 7:57:45,35
causing a million crashes?


7955
7:57:45,35 --> 7:57:48,97
We get metrics, and feedback
and information from the


7956
7:57:48,97 --> 7:57:50,93
versions of Facebook that you're
running on your phone.


7957
7:57:50,93 --> 7:57:54,12
If something goes wrong, we
get told about it somehow.


7958
7:57:54,12 --> 7:57:55,37
Sometimes it depends.


7959
7:57:55,37 --> 7:57:57,6



7960
7:57:57,6 --> 7:57:59,66
And we can look at that data,
and we can go oh, crikey,


7961
7:57:59,66 --> 7:58:1,93
there's being a sudden spike in
crashes on this particular


7962
7:58:1,93 --> 7:58:2,89
kind of device.


7963
7:58:2,89 --> 7:58:3,78
Let's fix that.


7964
7:58:3,78 --> 7:58:5,48
So we get information
from the world.


7965
7:58:5,48 --> 7:58:8,44
If you haven't put logging in,
we can't get that information.


7966
7:58:8,44 --> 7:58:9,86
Sometimes there are certain
side changes


7967
7:58:9,86 --> 7:58:10,98
that need to be made.


7968
7:58:10,98 --> 7:58:13,8
We still use WebViews
in a few places.


7969
7:58:13,8 --> 7:58:15,6
So if you're pushing a new
feature, we need to make sure


7970
7:58:15,6 --> 7:58:18,45
it works for the old and the
new vision of the app.


7971
7:58:18,45 --> 7:58:21,49
And obviously, privacy and
legal review are really,


7972
7:58:21,49 --> 7:58:22,61
really important.


7973
7:58:22,61 --> 7:58:25,21
Facebook cares about privacy.


7974
7:58:25,21 --> 7:58:26,4
We're a social network.


7975
7:58:26,4 --> 7:58:30,13
If people don't trust
us with their data,


7976
7:58:30,13 --> 7:58:31,31
we're dead in the water.


7977
7:58:31,31 --> 7:58:33,65
So we need to really, really be
concerned with privacy, and


7978
7:58:33,65 --> 7:58:37,19
we are, and legal review,
just in case.


7979
7:58:37,19 --> 7:58:39,42
So they're just as important as
a code review, and that's


7980
7:58:39,42 --> 7:58:40,82
what done means.


7981
7:58:40,82 --> 7:58:45,18
So that's basically how we bake
quality into the Facebook


7982
7:58:45,18 --> 7:58:46,6
application.


7983
7:58:46,6 --> 7:58:47,12
We go all the way through.


7984
7:58:47,12 --> 7:58:48,77
We run tests consistently.


7985
7:58:48,77 --> 7:58:50,43
We encourage people to use
design patterns for


7986
7:58:50,43 --> 7:58:51,37
testability.


7987
7:58:51,37 --> 7:58:53,4
We have defense in depth.


7988
7:58:53,4 --> 7:58:55,18
So there are unit tests,
integration tests, the


7989
7:58:55,18 --> 7:58:56,64
continuous integration server.


7990
7:58:56,64 --> 7:58:59,17
We have people Dogfooding
all the time.


7991
7:58:59,17 --> 7:59:2,61
We encourage people to use
devices that aren't commonly


7992
7:59:2,61 --> 7:59:6,58
used by people who have got well
paid jobs, but are used


7993
7:59:6,58 --> 7:59:10,65
widely in the real world,
particularly in the small


7994
7:59:10,65 --> 7:59:13,4
markets, the emerging markets.


7995
7:59:13,4 --> 7:59:15,83
Great, so thank you very
much for your time.


7996
7:59:15,83 --> 7:59:16,85
We've got time for
some questions.


7997
7:59:16,85 --> 7:59:18,1
Thank you.


7998
7:59:18,1 --> 7:59:24,93



7999
7:59:24,93 --> 7:59:25,78
TONY VOELLM: Thank you,
thank you, Simon.


8000
7:59:25,78 --> 7:59:27,27
That was fantastic.


8001
7:59:27,27 --> 7:59:28,92
I really liked seeing
the end to end.


8002
7:59:28,92 --> 7:59:31,3
We have a couple
live questions.


8003
7:59:31,3 --> 7:59:33,9
So how about we go to
the left first.


8004
7:59:33,9 --> 7:59:35,23
Go ahead and state your name,
where you're from.


8005
7:59:35,23 --> 7:59:37,825
AUDIENCE: Hi, my name's
Christian from Google.


8006
7:59:37,825 --> 7:59:40,28
I actually work on
the Guava team.


8007
7:59:40,28 --> 7:59:40,76
SIMON STEWART: Awesome work.


8008
7:59:40,76 --> 7:59:43,95
AUDIENCE: Yeah, well, that's
more my other teammates.


8009
7:59:43,95 --> 7:59:45,77
SIMON STEWART: The
JDK5 backport--


8010
7:59:45,77 --> 7:59:47,15
fantastic.


8011
7:59:47,15 --> 7:59:49,39
AUDIENCE: Working
on that today.


8012
7:59:49,39 --> 7:59:51,57
SIMON STEWART: Ship it.


8013
7:59:51,57 --> 7:59:54,36
AUDIENCE: So I want to thank you
for some really innovative


8014
7:59:54,36 --> 8:0:0,15
work on build systems, and
putting that out to the


8015
8:0:0,15 --> 8:0:2,24
community is a really
awesome thing.


8016
8:0:2,24 --> 8:0:3,44
So I'm glad to see it.


8017
8:0:3,44 --> 8:0:8,64
I had a question about Buck,
particularly because not all


8018
8:0:8,64 --> 8:0:10,59
companies have access to
all the source code


8019
8:0:10,59 --> 8:0:12,33
they will ever build.


8020
8:0:12,33 --> 8:0:14,91
So how do you handle binary
dependencies of things that


8021
8:0:14,91 --> 8:0:16,41
are third party libraries.


8022
8:0:16,41 --> 8:0:19,95
SIMON STEWART: Yep, there's a
rule called pre-built jar,


8023
8:0:19,95 --> 8:0:21,91
where you can just check in.


8024
8:0:21,91 --> 8:0:23,54
So we've got third party
dependencies.


8025
8:0:23,54 --> 8:0:25,75
We don't build Guava from
source, for example.


8026
8:0:25,75 --> 8:0:27,25
We just checking in the jars.


8027
8:0:27,25 --> 8:0:28,48
AUDIENCE: OK, you
check in jars.


8028
8:0:28,48 --> 8:0:29,26
SIMON STEWART: Yeah we
check in the jars.


8029
8:0:29,26 --> 8:0:31,485
We have pre-built binary
rules, and you


8030
8:0:31,485 --> 8:0:33,1
can depend on those.


8031
8:0:33,1 --> 8:0:36,36
The binary rules allow you to
also attach source jars and


8032
8:0:36,36 --> 8:0:36,99
javadoc jars.


8033
8:0:36,99 --> 8:0:40,38
And if you do that when you
run Buck Project, it will


8034
8:0:40,38 --> 8:0:43,15
actually hook in the sources,
so that you can browse into


8035
8:0:43,15 --> 8:0:46,38
the source code while you're
working on your project.


8036
8:0:46,38 --> 8:0:48,45
AUDIENCE: Very sweet, and
obviously you have an Eclipse


8037
8:0:48,45 --> 8:0:50,49
plug-in coming soon, right?


8038
8:0:50,49 --> 8:0:52,288
SIMON STEWART: We accept
pull requests.


8039
8:0:52,288 --> 8:0:54,24
AUDIENCE: All right,
there you go.


8040
8:0:54,24 --> 8:0:56,31
TONY VOELLM: OK, it looks like
we have time for one more


8041
8:0:56,31 --> 8:0:58,25
question, so we'll
go over here.


8042
8:0:58,25 --> 8:0:58,73
AUDIENCE: I'm Dave.


8043
8:0:58,73 --> 8:1:0,5
I'm from Family Search.


8044
8:1:0,5 --> 8:1:3,88
So you mentioned that the
codes in a single tree--


8045
8:1:3,88 --> 8:1:6,74
is that like all of the code at
Facebook, or is it just the


8046
8:1:6,74 --> 8:1:7,69
code for Android?


8047
8:1:7,69 --> 8:1:10,45
And the other question the kind
of goes along with it is


8048
8:1:10,45 --> 8:1:12,3
does that mean it's all
in one get repo?


8049
8:1:12,3 --> 8:1:14,44
And how does that perform?


8050
8:1:14,44 --> 8:1:16,51
SIMON STEWART: So at the
moment, the Android


8051
8:1:16,51 --> 8:1:17,76
code is in one repo.


8052
8:1:17,76 --> 8:1:20,82
The IOS code is in another, and
dub, dub, dub, the website


8053
8:1:20,82 --> 8:1:23,89
is in the third repo.


8054
8:1:23,89 --> 8:1:28,13
I think Google have
demonstrated, you can smoosh


8055
8:1:28,13 --> 8:1:31,4
everything together, and that
works pretty well for Google.


8056
8:1:31,4 --> 8:1:34,29
I mean, we saw all the stats
earlier, which were amazing,


8057
8:1:34,29 --> 8:1:36,81
just totally mind blowing.


8058
8:1:36,81 --> 8:1:37,79
So we could do it that way.


8059
8:1:37,79 --> 8:1:40,46
But at the moment, we
have separate repos


8060
8:1:40,46 --> 8:1:41,77
for the various things.


8061
8:1:41,77 --> 8:1:45,23
But all the Android code
lives in one tree.


8062
8:1:45,23 --> 8:1:45,86
Cool.


8063
8:1:45,86 --> 8:1:47,52
TONY VOELLM: OK, actually maybe
we'll just grab one


8064
8:1:47,52 --> 8:1:50,1
more, and then I have some
announcements about dinner and


8065
8:1:50,1 --> 8:1:52,24
things like that right after
this, so go ahead, last


8066
8:1:52,24 --> 8:1:53,35
question, please.


8067
8:1:53,35 --> 8:1:55,46
AUDIENCE: Noah Sussman, I'm an
independent consultant, but


8068
8:1:55,46 --> 8:1:59,24
formerly of Etsy, where I
designed the CI system with


8069
8:1:59,24 --> 8:2:1,99
pre commit, because it
worked so awesomely


8070
8:2:1,99 --> 8:2:5,66
for Google and Mozilla.


8071
8:2:5,66 --> 8:2:7,58
So why not?


8072
8:2:7,58 --> 8:2:8,44
Why no pre commit?


8073
8:2:8,44 --> 8:2:10,51
I'm fascinated.


8074
8:2:10,51 --> 8:2:13,5
SIMON STEWART: Just because we
haven't had the need for it.


8075
8:2:13,5 --> 8:2:16,23
The other thing, as well, is
sort of we're a relatively


8076
8:2:16,23 --> 8:2:17,23
small company.


8077
8:2:17,23 --> 8:2:20,45
I know 1400 engineers sounds
like an awful lot, but That's


8078
8:2:20,45 --> 8:2:25,7
1400 engineers spread over the
web, the IOS app. the Android


8079
8:2:25,7 --> 8:2:29,57
app, working on our internal
tooling, working on stuff for


8080
8:2:29,57 --> 8:2:33,47
our data centers,
just everything.


8081
8:2:33,47 --> 8:2:36,1
Facebook does more than
just the news feed.


8082
8:2:36,1 --> 8:2:37,38
We've got messaging
infrastructure.


8083
8:2:37,38 --> 8:2:38,5
We've got groups.


8084
8:2:38,5 --> 8:2:40,14
We've got all sorts
of fun things.


8085
8:2:40,14 --> 8:2:43,3
So 1400 engineers isn't
actually that many.


8086
8:2:43,3 --> 8:2:46,67
The team working on Buck--


8087
8:2:46,67 --> 8:2:50,9
there's about three consistent
contributors, and then there


8088
8:2:50,9 --> 8:2:53,21
are other people who join the
team for a month or two, and


8089
8:2:53,21 --> 8:2:56,22
then they roll back out again.


8090
8:2:56,22 --> 8:2:59,9
So there just isn't a huge
amount of manpower.


8091
8:2:59,9 --> 8:3:2,46
And it turns out that if you run
all the unit tests before


8092
8:3:2,46 --> 8:3:5,27
you check in, that catches
most of the problems.


8093
8:3:5,27 --> 8:3:7,74
So that hasn't been this sort of
pressing need to have a pre


8094
8:3:7,74 --> 8:3:8,57
submit thing.


8095
8:3:8,57 --> 8:3:11,48
When there is a neat, then
I think we'll do it.


8096
8:3:11,48 --> 8:3:14,14
But YAGNE is a really
good mantra.


8097
8:3:14,14 --> 8:3:15,51
If you've not heard
of YAGNE, it comes


8098
8:3:15,51 --> 8:3:17,4
from the Agile community.


8099
8:3:17,4 --> 8:3:19,28
You Ain't Gonna Need It.


8100
8:3:19,28 --> 8:3:21,71
So don't write it, don't use it,
until you actually have a


8101
8:3:21,71 --> 8:3:22,55
need for it.


8102
8:3:22,55 --> 8:3:24,85
And then put it in.


8103
8:3:24,85 --> 8:3:27,22
So that's why we don't do it.


8104
8:3:27,22 --> 8:3:28,2
TONY VOELLM: With that,
thank you, Simon.


8105
8:3:28,2 --> 8:3:30,2
Hopefully you'll join
us for dinner.


8106
8:3:30,2 --> 8:3:31,45
SIMON STEWART: Thanks
very much, guys.


8107
8:3:31,45 --> 8:3:40,46



8108
8:3:40,46 --> 8:3:43,29
TONY VOELLM: Wow, that
was a incredible day.


8109
8:3:43,29 --> 8:3:47,98
There's a lot to digest, a lot
of really fascinating things


8110
8:3:47,98 --> 8:3:51,99
we learned about, everything
from how to verify set-top


8111
8:3:51,99 --> 8:3:56,53
boxes from YouView, not
You-- the other one.


8112
8:3:56,53 --> 8:3:59,94
We learned from academia about
how to use gaining and gaining


8113
8:3:59,94 --> 8:4:3,2
type systems to engage and
create the next generation of


8114
8:4:3,2 --> 8:4:7,88
computer scientists, and even do
some very interesting work.


8115
8:4:7,88 --> 8:4:9,9
There's just a lot to think
about, so hopefully you'll


8116
8:4:9,9 --> 8:4:10,47
think about it.


8117
8:4:10,47 --> 8:4:13,73
And hopefully you'll share it
on the stream and everything


8118
8:4:13,73 --> 8:4:16,6
that we have on G+
and Twitter.


8119
8:4:16,6 --> 8:4:17,68
We'd love to hear what
you thought was


8120
8:4:17,68 --> 8:4:19,0
interesting as well.


8121
8:4:19,0 --> 8:4:22,42
For dinner, what we're going to
do is everybody is invited


8122
8:4:22,42 --> 8:4:24,87
to dinner if you're up in the
water tower, but because we're


8123
8:4:24,87 --> 8:4:29,63
going to go through behind
closed doors areas, we're


8124
8:4:29,63 --> 8:4:31,54
going to have people meet
us in the lobby.


8125
8:4:31,54 --> 8:4:34,6
And then we'll take shifts of
moving everybody up to the


8126
8:4:34,6 --> 8:4:36,12
water tower cafeteria.


8127
8:4:36,12 --> 8:4:40,29
Please, no photos once you walk
through the secure doors.


8128
8:4:40,29 --> 8:4:43,73
That would not be happy
for you to do that.


8129
8:4:43,73 --> 8:4:45,78
So please don't take any photos,
but definitely come


8130
8:4:45,78 --> 8:4:46,75
and enjoy dinner.


8131
8:4:46,75 --> 8:4:49,18
And I hope all the speakers
are going to join us.


8132
8:4:49,18 --> 8:4:51,4
And you can go ask them
further questions.


8133
8:4:51,4 --> 8:4:53,64
So with that, start meeting us
out in the lobby, and then


8134
8:4:53,64 --> 8:4:55,63
we'll walk you up So thank
you, thank you.


8135
8:4:55,63 --> 8:5:0,13
[APPLAUSE]


8136
8:5:0,13 --> 8:7:0,13
[MUSIC PLAYING]


